syntax = "proto3";

package base_service.v1;
option go_package="github.com/DOGTT/dm-api-server/api/base;api";

import "common.proto";
import "channel.proto";
import "pet.proto";
import "user.proto";
import "google/api/annotations.proto";

// 通用业务服务接口定义.
/**
servers:
  - url: http://localhost:8080
**/

// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
service BaseService {

    // 微信小程序登录接口
    // @security BearerAuth
    rpc LoginWeChat(LoginWeChatReq) returns (LoginWeChatRes) {
        option (google.api.http) = {
            post: "/v1/user/login/wx"
            body: "*"
        };
    }
    // 微信小程序快速登录注册接口定义
    rpc FastRegisterWeChat(FastRegisterWeChatReq) returns (FastRegisterWeChatRes) {
        option (google.api.http) = {
            post: "/v1/user/fast_reg/wx"
            body: "*"
        };
    }

    // 通用地点搜索
    rpc LocationCommonSearch(LocationCommonSearchReq) returns (LocationCommonSearchRes) {
        option (google.api.http) = {
            get: "/v1/location/search"
        };
    }

    // 批量获取对象上传预签名URL
    rpc MediaPutURLBatchGet(MediaPutURLBatchGetReq) returns (MediaPutURLBatchGetRes) {
        option (google.api.http) = {
            get: "/v1/media/put_url/batch"
        };
    }

    // 列表查询足迹频道类型
    rpc ChannelTypeList(ChannelTypeListReq) returns (ChannelTypeListRes) {
        option (google.api.http) = {
            get: "/v1/channel/type"
        };
    }

    // 创建足迹频道
    rpc ChannelCreate(ChannelCreateReq) returns (ChannelCreateRes) {
        option (google.api.http) = {
            post: "/v1/channel"
            body: "*"
        };
    }

    // 更新足迹频道
    rpc ChannelUpdate(ChannelUpdateReq) returns (ChannelUpdateRes) {
        option (google.api.http) = {
            put: "/v1/channel"
            body: "*"
        };
    }
    
    // 删除足迹频道
    rpc ChannelDelete(ChannelDeleteReq) returns (ChannelDeleteRes) {
        option (google.api.http) = {
            delete: "/v1/channel"
        };
    }
    
    // 按照范围查询足迹基础信息
    rpc ChannelBaseQueryByBound(ChannelBaseQueryByBoundReq) returns (ChannelBaseQueryByBoundRes) {
        option (google.api.http) = {
            post: "/v1/channel/base_query_by_bound"
            body: "*"
        };
    }
    
    // 按照id查询足迹静态完整信息
    rpc ChannelDetailQueryById(ChannelDetailQueryByIdReq) returns (ChannelDetailQueryByIdRes) {
        option (google.api.http) = {
            get: "/v1/channel/detail_query_by_id"
        };
    }

    // 按照id查询足迹频道动态信息
    rpc ChannelFullQueryById(ChannelFullQueryByIdReq) returns (ChannelFullQueryByIdRes) {
        option (google.api.http) = {
            get: "/v1/channel/full_query_by_id"
        };
    }

    // 足迹频道互动
    rpc ChannelInteraction(ChannelInteractionReq) returns (ChannelInteractionRes) {
        option (google.api.http) = {
            post: "/v1/channel/inx"
            body: "*"
        };
    }
    
    // 足迹频道评论
    rpc ChannelComment(ChannelCommentReq) returns (ChannelCommentRes) {
        option (google.api.http) = {
            post: "/v1/channel/post"
            body: "*"
        };
    }

    // 评论加载


    // 最新评论查询
}

// 通用错误消息结构
message ErrorMessage {
    string code = 1;
    string desc = 2;
}


// 登录请求
message LoginWeChatReq {
    string wx_code = 1; // 微信小程序登录时获取临时登录凭证code
}

message LoginWeChatRes {
    string token = 1;
    user.UserInfo user_info = 2;
}


// 宠物注册信息
message FastRegisterData {
    // 名字
    string name = 1;
    // base64 data
    bytes avatar_data = 2;
}

// 快速注册请求
message FastRegisterWeChatReq {
    FastRegisterData reg_data = 1;
    string wx_code = 2;
}

message FastRegisterWeChatRes {
    string token = 1;
    user.UserInfo user_info = 2;
}

// 通用地点搜索请求
message LocationCommonSearchReq {
    string input = 1;
}

message LocationCommonSearchRes {
    //TODO
}


// 批量获取对象上传预签名URL请求
message MediaPutURLBatchGetReq {
    common.MediaType media_type  = 1;
    int32 count = 2;
}

message MediaPutURLBatchGetRes {
    repeated common.MediaInfo media = 1;
}

message ChannelTypeListReq {

}

message ChannelTypeListRes {
    repeated channel.ChannelTypeInfo channel_types = 1;
}

// 足迹创建
message ChannelCreateReq {
    channel.ChannelInfo channel = 1;
}

message ChannelCreateRes {
    channel.ChannelInfo channel = 1;
}

// 足迹更新
message ChannelUpdateReq {
    channel.ChannelInfo channel = 1;
}

message ChannelUpdateRes {

}

// 足迹删除
message ChannelDeleteReq {
    string ch_id = 1;
}

message ChannelDeleteRes {

}

message ChannelBaseQueryByBoundReq {
    // 足迹类型id列表
    repeated int32 type_ids = 1;
    // 坐标范围
    common.BoundCoord bound = 2;
}

message ChannelBaseQueryByBoundRes {
    repeated channel.ChannelInfo channels = 1;
}

message ChannelDetailQueryByIdReq {
    string ch_id = 1;
}

message ChannelDetailQueryByIdRes {
    channel.ChannelInfo channel = 1;
}

message ChannelFullQueryByIdReq {
    string ch_id = 1;
}

message ChannelFullQueryByIdRes {
    channel.ChannelInfo channel = 1;
}

message ChannelInteractionReq {
    string ch_id = 1;
    // 互动类型
    common.UserIxnEventType ixn_event = 2;

    common.UserIxnStateType ixn_state = 3;
}

message ChannelInteractionRes {

}

message ChannelCommentReq {
    channel.PostInfo comment = 1;
}

message ChannelCommentRes {

}