syntax = "proto3";

package base_service.v1;
option go_package = "github.com/DOGTT/dm-api-server/api/base;api";

import "google/api/annotations.proto";

import "common.proto";
import "pet.proto";
import "user.proto";
import "channel.proto";
import "post.proto";
import "system.proto";
// 通用业务服务接口定义.
/**
servers:
  - url: http://localhost:8080
**/

// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
service BaseService {

  // 通用地点搜索
  rpc LocationCommonSearch(LocationCommonSearchReq)
      returns (LocationCommonSearchRes) {
    option (google.api.http) = {
      get : "/v1/location/search"
    };
  }

  // 批量获取对象上传预签名URL
  rpc MediaPutURLBatchGet(MediaPutURLBatchGetReq)
      returns (MediaPutURLBatchGetRes) {
    option (google.api.http) = {
      get : "/v1/media/put_url/batch"
    };
  }

  // 查询系统通知接口
  rpc SystemNotifyGet(SystemNotifyGetReq) returns (SystemNotifyGetRes) {
    option (google.api.http) = {
      get : "/v1/system/notify"
    };
  }

  // 微信小程序登录接口
  // @security BearerAuth
  rpc LoginWeChat(LoginWeChatReq) returns (LoginWeChatRes) {
    option (google.api.http) = {
      post : "/v1/user/login/wx"
      body : "*"
    };
  }

  // 微信小程序快速登录注册接口定义
  rpc FastRegisterWeChat(FastRegisterWeChatReq)
      returns (FastRegisterWeChatRes) {
    option (google.api.http) = {
      post : "/v1/user/fast_reg/wx"
      body : "*"
    };
  }

  // 宠物资料更新
  rpc UserPetUpdate(UserPetUpdateReq) returns (UserPetUpdateRes) {
    option (google.api.http) = {
      put : "/v1/user/pet"
      body : "*"
    };
  }

  // 宠物资料查询
  rpc UserPeGet(UserPeGetReq) returns (UserPeGetRes) {
    option (google.api.http) = {
      get : "/v1/user/pet"
    };
  }

  // 用户互动
  rpc UserInx(UserInxReq) returns (UserInxRes) {
    option (google.api.http) = {
      post : "/v1/user/inx"
      body : "*"
    };
  }

  // 查询狗狗标记类型
  rpc PetMarkerInfoList(PetMarkerInfoReq) returns (PetMarkerInfoRes) {
    option (google.api.http) = {
      get : "/v1/pet/marker"
    };
  }

  // 创建频道
  rpc ChannelCreate(ChannelCreateReq) returns (ChannelCreateRes) {
    option (google.api.http) = {
      post : "/v1/channel"
      body : "*"
    };
  }

  // 更新频道
  rpc ChannelUpdate(ChannelUpdateReq) returns (ChannelUpdateRes) {
    option (google.api.http) = {
      put : "/v1/channel"
      body : "*"
    };
  }

  // 删除频道
  rpc ChannelDelete(ChannelDeleteReq) returns (ChannelDeleteRes) {
    option (google.api.http) = {
      delete : "/v1/channel"
    };
  }

  // 按照id查询频道完整信息
  rpc ChannelGet(ChannelGetReq) returns (ChannelGetRes) {
    option (google.api.http) = {
      get : "/v1/channel"
    };
  }

  // 按照用户互动记录查询频道列表
  rpc ChannelQueryByUser(ChannelQueryByUserReq)
      returns (ChannelQueryByUserRes) {
    option (google.api.http) = {
      get : "/v1/channel/query_by_user"
    };
  }

  // 按照地理范围查询频道
  rpc ChannelQueryByLocationBound(ChannelQueryByLocationBoundReq)
      returns (ChannelQueryByLocationBoundRes) {
    option (google.api.http) = {
      get : "/v1/channel/query_by_location_bound"
    };
  }

  // 频道帖子加载
  rpc PostLoad(PostLoadReq) returns (PostLoadRes) {
    option (google.api.http) = {
      get : "/v1/post/load"
    };
  }

  // 频道帖子复合查询
  rpc PostQuery(PostQueryReq) returns (PostQueryRes) {
    option (google.api.http) = {
      get : "/v1/post/query"
    };
  }

  // 按照用户互动记录查询帖子列表
  rpc PostQueryByUser(PostQueryByUserReq) returns (PostQueryByUserRes) {
    option (google.api.http) = {
      get : "/v1/post/query_by_user"
    };
  }

  // 帖子创建
  rpc PostCreate(PostCreateReq) returns (PostCreateRes) {
    option (google.api.http) = {
      post : "/v1/post"
      body : "*"
    };
  }

  // 帖子更新
  rpc PostUpdate(PostUpdateReq) returns (PostUpdateRes) {
    option (google.api.http) = {
      put : "/v1/post"
      body : "*"
    };
  }

  // 帖子删除
  rpc PostDelete(PostDeleteReq) returns (PostDeleteRes) {
    option (google.api.http) = {
      delete : "/v1/post"
    };
  }

  // 频道帖子回应
  rpc PostReact(PostReactReq) returns (PostReactRes) {
    option (google.api.http) = {
      post : "/v1/post/react"
      body : "*"
    };
  }

  // 发现页业务 TODO
}

// 通用错误消息结构
message ErrorMessage {
  string code = 1;
  string desc = 2;
}

// 登录请求
message LoginWeChatReq {
  string wx_code = 1; // 微信小程序登录时获取临时登录凭证code
}

message LoginWeChatRes {
  string token = 1;
  user.UserInfo user = 2;
}

// 快速注册请求
message FastRegisterWeChatReq {
  user.UserFastRegisterData reg_data = 1;
  string wx_code = 2;
}

message FastRegisterWeChatRes {
  string token = 1;
  user.UserInfo user = 2;
}

// 通用地点搜索请求
message LocationCommonSearchReq { string input = 1; }

message LocationCommonSearchRes {
  // TODO
}

message UserPetUpdateReq { user.UserPetInfo user_pet = 1; }

message UserPetUpdateRes { user.UserPetInfo user_pet = 1; }

message UserPeGetReq { string user_id = 1; }

message UserPeGetRes { user.UserInfo user = 1; }

// 批量获取对象上传预签名URL请求
message MediaPutURLBatchGetReq {
  common.MediaBucket bucket = 1;
  int32 count = 2;
}

message MediaPutURLBatchGetRes { repeated common.MediaInfo media = 1; }

message SystemNotifyGetReq { string last_notify_id = 1; }

message SystemNotifyGetRes { repeated system.NotifyInfo notifies = 1; }

message PetMarkerInfoReq {}

message PetMarkerInfoRes { repeated post.PetMarkerInfo pet_marks = 1; }

// 创建频道
message ChannelCreateReq { channel.ChannelInfo channel = 1; }

message ChannelCreateRes { channel.ChannelInfo channel = 1; }

// 频道更新
message ChannelUpdateReq { channel.ChannelInfo channel = 1; }

message ChannelUpdateRes { channel.ChannelInfo channel = 1; }

// 频道删除
message ChannelDeleteReq { string channel_id = 1; }

message ChannelDeleteRes {}

message ChannelQueryByLocationBoundReq {
  // 坐标范围
  common.BoundCoord bound = 1;
  // 足迹类型id列表
  repeated int32 marker_ids = 2;
}

message ChannelQueryByLocationBoundRes {
  repeated channel.ChannelInfo channels = 1;
}

message ChannelQueryByUserReq {
  string user_id = 1;
  // 互动状态类型, 二选一
  user.UserIxnState ixn_state = 2;
  // 互动时间类型, 二选一
  user.UserIxnEvent ixn_event = 3;
  // 类型
  repeated channel.ChannelExtType ext_types = 4;
}

message ChannelQueryByUserRes { repeated channel.ChannelInfo channels = 1; }

message ChannelDetailQueryByIdReq { string channel_id = 1; }

message ChannelDetailQueryByIdRes { channel.ChannelInfo channel = 1; }

message ChannelGetReq { string channel_id = 1; }

message ChannelGetRes { channel.ChannelInfo channel = 1; }

message UserInxReq {
  // 互动的频道
  string channel_id = 1;
  // 互动的帖子，为空则为互动频道
  string post_id = 2;
  // 互动状态
  user.UserIxnState inx_state = 3;
  // 是否撤销状态
  common.ActionType inx_state_action = 4;
  // 互动事件
  user.UserIxnEvent inx_event = 5;
}

message UserInxRes {}

message PostCreateReq { post.PostInfo post = 1; }

message PostCreateRes { post.PostInfo post = 1; }

message PostUpdateReq { post.PostInfo post = 1; }

message PostUpdateRes { post.PostInfo post = 1; }

message PostDeleteReq {
  string channel_id = 1;
  string post_id = 2;
}

message PostDeleteRes {}

message PostLoadReq {
  string channel_id = 1;
  int32 limit = 2;
  // 从传空加载最新100条
  string last_post_id = 3;
}

message PostLoadRes { repeated post.PostInfo posts = 1; }

message PostQueryReq {
  string channel_id = 1;
  int32 limit = 2;
  int32 marker_id = 3;
}

message PostQueryRes { repeated post.PostInfo posts = 1; }

message PostQueryByUserReq {
  string user_id = 1;
  // 互动状态类型, 二选一
  user.UserIxnState ixn_state = 2;
  // 互动时间类型, 二选一
  user.UserIxnEvent ixn_event = 3;
  // 类型
  repeated post.PostExtType ext_types = 4;
}

message PostQueryByUserRes { repeated post.PostInfo posts = 1; }

message PostReactReq {
  string post_id = 1;
  string react_id = 2;
}

message PostReactRes {}
