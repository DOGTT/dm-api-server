// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pofp.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PointCoord with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PointCoord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PointCoord with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PointCoordMultiError, or
// nil if none found.
func (m *PointCoord) ValidateAll() error {
	return m.validate(true)
}

func (m *PointCoord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Lat

	// no validation rules for Lng

	if len(errors) > 0 {
		return PointCoordMultiError(errors)
	}

	return nil
}

// PointCoordMultiError is an error wrapping multiple validation errors
// returned by PointCoord.ValidateAll() if the designated constraints aren't met.
type PointCoordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PointCoordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PointCoordMultiError) AllErrors() []error { return m }

// PointCoordValidationError is the validation error returned by
// PointCoord.Validate if the designated constraints aren't met.
type PointCoordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PointCoordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PointCoordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PointCoordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PointCoordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PointCoordValidationError) ErrorName() string { return "PointCoordValidationError" }

// Error satisfies the builtin error interface
func (e PointCoordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPointCoord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PointCoordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PointCoordValidationError{}

// Validate checks the field values on BoundCoord with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BoundCoord) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BoundCoord with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BoundCoordMultiError, or
// nil if none found.
func (m *BoundCoord) ValidateAll() error {
	return m.validate(true)
}

func (m *BoundCoord) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSw()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BoundCoordValidationError{
					field:  "Sw",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BoundCoordValidationError{
					field:  "Sw",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSw()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BoundCoordValidationError{
				field:  "Sw",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNe()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BoundCoordValidationError{
					field:  "Ne",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BoundCoordValidationError{
					field:  "Ne",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNe()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BoundCoordValidationError{
				field:  "Ne",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return BoundCoordMultiError(errors)
	}

	return nil
}

// BoundCoordMultiError is an error wrapping multiple validation errors
// returned by BoundCoord.ValidateAll() if the designated constraints aren't met.
type BoundCoordMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BoundCoordMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BoundCoordMultiError) AllErrors() []error { return m }

// BoundCoordValidationError is the validation error returned by
// BoundCoord.Validate if the designated constraints aren't met.
type BoundCoordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BoundCoordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BoundCoordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BoundCoordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BoundCoordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BoundCoordValidationError) ErrorName() string { return "BoundCoordValidationError" }

// Error satisfies the builtin error interface
func (e BoundCoordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBoundCoord.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BoundCoordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BoundCoordValidationError{}

// Validate checks the field values on PofpTypeInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PofpTypeInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PofpTypeInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PofpTypeInfoMultiError, or
// nil if none found.
func (m *PofpTypeInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *PofpTypeInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for CoverageRadius

	// no validation rules for ThemeColor

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PofpTypeInfoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PofpTypeInfoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PofpTypeInfoValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PofpTypeInfoValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PofpTypeInfoValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PofpTypeInfoValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PofpTypeInfoMultiError(errors)
	}

	return nil
}

// PofpTypeInfoMultiError is an error wrapping multiple validation errors
// returned by PofpTypeInfo.ValidateAll() if the designated constraints aren't met.
type PofpTypeInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PofpTypeInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PofpTypeInfoMultiError) AllErrors() []error { return m }

// PofpTypeInfoValidationError is the validation error returned by
// PofpTypeInfo.Validate if the designated constraints aren't met.
type PofpTypeInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PofpTypeInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PofpTypeInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PofpTypeInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PofpTypeInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PofpTypeInfoValidationError) ErrorName() string { return "PofpTypeInfoValidationError" }

// Error satisfies the builtin error interface
func (e PofpTypeInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPofpTypeInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PofpTypeInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PofpTypeInfoValidationError{}

// Validate checks the field values on PofpInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PofpInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PofpInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PofpInfoMultiError, or nil
// if none found.
func (m *PofpInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *PofpInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for TypeId

	// no validation rules for Pid

	// no validation rules for Title

	if all {
		switch v := interface{}(m.GetLngLat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PofpInfoValidationError{
					field:  "LngLat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PofpInfoValidationError{
					field:  "LngLat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLngLat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PofpInfoValidationError{
				field:  "LngLat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Content

	// no validation rules for PoiId

	// no validation rules for Address

	// no validation rules for PoiData

	// no validation rules for ViewsCnt

	// no validation rules for LikesCnt

	// no validation rules for MarksCnt

	// no validation rules for CommentsCnt

	if all {
		switch v := interface{}(m.GetLastView()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PofpInfoValidationError{
					field:  "LastView",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PofpInfoValidationError{
					field:  "LastView",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastView()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PofpInfoValidationError{
				field:  "LastView",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLastMark()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PofpInfoValidationError{
					field:  "LastMark",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PofpInfoValidationError{
					field:  "LastMark",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastMark()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PofpInfoValidationError{
				field:  "LastMark",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PofpInfoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PofpInfoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PofpInfoValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PofpInfoValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PofpInfoValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PofpInfoValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PofpInfoMultiError(errors)
	}

	return nil
}

// PofpInfoMultiError is an error wrapping multiple validation errors returned
// by PofpInfo.ValidateAll() if the designated constraints aren't met.
type PofpInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PofpInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PofpInfoMultiError) AllErrors() []error { return m }

// PofpInfoValidationError is the validation error returned by
// PofpInfo.Validate if the designated constraints aren't met.
type PofpInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PofpInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PofpInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PofpInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PofpInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PofpInfoValidationError) ErrorName() string { return "PofpInfoValidationError" }

// Error satisfies the builtin error interface
func (e PofpInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPofpInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PofpInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PofpInfoValidationError{}

// Validate checks the field values on PofpDynamicInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PofpDynamicInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PofpDynamicInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PofpDynamicInfoMultiError, or nil if none found.
func (m *PofpDynamicInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *PofpDynamicInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if len(errors) > 0 {
		return PofpDynamicInfoMultiError(errors)
	}

	return nil
}

// PofpDynamicInfoMultiError is an error wrapping multiple validation errors
// returned by PofpDynamicInfo.ValidateAll() if the designated constraints
// aren't met.
type PofpDynamicInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PofpDynamicInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PofpDynamicInfoMultiError) AllErrors() []error { return m }

// PofpDynamicInfoValidationError is the validation error returned by
// PofpDynamicInfo.Validate if the designated constraints aren't met.
type PofpDynamicInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PofpDynamicInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PofpDynamicInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PofpDynamicInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PofpDynamicInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PofpDynamicInfoValidationError) ErrorName() string { return "PofpDynamicInfoValidationError" }

// Error satisfies the builtin error interface
func (e PofpDynamicInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPofpDynamicInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PofpDynamicInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PofpDynamicInfoValidationError{}

// Validate checks the field values on PofpCommentInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PofpCommentInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PofpCommentInfo with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PofpCommentInfoMultiError, or nil if none found.
func (m *PofpCommentInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *PofpCommentInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	// no validation rules for ParentUuid

	// no validation rules for Content

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PofpCommentInfoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PofpCommentInfoValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PofpCommentInfoValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PofpCommentInfoValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PofpCommentInfoValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PofpCommentInfoValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PofpCommentInfoMultiError(errors)
	}

	return nil
}

// PofpCommentInfoMultiError is an error wrapping multiple validation errors
// returned by PofpCommentInfo.ValidateAll() if the designated constraints
// aren't met.
type PofpCommentInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PofpCommentInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PofpCommentInfoMultiError) AllErrors() []error { return m }

// PofpCommentInfoValidationError is the validation error returned by
// PofpCommentInfo.Validate if the designated constraints aren't met.
type PofpCommentInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PofpCommentInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PofpCommentInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PofpCommentInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PofpCommentInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PofpCommentInfoValidationError) ErrorName() string { return "PofpCommentInfoValidationError" }

// Error satisfies the builtin error interface
func (e PofpCommentInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPofpCommentInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PofpCommentInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PofpCommentInfoValidationError{}
