// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.14.0
// source: base-service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BaseService_LocationCommonSearch_FullMethodName        = "/base_service.v1.BaseService/LocationCommonSearch"
	BaseService_MediaPutURLBatchGet_FullMethodName         = "/base_service.v1.BaseService/MediaPutURLBatchGet"
	BaseService_SystemNotifyGet_FullMethodName             = "/base_service.v1.BaseService/SystemNotifyGet"
	BaseService_LoginWeChat_FullMethodName                 = "/base_service.v1.BaseService/LoginWeChat"
	BaseService_FastRegisterWeChat_FullMethodName          = "/base_service.v1.BaseService/FastRegisterWeChat"
	BaseService_UserPetUpdate_FullMethodName               = "/base_service.v1.BaseService/UserPetUpdate"
	BaseService_UserPeGet_FullMethodName                   = "/base_service.v1.BaseService/UserPeGet"
	BaseService_UserInx_FullMethodName                     = "/base_service.v1.BaseService/UserInx"
	BaseService_PetMarkerInfoList_FullMethodName           = "/base_service.v1.BaseService/PetMarkerInfoList"
	BaseService_ChannelCreate_FullMethodName               = "/base_service.v1.BaseService/ChannelCreate"
	BaseService_ChannelUpdate_FullMethodName               = "/base_service.v1.BaseService/ChannelUpdate"
	BaseService_ChannelDelete_FullMethodName               = "/base_service.v1.BaseService/ChannelDelete"
	BaseService_ChannelGet_FullMethodName                  = "/base_service.v1.BaseService/ChannelGet"
	BaseService_ChannelQueryByUser_FullMethodName          = "/base_service.v1.BaseService/ChannelQueryByUser"
	BaseService_ChannelQueryByLocationBound_FullMethodName = "/base_service.v1.BaseService/ChannelQueryByLocationBound"
	BaseService_PostLoad_FullMethodName                    = "/base_service.v1.BaseService/PostLoad"
	BaseService_PostQuery_FullMethodName                   = "/base_service.v1.BaseService/PostQuery"
	BaseService_PostQueryByUser_FullMethodName             = "/base_service.v1.BaseService/PostQueryByUser"
	BaseService_PostCreate_FullMethodName                  = "/base_service.v1.BaseService/PostCreate"
	BaseService_PostUpdate_FullMethodName                  = "/base_service.v1.BaseService/PostUpdate"
	BaseService_PostDelete_FullMethodName                  = "/base_service.v1.BaseService/PostDelete"
	BaseService_PostReact_FullMethodName                   = "/base_service.v1.BaseService/PostReact"
)

// BaseServiceClient is the client API for BaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
type BaseServiceClient interface {
	// 通用地点搜索
	LocationCommonSearch(ctx context.Context, in *LocationCommonSearchReq, opts ...grpc.CallOption) (*LocationCommonSearchRes, error)
	// 批量获取对象上传预签名URL
	MediaPutURLBatchGet(ctx context.Context, in *MediaPutURLBatchGetReq, opts ...grpc.CallOption) (*MediaPutURLBatchGetRes, error)
	// 查询系统通知接口
	SystemNotifyGet(ctx context.Context, in *SystemNotifyGetReq, opts ...grpc.CallOption) (*SystemNotifyGetRes, error)
	// 微信小程序登录接口
	// @security BearerAuth
	LoginWeChat(ctx context.Context, in *LoginWeChatReq, opts ...grpc.CallOption) (*LoginWeChatRes, error)
	// 微信小程序快速登录注册接口定义
	FastRegisterWeChat(ctx context.Context, in *FastRegisterWeChatReq, opts ...grpc.CallOption) (*FastRegisterWeChatRes, error)
	// 宠物资料更新
	UserPetUpdate(ctx context.Context, in *UserPetUpdateReq, opts ...grpc.CallOption) (*UserPetUpdateRes, error)
	// 宠物资料查询
	UserPeGet(ctx context.Context, in *UserPeGetReq, opts ...grpc.CallOption) (*UserPeGetRes, error)
	// 用户互动
	UserInx(ctx context.Context, in *UserInxReq, opts ...grpc.CallOption) (*UserInxRes, error)
	// 查询狗狗标记类型
	PetMarkerInfoList(ctx context.Context, in *PetMarkerInfoReq, opts ...grpc.CallOption) (*PetMarkerInfoRes, error)
	// 创建频道
	ChannelCreate(ctx context.Context, in *ChannelCreateReq, opts ...grpc.CallOption) (*ChannelCreateRes, error)
	// 更新频道
	ChannelUpdate(ctx context.Context, in *ChannelUpdateReq, opts ...grpc.CallOption) (*ChannelUpdateRes, error)
	// 删除频道
	ChannelDelete(ctx context.Context, in *ChannelDeleteReq, opts ...grpc.CallOption) (*ChannelDeleteRes, error)
	// 按照id查询频道完整信息
	ChannelGet(ctx context.Context, in *ChannelGetReq, opts ...grpc.CallOption) (*ChannelGetRes, error)
	// 按照用户互动记录查询频道列表
	ChannelQueryByUser(ctx context.Context, in *ChannelQueryByUserReq, opts ...grpc.CallOption) (*ChannelQueryByUserRes, error)
	// 按照地理范围查询频道
	ChannelQueryByLocationBound(ctx context.Context, in *ChannelQueryByLocationBoundReq, opts ...grpc.CallOption) (*ChannelQueryByLocationBoundRes, error)
	// 频道帖子加载
	PostLoad(ctx context.Context, in *PostLoadReq, opts ...grpc.CallOption) (*PostLoadRes, error)
	// 频道帖子复合查询
	PostQuery(ctx context.Context, in *PostQueryReq, opts ...grpc.CallOption) (*PostQueryRes, error)
	// 按照用户互动记录查询帖子列表
	PostQueryByUser(ctx context.Context, in *PostQueryByUserReq, opts ...grpc.CallOption) (*PostQueryByUserRes, error)
	// 帖子创建
	PostCreate(ctx context.Context, in *PostCreateReq, opts ...grpc.CallOption) (*PostCreateRes, error)
	// 帖子更新
	PostUpdate(ctx context.Context, in *PostUpdateReq, opts ...grpc.CallOption) (*PostUpdateRes, error)
	// 帖子删除
	PostDelete(ctx context.Context, in *PostDeleteReq, opts ...grpc.CallOption) (*PostDeleteRes, error)
	// 频道帖子回应
	PostReact(ctx context.Context, in *PostReactReq, opts ...grpc.CallOption) (*PostReactRes, error)
}

type baseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBaseServiceClient(cc grpc.ClientConnInterface) BaseServiceClient {
	return &baseServiceClient{cc}
}

func (c *baseServiceClient) LocationCommonSearch(ctx context.Context, in *LocationCommonSearchReq, opts ...grpc.CallOption) (*LocationCommonSearchRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LocationCommonSearchRes)
	err := c.cc.Invoke(ctx, BaseService_LocationCommonSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) MediaPutURLBatchGet(ctx context.Context, in *MediaPutURLBatchGetReq, opts ...grpc.CallOption) (*MediaPutURLBatchGetRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MediaPutURLBatchGetRes)
	err := c.cc.Invoke(ctx, BaseService_MediaPutURLBatchGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) SystemNotifyGet(ctx context.Context, in *SystemNotifyGetReq, opts ...grpc.CallOption) (*SystemNotifyGetRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemNotifyGetRes)
	err := c.cc.Invoke(ctx, BaseService_SystemNotifyGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) LoginWeChat(ctx context.Context, in *LoginWeChatReq, opts ...grpc.CallOption) (*LoginWeChatRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginWeChatRes)
	err := c.cc.Invoke(ctx, BaseService_LoginWeChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) FastRegisterWeChat(ctx context.Context, in *FastRegisterWeChatReq, opts ...grpc.CallOption) (*FastRegisterWeChatRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FastRegisterWeChatRes)
	err := c.cc.Invoke(ctx, BaseService_FastRegisterWeChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) UserPetUpdate(ctx context.Context, in *UserPetUpdateReq, opts ...grpc.CallOption) (*UserPetUpdateRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserPetUpdateRes)
	err := c.cc.Invoke(ctx, BaseService_UserPetUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) UserPeGet(ctx context.Context, in *UserPeGetReq, opts ...grpc.CallOption) (*UserPeGetRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserPeGetRes)
	err := c.cc.Invoke(ctx, BaseService_UserPeGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) UserInx(ctx context.Context, in *UserInxReq, opts ...grpc.CallOption) (*UserInxRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserInxRes)
	err := c.cc.Invoke(ctx, BaseService_UserInx_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) PetMarkerInfoList(ctx context.Context, in *PetMarkerInfoReq, opts ...grpc.CallOption) (*PetMarkerInfoRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PetMarkerInfoRes)
	err := c.cc.Invoke(ctx, BaseService_PetMarkerInfoList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) ChannelCreate(ctx context.Context, in *ChannelCreateReq, opts ...grpc.CallOption) (*ChannelCreateRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChannelCreateRes)
	err := c.cc.Invoke(ctx, BaseService_ChannelCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) ChannelUpdate(ctx context.Context, in *ChannelUpdateReq, opts ...grpc.CallOption) (*ChannelUpdateRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChannelUpdateRes)
	err := c.cc.Invoke(ctx, BaseService_ChannelUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) ChannelDelete(ctx context.Context, in *ChannelDeleteReq, opts ...grpc.CallOption) (*ChannelDeleteRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChannelDeleteRes)
	err := c.cc.Invoke(ctx, BaseService_ChannelDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) ChannelGet(ctx context.Context, in *ChannelGetReq, opts ...grpc.CallOption) (*ChannelGetRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChannelGetRes)
	err := c.cc.Invoke(ctx, BaseService_ChannelGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) ChannelQueryByUser(ctx context.Context, in *ChannelQueryByUserReq, opts ...grpc.CallOption) (*ChannelQueryByUserRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChannelQueryByUserRes)
	err := c.cc.Invoke(ctx, BaseService_ChannelQueryByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) ChannelQueryByLocationBound(ctx context.Context, in *ChannelQueryByLocationBoundReq, opts ...grpc.CallOption) (*ChannelQueryByLocationBoundRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChannelQueryByLocationBoundRes)
	err := c.cc.Invoke(ctx, BaseService_ChannelQueryByLocationBound_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) PostLoad(ctx context.Context, in *PostLoadReq, opts ...grpc.CallOption) (*PostLoadRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostLoadRes)
	err := c.cc.Invoke(ctx, BaseService_PostLoad_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) PostQuery(ctx context.Context, in *PostQueryReq, opts ...grpc.CallOption) (*PostQueryRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostQueryRes)
	err := c.cc.Invoke(ctx, BaseService_PostQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) PostQueryByUser(ctx context.Context, in *PostQueryByUserReq, opts ...grpc.CallOption) (*PostQueryByUserRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostQueryByUserRes)
	err := c.cc.Invoke(ctx, BaseService_PostQueryByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) PostCreate(ctx context.Context, in *PostCreateReq, opts ...grpc.CallOption) (*PostCreateRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostCreateRes)
	err := c.cc.Invoke(ctx, BaseService_PostCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) PostUpdate(ctx context.Context, in *PostUpdateReq, opts ...grpc.CallOption) (*PostUpdateRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostUpdateRes)
	err := c.cc.Invoke(ctx, BaseService_PostUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) PostDelete(ctx context.Context, in *PostDeleteReq, opts ...grpc.CallOption) (*PostDeleteRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostDeleteRes)
	err := c.cc.Invoke(ctx, BaseService_PostDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) PostReact(ctx context.Context, in *PostReactReq, opts ...grpc.CallOption) (*PostReactRes, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostReactRes)
	err := c.cc.Invoke(ctx, BaseService_PostReact_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BaseServiceServer is the server API for BaseService service.
// All implementations must embed UnimplementedBaseServiceServer
// for forward compatibility.
//
// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
type BaseServiceServer interface {
	// 通用地点搜索
	LocationCommonSearch(context.Context, *LocationCommonSearchReq) (*LocationCommonSearchRes, error)
	// 批量获取对象上传预签名URL
	MediaPutURLBatchGet(context.Context, *MediaPutURLBatchGetReq) (*MediaPutURLBatchGetRes, error)
	// 查询系统通知接口
	SystemNotifyGet(context.Context, *SystemNotifyGetReq) (*SystemNotifyGetRes, error)
	// 微信小程序登录接口
	// @security BearerAuth
	LoginWeChat(context.Context, *LoginWeChatReq) (*LoginWeChatRes, error)
	// 微信小程序快速登录注册接口定义
	FastRegisterWeChat(context.Context, *FastRegisterWeChatReq) (*FastRegisterWeChatRes, error)
	// 宠物资料更新
	UserPetUpdate(context.Context, *UserPetUpdateReq) (*UserPetUpdateRes, error)
	// 宠物资料查询
	UserPeGet(context.Context, *UserPeGetReq) (*UserPeGetRes, error)
	// 用户互动
	UserInx(context.Context, *UserInxReq) (*UserInxRes, error)
	// 查询狗狗标记类型
	PetMarkerInfoList(context.Context, *PetMarkerInfoReq) (*PetMarkerInfoRes, error)
	// 创建频道
	ChannelCreate(context.Context, *ChannelCreateReq) (*ChannelCreateRes, error)
	// 更新频道
	ChannelUpdate(context.Context, *ChannelUpdateReq) (*ChannelUpdateRes, error)
	// 删除频道
	ChannelDelete(context.Context, *ChannelDeleteReq) (*ChannelDeleteRes, error)
	// 按照id查询频道完整信息
	ChannelGet(context.Context, *ChannelGetReq) (*ChannelGetRes, error)
	// 按照用户互动记录查询频道列表
	ChannelQueryByUser(context.Context, *ChannelQueryByUserReq) (*ChannelQueryByUserRes, error)
	// 按照地理范围查询频道
	ChannelQueryByLocationBound(context.Context, *ChannelQueryByLocationBoundReq) (*ChannelQueryByLocationBoundRes, error)
	// 频道帖子加载
	PostLoad(context.Context, *PostLoadReq) (*PostLoadRes, error)
	// 频道帖子复合查询
	PostQuery(context.Context, *PostQueryReq) (*PostQueryRes, error)
	// 按照用户互动记录查询帖子列表
	PostQueryByUser(context.Context, *PostQueryByUserReq) (*PostQueryByUserRes, error)
	// 帖子创建
	PostCreate(context.Context, *PostCreateReq) (*PostCreateRes, error)
	// 帖子更新
	PostUpdate(context.Context, *PostUpdateReq) (*PostUpdateRes, error)
	// 帖子删除
	PostDelete(context.Context, *PostDeleteReq) (*PostDeleteRes, error)
	// 频道帖子回应
	PostReact(context.Context, *PostReactReq) (*PostReactRes, error)
	mustEmbedUnimplementedBaseServiceServer()
}

// UnimplementedBaseServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBaseServiceServer struct{}

func (UnimplementedBaseServiceServer) LocationCommonSearch(context.Context, *LocationCommonSearchReq) (*LocationCommonSearchRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocationCommonSearch not implemented")
}
func (UnimplementedBaseServiceServer) MediaPutURLBatchGet(context.Context, *MediaPutURLBatchGetReq) (*MediaPutURLBatchGetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MediaPutURLBatchGet not implemented")
}
func (UnimplementedBaseServiceServer) SystemNotifyGet(context.Context, *SystemNotifyGetReq) (*SystemNotifyGetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemNotifyGet not implemented")
}
func (UnimplementedBaseServiceServer) LoginWeChat(context.Context, *LoginWeChatReq) (*LoginWeChatRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginWeChat not implemented")
}
func (UnimplementedBaseServiceServer) FastRegisterWeChat(context.Context, *FastRegisterWeChatReq) (*FastRegisterWeChatRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FastRegisterWeChat not implemented")
}
func (UnimplementedBaseServiceServer) UserPetUpdate(context.Context, *UserPetUpdateReq) (*UserPetUpdateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPetUpdate not implemented")
}
func (UnimplementedBaseServiceServer) UserPeGet(context.Context, *UserPeGetReq) (*UserPeGetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPeGet not implemented")
}
func (UnimplementedBaseServiceServer) UserInx(context.Context, *UserInxReq) (*UserInxRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInx not implemented")
}
func (UnimplementedBaseServiceServer) PetMarkerInfoList(context.Context, *PetMarkerInfoReq) (*PetMarkerInfoRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PetMarkerInfoList not implemented")
}
func (UnimplementedBaseServiceServer) ChannelCreate(context.Context, *ChannelCreateReq) (*ChannelCreateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelCreate not implemented")
}
func (UnimplementedBaseServiceServer) ChannelUpdate(context.Context, *ChannelUpdateReq) (*ChannelUpdateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelUpdate not implemented")
}
func (UnimplementedBaseServiceServer) ChannelDelete(context.Context, *ChannelDeleteReq) (*ChannelDeleteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelDelete not implemented")
}
func (UnimplementedBaseServiceServer) ChannelGet(context.Context, *ChannelGetReq) (*ChannelGetRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelGet not implemented")
}
func (UnimplementedBaseServiceServer) ChannelQueryByUser(context.Context, *ChannelQueryByUserReq) (*ChannelQueryByUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelQueryByUser not implemented")
}
func (UnimplementedBaseServiceServer) ChannelQueryByLocationBound(context.Context, *ChannelQueryByLocationBoundReq) (*ChannelQueryByLocationBoundRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelQueryByLocationBound not implemented")
}
func (UnimplementedBaseServiceServer) PostLoad(context.Context, *PostLoadReq) (*PostLoadRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostLoad not implemented")
}
func (UnimplementedBaseServiceServer) PostQuery(context.Context, *PostQueryReq) (*PostQueryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostQuery not implemented")
}
func (UnimplementedBaseServiceServer) PostQueryByUser(context.Context, *PostQueryByUserReq) (*PostQueryByUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostQueryByUser not implemented")
}
func (UnimplementedBaseServiceServer) PostCreate(context.Context, *PostCreateReq) (*PostCreateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCreate not implemented")
}
func (UnimplementedBaseServiceServer) PostUpdate(context.Context, *PostUpdateReq) (*PostUpdateRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostUpdate not implemented")
}
func (UnimplementedBaseServiceServer) PostDelete(context.Context, *PostDeleteReq) (*PostDeleteRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostDelete not implemented")
}
func (UnimplementedBaseServiceServer) PostReact(context.Context, *PostReactReq) (*PostReactRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostReact not implemented")
}
func (UnimplementedBaseServiceServer) mustEmbedUnimplementedBaseServiceServer() {}
func (UnimplementedBaseServiceServer) testEmbeddedByValue()                     {}

// UnsafeBaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BaseServiceServer will
// result in compilation errors.
type UnsafeBaseServiceServer interface {
	mustEmbedUnimplementedBaseServiceServer()
}

func RegisterBaseServiceServer(s grpc.ServiceRegistrar, srv BaseServiceServer) {
	// If the following call pancis, it indicates UnimplementedBaseServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BaseService_ServiceDesc, srv)
}

func _BaseService_LocationCommonSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocationCommonSearchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).LocationCommonSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseService_LocationCommonSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).LocationCommonSearch(ctx, req.(*LocationCommonSearchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_MediaPutURLBatchGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MediaPutURLBatchGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).MediaPutURLBatchGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseService_MediaPutURLBatchGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).MediaPutURLBatchGet(ctx, req.(*MediaPutURLBatchGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_SystemNotifyGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemNotifyGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).SystemNotifyGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseService_SystemNotifyGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).SystemNotifyGet(ctx, req.(*SystemNotifyGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_LoginWeChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginWeChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).LoginWeChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseService_LoginWeChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).LoginWeChat(ctx, req.(*LoginWeChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_FastRegisterWeChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FastRegisterWeChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).FastRegisterWeChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseService_FastRegisterWeChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).FastRegisterWeChat(ctx, req.(*FastRegisterWeChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_UserPetUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPetUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).UserPetUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseService_UserPetUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).UserPetUpdate(ctx, req.(*UserPetUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_UserPeGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPeGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).UserPeGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseService_UserPeGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).UserPeGet(ctx, req.(*UserPeGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_UserInx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInxReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).UserInx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseService_UserInx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).UserInx(ctx, req.(*UserInxReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_PetMarkerInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PetMarkerInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).PetMarkerInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseService_PetMarkerInfoList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).PetMarkerInfoList(ctx, req.(*PetMarkerInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_ChannelCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).ChannelCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseService_ChannelCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).ChannelCreate(ctx, req.(*ChannelCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_ChannelUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).ChannelUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseService_ChannelUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).ChannelUpdate(ctx, req.(*ChannelUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_ChannelDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).ChannelDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseService_ChannelDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).ChannelDelete(ctx, req.(*ChannelDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_ChannelGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).ChannelGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseService_ChannelGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).ChannelGet(ctx, req.(*ChannelGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_ChannelQueryByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelQueryByUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).ChannelQueryByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseService_ChannelQueryByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).ChannelQueryByUser(ctx, req.(*ChannelQueryByUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_ChannelQueryByLocationBound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelQueryByLocationBoundReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).ChannelQueryByLocationBound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseService_ChannelQueryByLocationBound_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).ChannelQueryByLocationBound(ctx, req.(*ChannelQueryByLocationBoundReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_PostLoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostLoadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).PostLoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseService_PostLoad_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).PostLoad(ctx, req.(*PostLoadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_PostQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostQueryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).PostQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseService_PostQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).PostQuery(ctx, req.(*PostQueryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_PostQueryByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostQueryByUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).PostQueryByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseService_PostQueryByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).PostQueryByUser(ctx, req.(*PostQueryByUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_PostCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).PostCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseService_PostCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).PostCreate(ctx, req.(*PostCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_PostUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).PostUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseService_PostUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).PostUpdate(ctx, req.(*PostUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_PostDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).PostDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseService_PostDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).PostDelete(ctx, req.(*PostDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_PostReact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostReactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).PostReact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseService_PostReact_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).PostReact(ctx, req.(*PostReactReq))
	}
	return interceptor(ctx, in, info, handler)
}

// BaseService_ServiceDesc is the grpc.ServiceDesc for BaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "base_service.v1.BaseService",
	HandlerType: (*BaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LocationCommonSearch",
			Handler:    _BaseService_LocationCommonSearch_Handler,
		},
		{
			MethodName: "MediaPutURLBatchGet",
			Handler:    _BaseService_MediaPutURLBatchGet_Handler,
		},
		{
			MethodName: "SystemNotifyGet",
			Handler:    _BaseService_SystemNotifyGet_Handler,
		},
		{
			MethodName: "LoginWeChat",
			Handler:    _BaseService_LoginWeChat_Handler,
		},
		{
			MethodName: "FastRegisterWeChat",
			Handler:    _BaseService_FastRegisterWeChat_Handler,
		},
		{
			MethodName: "UserPetUpdate",
			Handler:    _BaseService_UserPetUpdate_Handler,
		},
		{
			MethodName: "UserPeGet",
			Handler:    _BaseService_UserPeGet_Handler,
		},
		{
			MethodName: "UserInx",
			Handler:    _BaseService_UserInx_Handler,
		},
		{
			MethodName: "PetMarkerInfoList",
			Handler:    _BaseService_PetMarkerInfoList_Handler,
		},
		{
			MethodName: "ChannelCreate",
			Handler:    _BaseService_ChannelCreate_Handler,
		},
		{
			MethodName: "ChannelUpdate",
			Handler:    _BaseService_ChannelUpdate_Handler,
		},
		{
			MethodName: "ChannelDelete",
			Handler:    _BaseService_ChannelDelete_Handler,
		},
		{
			MethodName: "ChannelGet",
			Handler:    _BaseService_ChannelGet_Handler,
		},
		{
			MethodName: "ChannelQueryByUser",
			Handler:    _BaseService_ChannelQueryByUser_Handler,
		},
		{
			MethodName: "ChannelQueryByLocationBound",
			Handler:    _BaseService_ChannelQueryByLocationBound_Handler,
		},
		{
			MethodName: "PostLoad",
			Handler:    _BaseService_PostLoad_Handler,
		},
		{
			MethodName: "PostQuery",
			Handler:    _BaseService_PostQuery_Handler,
		},
		{
			MethodName: "PostQueryByUser",
			Handler:    _BaseService_PostQueryByUser_Handler,
		},
		{
			MethodName: "PostCreate",
			Handler:    _BaseService_PostCreate_Handler,
		},
		{
			MethodName: "PostUpdate",
			Handler:    _BaseService_PostUpdate_Handler,
		},
		{
			MethodName: "PostDelete",
			Handler:    _BaseService_PostDelete_Handler,
		},
		{
			MethodName: "PostReact",
			Handler:    _BaseService_PostReact_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "base-service.proto",
}
