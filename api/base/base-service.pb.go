// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.14.0
// source: base-service.proto

package api

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 通用错误消息结构
type ErrorMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Desc          string                 `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorMessage) Reset() {
	*x = ErrorMessage{}
	mi := &file_base_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorMessage) ProtoMessage() {}

func (x *ErrorMessage) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorMessage.ProtoReflect.Descriptor instead.
func (*ErrorMessage) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{0}
}

func (x *ErrorMessage) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ErrorMessage) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

// 登录请求
type LoginWeChatReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WxCode        string                 `protobuf:"bytes,1,opt,name=wx_code,json=wxCode,proto3" json:"wx_code,omitempty"` // 微信小程序登录时获取临时登录凭证code
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoginWeChatReq) Reset() {
	*x = LoginWeChatReq{}
	mi := &file_base_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginWeChatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginWeChatReq) ProtoMessage() {}

func (x *LoginWeChatReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginWeChatReq.ProtoReflect.Descriptor instead.
func (*LoginWeChatReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{1}
}

func (x *LoginWeChatReq) GetWxCode() string {
	if x != nil {
		return x.WxCode
	}
	return ""
}

type LoginWeChatRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	User          *UserInfo              `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoginWeChatRes) Reset() {
	*x = LoginWeChatRes{}
	mi := &file_base_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginWeChatRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginWeChatRes) ProtoMessage() {}

func (x *LoginWeChatRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginWeChatRes.ProtoReflect.Descriptor instead.
func (*LoginWeChatRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{2}
}

func (x *LoginWeChatRes) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *LoginWeChatRes) GetUser() *UserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

// 快速注册请求
type FastRegisterWeChatReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RegData       *UserFastRegisterData  `protobuf:"bytes,1,opt,name=reg_data,json=regData,proto3" json:"reg_data,omitempty"`
	WxCode        string                 `protobuf:"bytes,2,opt,name=wx_code,json=wxCode,proto3" json:"wx_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FastRegisterWeChatReq) Reset() {
	*x = FastRegisterWeChatReq{}
	mi := &file_base_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FastRegisterWeChatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastRegisterWeChatReq) ProtoMessage() {}

func (x *FastRegisterWeChatReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastRegisterWeChatReq.ProtoReflect.Descriptor instead.
func (*FastRegisterWeChatReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{3}
}

func (x *FastRegisterWeChatReq) GetRegData() *UserFastRegisterData {
	if x != nil {
		return x.RegData
	}
	return nil
}

func (x *FastRegisterWeChatReq) GetWxCode() string {
	if x != nil {
		return x.WxCode
	}
	return ""
}

type FastRegisterWeChatRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	User          *UserInfo              `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FastRegisterWeChatRes) Reset() {
	*x = FastRegisterWeChatRes{}
	mi := &file_base_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FastRegisterWeChatRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastRegisterWeChatRes) ProtoMessage() {}

func (x *FastRegisterWeChatRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastRegisterWeChatRes.ProtoReflect.Descriptor instead.
func (*FastRegisterWeChatRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{4}
}

func (x *FastRegisterWeChatRes) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *FastRegisterWeChatRes) GetUser() *UserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

// 通用地点搜索请求
type LocationCommonSearchReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Input         string                 `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocationCommonSearchReq) Reset() {
	*x = LocationCommonSearchReq{}
	mi := &file_base_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocationCommonSearchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationCommonSearchReq) ProtoMessage() {}

func (x *LocationCommonSearchReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationCommonSearchReq.ProtoReflect.Descriptor instead.
func (*LocationCommonSearchReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{5}
}

func (x *LocationCommonSearchReq) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

type LocationCommonSearchRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocationCommonSearchRes) Reset() {
	*x = LocationCommonSearchRes{}
	mi := &file_base_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocationCommonSearchRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationCommonSearchRes) ProtoMessage() {}

func (x *LocationCommonSearchRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationCommonSearchRes.ProtoReflect.Descriptor instead.
func (*LocationCommonSearchRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{6}
}

type UserPetUpdateReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserPet       *UserPetInfo           `protobuf:"bytes,1,opt,name=user_pet,json=userPet,proto3" json:"user_pet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserPetUpdateReq) Reset() {
	*x = UserPetUpdateReq{}
	mi := &file_base_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserPetUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPetUpdateReq) ProtoMessage() {}

func (x *UserPetUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPetUpdateReq.ProtoReflect.Descriptor instead.
func (*UserPetUpdateReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{7}
}

func (x *UserPetUpdateReq) GetUserPet() *UserPetInfo {
	if x != nil {
		return x.UserPet
	}
	return nil
}

type UserPetUpdateRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserPet       *UserPetInfo           `protobuf:"bytes,1,opt,name=user_pet,json=userPet,proto3" json:"user_pet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserPetUpdateRes) Reset() {
	*x = UserPetUpdateRes{}
	mi := &file_base_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserPetUpdateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPetUpdateRes) ProtoMessage() {}

func (x *UserPetUpdateRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPetUpdateRes.ProtoReflect.Descriptor instead.
func (*UserPetUpdateRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{8}
}

func (x *UserPetUpdateRes) GetUserPet() *UserPetInfo {
	if x != nil {
		return x.UserPet
	}
	return nil
}

type UserPeGetReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserPeGetReq) Reset() {
	*x = UserPeGetReq{}
	mi := &file_base_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserPeGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPeGetReq) ProtoMessage() {}

func (x *UserPeGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPeGetReq.ProtoReflect.Descriptor instead.
func (*UserPeGetReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{9}
}

func (x *UserPeGetReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type UserPeGetRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *UserInfo              `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserPeGetRes) Reset() {
	*x = UserPeGetRes{}
	mi := &file_base_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserPeGetRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPeGetRes) ProtoMessage() {}

func (x *UserPeGetRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPeGetRes.ProtoReflect.Descriptor instead.
func (*UserPeGetRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{10}
}

func (x *UserPeGetRes) GetUser() *UserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

// 批量获取对象上传预签名URL请求
type MediaPutURLBatchGetReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Bucket        MediaBucket            `protobuf:"varint,1,opt,name=bucket,proto3,enum=common.MediaBucket" json:"bucket,omitempty"`
	Count         int32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MediaPutURLBatchGetReq) Reset() {
	*x = MediaPutURLBatchGetReq{}
	mi := &file_base_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MediaPutURLBatchGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaPutURLBatchGetReq) ProtoMessage() {}

func (x *MediaPutURLBatchGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaPutURLBatchGetReq.ProtoReflect.Descriptor instead.
func (*MediaPutURLBatchGetReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{11}
}

func (x *MediaPutURLBatchGetReq) GetBucket() MediaBucket {
	if x != nil {
		return x.Bucket
	}
	return MediaBucket_MEDIA_BUCKET_UNSPECIFIED
}

func (x *MediaPutURLBatchGetReq) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type MediaPutURLBatchGetRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Media         []*MediaInfo           `protobuf:"bytes,1,rep,name=media,proto3" json:"media,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MediaPutURLBatchGetRes) Reset() {
	*x = MediaPutURLBatchGetRes{}
	mi := &file_base_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MediaPutURLBatchGetRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaPutURLBatchGetRes) ProtoMessage() {}

func (x *MediaPutURLBatchGetRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaPutURLBatchGetRes.ProtoReflect.Descriptor instead.
func (*MediaPutURLBatchGetRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{12}
}

func (x *MediaPutURLBatchGetRes) GetMedia() []*MediaInfo {
	if x != nil {
		return x.Media
	}
	return nil
}

type SystemNotifyGetReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	LastNotifyId  string                 `protobuf:"bytes,1,opt,name=last_notify_id,json=lastNotifyId,proto3" json:"last_notify_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SystemNotifyGetReq) Reset() {
	*x = SystemNotifyGetReq{}
	mi := &file_base_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemNotifyGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemNotifyGetReq) ProtoMessage() {}

func (x *SystemNotifyGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemNotifyGetReq.ProtoReflect.Descriptor instead.
func (*SystemNotifyGetReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{13}
}

func (x *SystemNotifyGetReq) GetLastNotifyId() string {
	if x != nil {
		return x.LastNotifyId
	}
	return ""
}

type SystemNotifyGetRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Notifies      []*NotifyInfo          `protobuf:"bytes,1,rep,name=notifies,proto3" json:"notifies,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SystemNotifyGetRes) Reset() {
	*x = SystemNotifyGetRes{}
	mi := &file_base_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SystemNotifyGetRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemNotifyGetRes) ProtoMessage() {}

func (x *SystemNotifyGetRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemNotifyGetRes.ProtoReflect.Descriptor instead.
func (*SystemNotifyGetRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{14}
}

func (x *SystemNotifyGetRes) GetNotifies() []*NotifyInfo {
	if x != nil {
		return x.Notifies
	}
	return nil
}

type PetMarkerInfoReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PetMarkerInfoReq) Reset() {
	*x = PetMarkerInfoReq{}
	mi := &file_base_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PetMarkerInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetMarkerInfoReq) ProtoMessage() {}

func (x *PetMarkerInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetMarkerInfoReq.ProtoReflect.Descriptor instead.
func (*PetMarkerInfoReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{15}
}

type PetMarkerInfoRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PetMarks      []*PetMarkerInfo       `protobuf:"bytes,1,rep,name=pet_marks,json=petMarks,proto3" json:"pet_marks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PetMarkerInfoRes) Reset() {
	*x = PetMarkerInfoRes{}
	mi := &file_base_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PetMarkerInfoRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PetMarkerInfoRes) ProtoMessage() {}

func (x *PetMarkerInfoRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PetMarkerInfoRes.ProtoReflect.Descriptor instead.
func (*PetMarkerInfoRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{16}
}

func (x *PetMarkerInfoRes) GetPetMarks() []*PetMarkerInfo {
	if x != nil {
		return x.PetMarks
	}
	return nil
}

// 创建频道
type ChannelCreateReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Channel       *ChannelInfo           `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelCreateReq) Reset() {
	*x = ChannelCreateReq{}
	mi := &file_base_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelCreateReq) ProtoMessage() {}

func (x *ChannelCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelCreateReq.ProtoReflect.Descriptor instead.
func (*ChannelCreateReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{17}
}

func (x *ChannelCreateReq) GetChannel() *ChannelInfo {
	if x != nil {
		return x.Channel
	}
	return nil
}

type ChannelCreateRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Channel       *ChannelInfo           `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelCreateRes) Reset() {
	*x = ChannelCreateRes{}
	mi := &file_base_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelCreateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelCreateRes) ProtoMessage() {}

func (x *ChannelCreateRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelCreateRes.ProtoReflect.Descriptor instead.
func (*ChannelCreateRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{18}
}

func (x *ChannelCreateRes) GetChannel() *ChannelInfo {
	if x != nil {
		return x.Channel
	}
	return nil
}

// 频道更新
type ChannelUpdateReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Channel       *ChannelInfo           `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelUpdateReq) Reset() {
	*x = ChannelUpdateReq{}
	mi := &file_base_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelUpdateReq) ProtoMessage() {}

func (x *ChannelUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelUpdateReq.ProtoReflect.Descriptor instead.
func (*ChannelUpdateReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{19}
}

func (x *ChannelUpdateReq) GetChannel() *ChannelInfo {
	if x != nil {
		return x.Channel
	}
	return nil
}

type ChannelUpdateRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Channel       *ChannelInfo           `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelUpdateRes) Reset() {
	*x = ChannelUpdateRes{}
	mi := &file_base_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelUpdateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelUpdateRes) ProtoMessage() {}

func (x *ChannelUpdateRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelUpdateRes.ProtoReflect.Descriptor instead.
func (*ChannelUpdateRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{20}
}

func (x *ChannelUpdateRes) GetChannel() *ChannelInfo {
	if x != nil {
		return x.Channel
	}
	return nil
}

// 频道删除
type ChannelDeleteReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChannelId     string                 `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelDeleteReq) Reset() {
	*x = ChannelDeleteReq{}
	mi := &file_base_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelDeleteReq) ProtoMessage() {}

func (x *ChannelDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelDeleteReq.ProtoReflect.Descriptor instead.
func (*ChannelDeleteReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{21}
}

func (x *ChannelDeleteReq) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

type ChannelDeleteRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelDeleteRes) Reset() {
	*x = ChannelDeleteRes{}
	mi := &file_base_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelDeleteRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelDeleteRes) ProtoMessage() {}

func (x *ChannelDeleteRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelDeleteRes.ProtoReflect.Descriptor instead.
func (*ChannelDeleteRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{22}
}

type ChannelQueryByLocationBoundReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 坐标范围
	Bound *BoundCoord `protobuf:"bytes,1,opt,name=bound,proto3" json:"bound,omitempty"`
	// 足迹类型id列表
	MarkerIds     []int32 `protobuf:"varint,2,rep,packed,name=marker_ids,json=markerIds,proto3" json:"marker_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelQueryByLocationBoundReq) Reset() {
	*x = ChannelQueryByLocationBoundReq{}
	mi := &file_base_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelQueryByLocationBoundReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelQueryByLocationBoundReq) ProtoMessage() {}

func (x *ChannelQueryByLocationBoundReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelQueryByLocationBoundReq.ProtoReflect.Descriptor instead.
func (*ChannelQueryByLocationBoundReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{23}
}

func (x *ChannelQueryByLocationBoundReq) GetBound() *BoundCoord {
	if x != nil {
		return x.Bound
	}
	return nil
}

func (x *ChannelQueryByLocationBoundReq) GetMarkerIds() []int32 {
	if x != nil {
		return x.MarkerIds
	}
	return nil
}

type ChannelQueryByLocationBoundRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Channels      []*ChannelInfo         `protobuf:"bytes,1,rep,name=channels,proto3" json:"channels,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelQueryByLocationBoundRes) Reset() {
	*x = ChannelQueryByLocationBoundRes{}
	mi := &file_base_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelQueryByLocationBoundRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelQueryByLocationBoundRes) ProtoMessage() {}

func (x *ChannelQueryByLocationBoundRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelQueryByLocationBoundRes.ProtoReflect.Descriptor instead.
func (*ChannelQueryByLocationBoundRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{24}
}

func (x *ChannelQueryByLocationBoundRes) GetChannels() []*ChannelInfo {
	if x != nil {
		return x.Channels
	}
	return nil
}

type ChannelQueryByUserReq struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	UserId string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 互动状态类型, 二选一
	IxnState UserIxnState `protobuf:"varint,2,opt,name=ixn_state,json=ixnState,proto3,enum=user.UserIxnState" json:"ixn_state,omitempty"`
	// 互动时间类型, 二选一
	IxnEvent UserIxnEvent `protobuf:"varint,3,opt,name=ixn_event,json=ixnEvent,proto3,enum=user.UserIxnEvent" json:"ixn_event,omitempty"`
	// 类型
	ExtTypes      []ChannelExtType `protobuf:"varint,4,rep,packed,name=ext_types,json=extTypes,proto3,enum=channel.ChannelExtType" json:"ext_types,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelQueryByUserReq) Reset() {
	*x = ChannelQueryByUserReq{}
	mi := &file_base_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelQueryByUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelQueryByUserReq) ProtoMessage() {}

func (x *ChannelQueryByUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelQueryByUserReq.ProtoReflect.Descriptor instead.
func (*ChannelQueryByUserReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{25}
}

func (x *ChannelQueryByUserReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ChannelQueryByUserReq) GetIxnState() UserIxnState {
	if x != nil {
		return x.IxnState
	}
	return UserIxnState_USER_IXN_STATE_UNSPECIFIED
}

func (x *ChannelQueryByUserReq) GetIxnEvent() UserIxnEvent {
	if x != nil {
		return x.IxnEvent
	}
	return UserIxnEvent_USER_IXN_EVENT_UNSPECIFIED
}

func (x *ChannelQueryByUserReq) GetExtTypes() []ChannelExtType {
	if x != nil {
		return x.ExtTypes
	}
	return nil
}

type ChannelQueryByUserRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Channels      []*ChannelInfo         `protobuf:"bytes,1,rep,name=channels,proto3" json:"channels,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelQueryByUserRes) Reset() {
	*x = ChannelQueryByUserRes{}
	mi := &file_base_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelQueryByUserRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelQueryByUserRes) ProtoMessage() {}

func (x *ChannelQueryByUserRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelQueryByUserRes.ProtoReflect.Descriptor instead.
func (*ChannelQueryByUserRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{26}
}

func (x *ChannelQueryByUserRes) GetChannels() []*ChannelInfo {
	if x != nil {
		return x.Channels
	}
	return nil
}

type ChannelDetailQueryByIdReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChannelId     string                 `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelDetailQueryByIdReq) Reset() {
	*x = ChannelDetailQueryByIdReq{}
	mi := &file_base_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelDetailQueryByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelDetailQueryByIdReq) ProtoMessage() {}

func (x *ChannelDetailQueryByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelDetailQueryByIdReq.ProtoReflect.Descriptor instead.
func (*ChannelDetailQueryByIdReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{27}
}

func (x *ChannelDetailQueryByIdReq) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

type ChannelDetailQueryByIdRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Channel       *ChannelInfo           `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelDetailQueryByIdRes) Reset() {
	*x = ChannelDetailQueryByIdRes{}
	mi := &file_base_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelDetailQueryByIdRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelDetailQueryByIdRes) ProtoMessage() {}

func (x *ChannelDetailQueryByIdRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelDetailQueryByIdRes.ProtoReflect.Descriptor instead.
func (*ChannelDetailQueryByIdRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{28}
}

func (x *ChannelDetailQueryByIdRes) GetChannel() *ChannelInfo {
	if x != nil {
		return x.Channel
	}
	return nil
}

type ChannelGetReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChannelId     string                 `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelGetReq) Reset() {
	*x = ChannelGetReq{}
	mi := &file_base_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelGetReq) ProtoMessage() {}

func (x *ChannelGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelGetReq.ProtoReflect.Descriptor instead.
func (*ChannelGetReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{29}
}

func (x *ChannelGetReq) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

type ChannelGetRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Channel       *ChannelInfo           `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelGetRes) Reset() {
	*x = ChannelGetRes{}
	mi := &file_base_service_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelGetRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelGetRes) ProtoMessage() {}

func (x *ChannelGetRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelGetRes.ProtoReflect.Descriptor instead.
func (*ChannelGetRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{30}
}

func (x *ChannelGetRes) GetChannel() *ChannelInfo {
	if x != nil {
		return x.Channel
	}
	return nil
}

type UserInxReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 互动的频道
	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// 互动的帖子，为空则为互动频道
	PostId string `protobuf:"bytes,2,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty"`
	// 互动状态
	InxState UserIxnState `protobuf:"varint,3,opt,name=inx_state,json=inxState,proto3,enum=user.UserIxnState" json:"inx_state,omitempty"`
	// 是否撤销状态
	InxStateAction ActionType `protobuf:"varint,4,opt,name=inx_state_action,json=inxStateAction,proto3,enum=common.ActionType" json:"inx_state_action,omitempty"`
	// 互动事件
	InxEvent      UserIxnEvent `protobuf:"varint,5,opt,name=inx_event,json=inxEvent,proto3,enum=user.UserIxnEvent" json:"inx_event,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserInxReq) Reset() {
	*x = UserInxReq{}
	mi := &file_base_service_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserInxReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInxReq) ProtoMessage() {}

func (x *UserInxReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInxReq.ProtoReflect.Descriptor instead.
func (*UserInxReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{31}
}

func (x *UserInxReq) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *UserInxReq) GetPostId() string {
	if x != nil {
		return x.PostId
	}
	return ""
}

func (x *UserInxReq) GetInxState() UserIxnState {
	if x != nil {
		return x.InxState
	}
	return UserIxnState_USER_IXN_STATE_UNSPECIFIED
}

func (x *UserInxReq) GetInxStateAction() ActionType {
	if x != nil {
		return x.InxStateAction
	}
	return ActionType_ACTION_TYPE_UNSPECIFIED
}

func (x *UserInxReq) GetInxEvent() UserIxnEvent {
	if x != nil {
		return x.InxEvent
	}
	return UserIxnEvent_USER_IXN_EVENT_UNSPECIFIED
}

type UserInxRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserInxRes) Reset() {
	*x = UserInxRes{}
	mi := &file_base_service_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserInxRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInxRes) ProtoMessage() {}

func (x *UserInxRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInxRes.ProtoReflect.Descriptor instead.
func (*UserInxRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{32}
}

type PostCreateReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Post          *PostInfo              `protobuf:"bytes,1,opt,name=post,proto3" json:"post,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostCreateReq) Reset() {
	*x = PostCreateReq{}
	mi := &file_base_service_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostCreateReq) ProtoMessage() {}

func (x *PostCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostCreateReq.ProtoReflect.Descriptor instead.
func (*PostCreateReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{33}
}

func (x *PostCreateReq) GetPost() *PostInfo {
	if x != nil {
		return x.Post
	}
	return nil
}

type PostCreateRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Post          *PostInfo              `protobuf:"bytes,1,opt,name=post,proto3" json:"post,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostCreateRes) Reset() {
	*x = PostCreateRes{}
	mi := &file_base_service_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostCreateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostCreateRes) ProtoMessage() {}

func (x *PostCreateRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostCreateRes.ProtoReflect.Descriptor instead.
func (*PostCreateRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{34}
}

func (x *PostCreateRes) GetPost() *PostInfo {
	if x != nil {
		return x.Post
	}
	return nil
}

type PostUpdateReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Post          *PostInfo              `protobuf:"bytes,1,opt,name=post,proto3" json:"post,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostUpdateReq) Reset() {
	*x = PostUpdateReq{}
	mi := &file_base_service_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostUpdateReq) ProtoMessage() {}

func (x *PostUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostUpdateReq.ProtoReflect.Descriptor instead.
func (*PostUpdateReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{35}
}

func (x *PostUpdateReq) GetPost() *PostInfo {
	if x != nil {
		return x.Post
	}
	return nil
}

type PostUpdateRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Post          *PostInfo              `protobuf:"bytes,1,opt,name=post,proto3" json:"post,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostUpdateRes) Reset() {
	*x = PostUpdateRes{}
	mi := &file_base_service_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostUpdateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostUpdateRes) ProtoMessage() {}

func (x *PostUpdateRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostUpdateRes.ProtoReflect.Descriptor instead.
func (*PostUpdateRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{36}
}

func (x *PostUpdateRes) GetPost() *PostInfo {
	if x != nil {
		return x.Post
	}
	return nil
}

type PostDeleteReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChannelId     string                 `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	PostId        string                 `protobuf:"bytes,2,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostDeleteReq) Reset() {
	*x = PostDeleteReq{}
	mi := &file_base_service_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostDeleteReq) ProtoMessage() {}

func (x *PostDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostDeleteReq.ProtoReflect.Descriptor instead.
func (*PostDeleteReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{37}
}

func (x *PostDeleteReq) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *PostDeleteReq) GetPostId() string {
	if x != nil {
		return x.PostId
	}
	return ""
}

type PostDeleteRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostDeleteRes) Reset() {
	*x = PostDeleteRes{}
	mi := &file_base_service_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostDeleteRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostDeleteRes) ProtoMessage() {}

func (x *PostDeleteRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostDeleteRes.ProtoReflect.Descriptor instead.
func (*PostDeleteRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{38}
}

type PostLoadReq struct {
	state     protoimpl.MessageState `protogen:"open.v1"`
	ChannelId string                 `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Limit     int32                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// 从传空加载最新100条
	LastPostId    string `protobuf:"bytes,3,opt,name=last_post_id,json=lastPostId,proto3" json:"last_post_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostLoadReq) Reset() {
	*x = PostLoadReq{}
	mi := &file_base_service_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostLoadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostLoadReq) ProtoMessage() {}

func (x *PostLoadReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostLoadReq.ProtoReflect.Descriptor instead.
func (*PostLoadReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{39}
}

func (x *PostLoadReq) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *PostLoadReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PostLoadReq) GetLastPostId() string {
	if x != nil {
		return x.LastPostId
	}
	return ""
}

type PostLoadRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Posts         []*PostInfo            `protobuf:"bytes,1,rep,name=posts,proto3" json:"posts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostLoadRes) Reset() {
	*x = PostLoadRes{}
	mi := &file_base_service_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostLoadRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostLoadRes) ProtoMessage() {}

func (x *PostLoadRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostLoadRes.ProtoReflect.Descriptor instead.
func (*PostLoadRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{40}
}

func (x *PostLoadRes) GetPosts() []*PostInfo {
	if x != nil {
		return x.Posts
	}
	return nil
}

type PostQueryReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChannelId     string                 `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Limit         int32                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	MarkerId      int32                  `protobuf:"varint,3,opt,name=marker_id,json=markerId,proto3" json:"marker_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostQueryReq) Reset() {
	*x = PostQueryReq{}
	mi := &file_base_service_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostQueryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostQueryReq) ProtoMessage() {}

func (x *PostQueryReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostQueryReq.ProtoReflect.Descriptor instead.
func (*PostQueryReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{41}
}

func (x *PostQueryReq) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *PostQueryReq) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PostQueryReq) GetMarkerId() int32 {
	if x != nil {
		return x.MarkerId
	}
	return 0
}

type PostQueryRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Posts         []*PostInfo            `protobuf:"bytes,1,rep,name=posts,proto3" json:"posts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostQueryRes) Reset() {
	*x = PostQueryRes{}
	mi := &file_base_service_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostQueryRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostQueryRes) ProtoMessage() {}

func (x *PostQueryRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostQueryRes.ProtoReflect.Descriptor instead.
func (*PostQueryRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{42}
}

func (x *PostQueryRes) GetPosts() []*PostInfo {
	if x != nil {
		return x.Posts
	}
	return nil
}

type PostQueryByUserReq struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	UserId string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// 互动状态类型, 二选一
	IxnState UserIxnState `protobuf:"varint,2,opt,name=ixn_state,json=ixnState,proto3,enum=user.UserIxnState" json:"ixn_state,omitempty"`
	// 互动时间类型, 二选一
	IxnEvent UserIxnEvent `protobuf:"varint,3,opt,name=ixn_event,json=ixnEvent,proto3,enum=user.UserIxnEvent" json:"ixn_event,omitempty"`
	// 类型
	ExtTypes      []PostExtType `protobuf:"varint,4,rep,packed,name=ext_types,json=extTypes,proto3,enum=post.PostExtType" json:"ext_types,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostQueryByUserReq) Reset() {
	*x = PostQueryByUserReq{}
	mi := &file_base_service_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostQueryByUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostQueryByUserReq) ProtoMessage() {}

func (x *PostQueryByUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostQueryByUserReq.ProtoReflect.Descriptor instead.
func (*PostQueryByUserReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{43}
}

func (x *PostQueryByUserReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PostQueryByUserReq) GetIxnState() UserIxnState {
	if x != nil {
		return x.IxnState
	}
	return UserIxnState_USER_IXN_STATE_UNSPECIFIED
}

func (x *PostQueryByUserReq) GetIxnEvent() UserIxnEvent {
	if x != nil {
		return x.IxnEvent
	}
	return UserIxnEvent_USER_IXN_EVENT_UNSPECIFIED
}

func (x *PostQueryByUserReq) GetExtTypes() []PostExtType {
	if x != nil {
		return x.ExtTypes
	}
	return nil
}

type PostQueryByUserRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Posts         []*PostInfo            `protobuf:"bytes,1,rep,name=posts,proto3" json:"posts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostQueryByUserRes) Reset() {
	*x = PostQueryByUserRes{}
	mi := &file_base_service_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostQueryByUserRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostQueryByUserRes) ProtoMessage() {}

func (x *PostQueryByUserRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostQueryByUserRes.ProtoReflect.Descriptor instead.
func (*PostQueryByUserRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{44}
}

func (x *PostQueryByUserRes) GetPosts() []*PostInfo {
	if x != nil {
		return x.Posts
	}
	return nil
}

type PostReactReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PostId        string                 `protobuf:"bytes,1,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty"`
	ReactId       string                 `protobuf:"bytes,2,opt,name=react_id,json=reactId,proto3" json:"react_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostReactReq) Reset() {
	*x = PostReactReq{}
	mi := &file_base_service_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostReactReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostReactReq) ProtoMessage() {}

func (x *PostReactReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostReactReq.ProtoReflect.Descriptor instead.
func (*PostReactReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{45}
}

func (x *PostReactReq) GetPostId() string {
	if x != nil {
		return x.PostId
	}
	return ""
}

func (x *PostReactReq) GetReactId() string {
	if x != nil {
		return x.ReactId
	}
	return ""
}

type PostReactRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PostReactRes) Reset() {
	*x = PostReactRes{}
	mi := &file_base_service_proto_msgTypes[46]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PostReactRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostReactRes) ProtoMessage() {}

func (x *PostReactRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[46]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostReactRes.ProtoReflect.Descriptor instead.
func (*PostReactRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{46}
}

var File_base_service_proto protoreflect.FileDescriptor

var file_base_service_proto_rawDesc = string([]byte{
	0x0a, 0x12, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x09, 0x70, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x36, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0x29, 0x0a, 0x0e, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x57, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x77,
	0x78, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x77, 0x78,
	0x43, 0x6f, 0x64, 0x65, 0x22, 0x4a, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x57, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x22, 0x67, 0x0a, 0x15, 0x46, 0x61, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x57, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x12, 0x35, 0x0a, 0x08, 0x72, 0x65, 0x67,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x61, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x72, 0x65, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x17, 0x0a, 0x07, 0x77, 0x78, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x77, 0x78, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x51, 0x0a, 0x15, 0x46, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x57, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x2f, 0x0a, 0x17,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x19, 0x0a,
	0x17, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x22, 0x40, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x50, 0x65, 0x74, 0x22, 0x40, 0x0a, 0x10, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x12, 0x2c,
	0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x50, 0x65, 0x74, 0x22, 0x27, 0x0a, 0x0c,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x5b, 0x0a, 0x16, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x50, 0x75, 0x74, 0x55, 0x52, 0x4c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x41, 0x0a, 0x16, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50,
	0x75, 0x74, 0x55, 0x52, 0x4c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x12, 0x27, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x22, 0x3a, 0x0a, 0x12, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x12, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x08, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x65, 0x73, 0x22, 0x12, 0x0a, 0x10, 0x50,
	0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x22,
	0x44, 0x0a, 0x10, 0x50, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x70, 0x65, 0x74, 0x5f, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x2e, 0x50, 0x65,
	0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x70, 0x65, 0x74,
	0x4d, 0x61, 0x72, 0x6b, 0x73, 0x22, 0x42, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x42, 0x0a, 0x10, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x12, 0x2e, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x42, 0x0a,
	0x10, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x22, 0x42, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x31, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x12, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x69, 0x0a, 0x1e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x28,
	0x0a, 0x05, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x52, 0x05, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x73, 0x22, 0x52, 0x0a, 0x1e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x08, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0xc8, 0x01, 0x0a, 0x15,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2f,
	0x0a, 0x09, 0x69, 0x78, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x78, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x69, 0x78, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x2f, 0x0a, 0x09, 0x69, 0x78, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x78,
	0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x69, 0x78, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x34, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x78, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x65, 0x78,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x49, 0x0a, 0x15, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12,
	0x30, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x73, 0x22, 0x3a, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x4b, 0x0a,
	0x19, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x2e, 0x0a, 0x0d, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x3f, 0x0a, 0x0d, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0xe4, 0x01, 0x0a, 0x0a,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x78, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x2f, 0x0a, 0x09, 0x69, 0x6e, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x78, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x78, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x10, 0x69, 0x6e, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0e, 0x69, 0x6e, 0x78, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2f, 0x0a, 0x09, 0x69, 0x6e, 0x78, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x78, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x69, 0x6e, 0x78, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x22, 0x0c, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x78, 0x52, 0x65, 0x73,
	0x22, 0x33, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x70, 0x6f, 0x73, 0x74, 0x22, 0x33, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x22, 0x33, 0x0a, 0x0d, 0x50, 0x6f,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x04, 0x70,
	0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f, 0x73, 0x74,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x22,
	0x33, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x12, 0x22, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x6f, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04,
	0x70, 0x6f, 0x73, 0x74, 0x22, 0x47, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x22, 0x0f, 0x0a,
	0x0d, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x64,
	0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x6f,
	0x73, 0x74, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74, 0x4c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x22, 0x60, 0x0a, 0x0c, 0x50, 0x6f, 0x73,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x0c, 0x50,
	0x6f, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x70,
	0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f, 0x73,
	0x74, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x70, 0x6f, 0x73, 0x74,
	0x73, 0x22, 0xbf, 0x01, 0x0a, 0x12, 0x50, 0x6f, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x2f, 0x0a, 0x09, 0x69, 0x78, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x78, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x69, 0x78, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x69, 0x78, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x78, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x69, 0x78, 0x6e, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x09, 0x65, 0x78, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x45, 0x78, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x65, 0x78, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x22, 0x3a, 0x0a, 0x12, 0x50, 0x6f, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x70, 0x6f, 0x73,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x2e,
	0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x22,
	0x42, 0x0a, 0x0c, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x61, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x22, 0x0e, 0x0a, 0x0c, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x32, 0xe4, 0x13, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x14, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x28, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x73,
	0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x88, 0x01,
	0x0a, 0x13, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x75, 0x74, 0x55, 0x52, 0x4c, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x47, 0x65, 0x74, 0x12, 0x27, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x75, 0x74,
	0x55, 0x52, 0x4c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x27,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x75, 0x74, 0x55, 0x52, 0x4c, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12,
	0x17, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2f, 0x70, 0x75, 0x74, 0x5f, 0x75,
	0x72, 0x6c, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x76, 0x0a, 0x0f, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x47, 0x65, 0x74, 0x12, 0x23, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x23, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x79, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x6d, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x57, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12,
	0x1f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x57, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x1f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x57, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65,
	0x73, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x22, 0x11, 0x2f, 0x76,
	0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2f, 0x77, 0x78, 0x12,
	0x85, 0x01, 0x0a, 0x12, 0x46, 0x61, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x57, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x26, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x57, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x26,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x61, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x57, 0x65, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01,
	0x2a, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x66, 0x61, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x67, 0x2f, 0x77, 0x78, 0x12, 0x6e, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x17,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x3a, 0x01, 0x2a, 0x1a, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x75,
	0x73, 0x65, 0x72, 0x2f, 0x70, 0x65, 0x74, 0x12, 0x5f, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x65, 0x47, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x76, 0x31, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x2f, 0x70, 0x65, 0x74, 0x12, 0x5c, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x78, 0x12, 0x1b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x78, 0x52, 0x65, 0x71,
	0x1a, 0x1b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x78, 0x52, 0x65, 0x73, 0x22, 0x17, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x11, 0x3a, 0x01, 0x2a, 0x22, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2f, 0x69, 0x6e, 0x78, 0x12, 0x71, 0x0a, 0x11, 0x50, 0x65, 0x74, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65,
	0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x21,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x70,
	0x65, 0x74, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x6d, 0x0a, 0x0d, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x3a, 0x01, 0x2a, 0x22, 0x0b, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x6d, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22,
	0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x3a, 0x01, 0x2a, 0x1a, 0x0b, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x6a, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x13,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x2a, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x61, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x65,
	0x74, 0x12, 0x1e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x1e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x87, 0x01, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x26, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x22, 0x21, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72,
	0x12, 0xac, 0x01, 0x0a, 0x1b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x42, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x2f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42,
	0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x71, 0x1a, 0x2f, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x42, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x12, 0x23, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x62, 0x79,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12,
	0x5d, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x12, 0x1c, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x22, 0x15, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12,
	0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x61,
	0x0a, 0x09, 0x50, 0x6f, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1d, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x10, 0x12, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x7b, 0x0a, 0x0f, 0x50, 0x6f, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x22, 0x1e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x12, 0x16, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x73, 0x74,
	0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x62, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x12, 0x61,
	0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x13, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0d, 0x3a, 0x01, 0x2a, 0x22, 0x08, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x73,
	0x74, 0x12, 0x61, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x1e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x1e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22,
	0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x3a, 0x01, 0x2a, 0x1a, 0x08, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x6f, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x1e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x22, 0x10, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x2a, 0x08, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x6f, 0x73, 0x74, 0x12, 0x64, 0x0a, 0x09, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x61, 0x63,
	0x74, 0x12, 0x1d, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x1d, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x22,
	0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x3a, 0x01, 0x2a, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x6f, 0x73, 0x74, 0x2f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x4f, 0x47, 0x54, 0x54, 0x2f, 0x64,
	0x6d, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x62, 0x61, 0x73, 0x65, 0x3b, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
})

var (
	file_base_service_proto_rawDescOnce sync.Once
	file_base_service_proto_rawDescData []byte
)

func file_base_service_proto_rawDescGZIP() []byte {
	file_base_service_proto_rawDescOnce.Do(func() {
		file_base_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_base_service_proto_rawDesc), len(file_base_service_proto_rawDesc)))
	})
	return file_base_service_proto_rawDescData
}

var file_base_service_proto_msgTypes = make([]protoimpl.MessageInfo, 47)
var file_base_service_proto_goTypes = []any{
	(*ErrorMessage)(nil),                   // 0: base_service.v1.ErrorMessage
	(*LoginWeChatReq)(nil),                 // 1: base_service.v1.LoginWeChatReq
	(*LoginWeChatRes)(nil),                 // 2: base_service.v1.LoginWeChatRes
	(*FastRegisterWeChatReq)(nil),          // 3: base_service.v1.FastRegisterWeChatReq
	(*FastRegisterWeChatRes)(nil),          // 4: base_service.v1.FastRegisterWeChatRes
	(*LocationCommonSearchReq)(nil),        // 5: base_service.v1.LocationCommonSearchReq
	(*LocationCommonSearchRes)(nil),        // 6: base_service.v1.LocationCommonSearchRes
	(*UserPetUpdateReq)(nil),               // 7: base_service.v1.UserPetUpdateReq
	(*UserPetUpdateRes)(nil),               // 8: base_service.v1.UserPetUpdateRes
	(*UserPeGetReq)(nil),                   // 9: base_service.v1.UserPeGetReq
	(*UserPeGetRes)(nil),                   // 10: base_service.v1.UserPeGetRes
	(*MediaPutURLBatchGetReq)(nil),         // 11: base_service.v1.MediaPutURLBatchGetReq
	(*MediaPutURLBatchGetRes)(nil),         // 12: base_service.v1.MediaPutURLBatchGetRes
	(*SystemNotifyGetReq)(nil),             // 13: base_service.v1.SystemNotifyGetReq
	(*SystemNotifyGetRes)(nil),             // 14: base_service.v1.SystemNotifyGetRes
	(*PetMarkerInfoReq)(nil),               // 15: base_service.v1.PetMarkerInfoReq
	(*PetMarkerInfoRes)(nil),               // 16: base_service.v1.PetMarkerInfoRes
	(*ChannelCreateReq)(nil),               // 17: base_service.v1.ChannelCreateReq
	(*ChannelCreateRes)(nil),               // 18: base_service.v1.ChannelCreateRes
	(*ChannelUpdateReq)(nil),               // 19: base_service.v1.ChannelUpdateReq
	(*ChannelUpdateRes)(nil),               // 20: base_service.v1.ChannelUpdateRes
	(*ChannelDeleteReq)(nil),               // 21: base_service.v1.ChannelDeleteReq
	(*ChannelDeleteRes)(nil),               // 22: base_service.v1.ChannelDeleteRes
	(*ChannelQueryByLocationBoundReq)(nil), // 23: base_service.v1.ChannelQueryByLocationBoundReq
	(*ChannelQueryByLocationBoundRes)(nil), // 24: base_service.v1.ChannelQueryByLocationBoundRes
	(*ChannelQueryByUserReq)(nil),          // 25: base_service.v1.ChannelQueryByUserReq
	(*ChannelQueryByUserRes)(nil),          // 26: base_service.v1.ChannelQueryByUserRes
	(*ChannelDetailQueryByIdReq)(nil),      // 27: base_service.v1.ChannelDetailQueryByIdReq
	(*ChannelDetailQueryByIdRes)(nil),      // 28: base_service.v1.ChannelDetailQueryByIdRes
	(*ChannelGetReq)(nil),                  // 29: base_service.v1.ChannelGetReq
	(*ChannelGetRes)(nil),                  // 30: base_service.v1.ChannelGetRes
	(*UserInxReq)(nil),                     // 31: base_service.v1.UserInxReq
	(*UserInxRes)(nil),                     // 32: base_service.v1.UserInxRes
	(*PostCreateReq)(nil),                  // 33: base_service.v1.PostCreateReq
	(*PostCreateRes)(nil),                  // 34: base_service.v1.PostCreateRes
	(*PostUpdateReq)(nil),                  // 35: base_service.v1.PostUpdateReq
	(*PostUpdateRes)(nil),                  // 36: base_service.v1.PostUpdateRes
	(*PostDeleteReq)(nil),                  // 37: base_service.v1.PostDeleteReq
	(*PostDeleteRes)(nil),                  // 38: base_service.v1.PostDeleteRes
	(*PostLoadReq)(nil),                    // 39: base_service.v1.PostLoadReq
	(*PostLoadRes)(nil),                    // 40: base_service.v1.PostLoadRes
	(*PostQueryReq)(nil),                   // 41: base_service.v1.PostQueryReq
	(*PostQueryRes)(nil),                   // 42: base_service.v1.PostQueryRes
	(*PostQueryByUserReq)(nil),             // 43: base_service.v1.PostQueryByUserReq
	(*PostQueryByUserRes)(nil),             // 44: base_service.v1.PostQueryByUserRes
	(*PostReactReq)(nil),                   // 45: base_service.v1.PostReactReq
	(*PostReactRes)(nil),                   // 46: base_service.v1.PostReactRes
	(*UserInfo)(nil),                       // 47: user.UserInfo
	(*UserFastRegisterData)(nil),           // 48: user.UserFastRegisterData
	(*UserPetInfo)(nil),                    // 49: user.UserPetInfo
	(MediaBucket)(0),                       // 50: common.MediaBucket
	(*MediaInfo)(nil),                      // 51: common.MediaInfo
	(*NotifyInfo)(nil),                     // 52: system.NotifyInfo
	(*PetMarkerInfo)(nil),                  // 53: post.PetMarkerInfo
	(*ChannelInfo)(nil),                    // 54: channel.ChannelInfo
	(*BoundCoord)(nil),                     // 55: common.BoundCoord
	(UserIxnState)(0),                      // 56: user.UserIxnState
	(UserIxnEvent)(0),                      // 57: user.UserIxnEvent
	(ChannelExtType)(0),                    // 58: channel.ChannelExtType
	(ActionType)(0),                        // 59: common.ActionType
	(*PostInfo)(nil),                       // 60: post.PostInfo
	(PostExtType)(0),                       // 61: post.PostExtType
}
var file_base_service_proto_depIdxs = []int32{
	47, // 0: base_service.v1.LoginWeChatRes.user:type_name -> user.UserInfo
	48, // 1: base_service.v1.FastRegisterWeChatReq.reg_data:type_name -> user.UserFastRegisterData
	47, // 2: base_service.v1.FastRegisterWeChatRes.user:type_name -> user.UserInfo
	49, // 3: base_service.v1.UserPetUpdateReq.user_pet:type_name -> user.UserPetInfo
	49, // 4: base_service.v1.UserPetUpdateRes.user_pet:type_name -> user.UserPetInfo
	47, // 5: base_service.v1.UserPeGetRes.user:type_name -> user.UserInfo
	50, // 6: base_service.v1.MediaPutURLBatchGetReq.bucket:type_name -> common.MediaBucket
	51, // 7: base_service.v1.MediaPutURLBatchGetRes.media:type_name -> common.MediaInfo
	52, // 8: base_service.v1.SystemNotifyGetRes.notifies:type_name -> system.NotifyInfo
	53, // 9: base_service.v1.PetMarkerInfoRes.pet_marks:type_name -> post.PetMarkerInfo
	54, // 10: base_service.v1.ChannelCreateReq.channel:type_name -> channel.ChannelInfo
	54, // 11: base_service.v1.ChannelCreateRes.channel:type_name -> channel.ChannelInfo
	54, // 12: base_service.v1.ChannelUpdateReq.channel:type_name -> channel.ChannelInfo
	54, // 13: base_service.v1.ChannelUpdateRes.channel:type_name -> channel.ChannelInfo
	55, // 14: base_service.v1.ChannelQueryByLocationBoundReq.bound:type_name -> common.BoundCoord
	54, // 15: base_service.v1.ChannelQueryByLocationBoundRes.channels:type_name -> channel.ChannelInfo
	56, // 16: base_service.v1.ChannelQueryByUserReq.ixn_state:type_name -> user.UserIxnState
	57, // 17: base_service.v1.ChannelQueryByUserReq.ixn_event:type_name -> user.UserIxnEvent
	58, // 18: base_service.v1.ChannelQueryByUserReq.ext_types:type_name -> channel.ChannelExtType
	54, // 19: base_service.v1.ChannelQueryByUserRes.channels:type_name -> channel.ChannelInfo
	54, // 20: base_service.v1.ChannelDetailQueryByIdRes.channel:type_name -> channel.ChannelInfo
	54, // 21: base_service.v1.ChannelGetRes.channel:type_name -> channel.ChannelInfo
	56, // 22: base_service.v1.UserInxReq.inx_state:type_name -> user.UserIxnState
	59, // 23: base_service.v1.UserInxReq.inx_state_action:type_name -> common.ActionType
	57, // 24: base_service.v1.UserInxReq.inx_event:type_name -> user.UserIxnEvent
	60, // 25: base_service.v1.PostCreateReq.post:type_name -> post.PostInfo
	60, // 26: base_service.v1.PostCreateRes.post:type_name -> post.PostInfo
	60, // 27: base_service.v1.PostUpdateReq.post:type_name -> post.PostInfo
	60, // 28: base_service.v1.PostUpdateRes.post:type_name -> post.PostInfo
	60, // 29: base_service.v1.PostLoadRes.posts:type_name -> post.PostInfo
	60, // 30: base_service.v1.PostQueryRes.posts:type_name -> post.PostInfo
	56, // 31: base_service.v1.PostQueryByUserReq.ixn_state:type_name -> user.UserIxnState
	57, // 32: base_service.v1.PostQueryByUserReq.ixn_event:type_name -> user.UserIxnEvent
	61, // 33: base_service.v1.PostQueryByUserReq.ext_types:type_name -> post.PostExtType
	60, // 34: base_service.v1.PostQueryByUserRes.posts:type_name -> post.PostInfo
	5,  // 35: base_service.v1.BaseService.LocationCommonSearch:input_type -> base_service.v1.LocationCommonSearchReq
	11, // 36: base_service.v1.BaseService.MediaPutURLBatchGet:input_type -> base_service.v1.MediaPutURLBatchGetReq
	13, // 37: base_service.v1.BaseService.SystemNotifyGet:input_type -> base_service.v1.SystemNotifyGetReq
	1,  // 38: base_service.v1.BaseService.LoginWeChat:input_type -> base_service.v1.LoginWeChatReq
	3,  // 39: base_service.v1.BaseService.FastRegisterWeChat:input_type -> base_service.v1.FastRegisterWeChatReq
	7,  // 40: base_service.v1.BaseService.UserPetUpdate:input_type -> base_service.v1.UserPetUpdateReq
	9,  // 41: base_service.v1.BaseService.UserPeGet:input_type -> base_service.v1.UserPeGetReq
	31, // 42: base_service.v1.BaseService.UserInx:input_type -> base_service.v1.UserInxReq
	15, // 43: base_service.v1.BaseService.PetMarkerInfoList:input_type -> base_service.v1.PetMarkerInfoReq
	17, // 44: base_service.v1.BaseService.ChannelCreate:input_type -> base_service.v1.ChannelCreateReq
	19, // 45: base_service.v1.BaseService.ChannelUpdate:input_type -> base_service.v1.ChannelUpdateReq
	21, // 46: base_service.v1.BaseService.ChannelDelete:input_type -> base_service.v1.ChannelDeleteReq
	29, // 47: base_service.v1.BaseService.ChannelGet:input_type -> base_service.v1.ChannelGetReq
	25, // 48: base_service.v1.BaseService.ChannelQueryByUser:input_type -> base_service.v1.ChannelQueryByUserReq
	23, // 49: base_service.v1.BaseService.ChannelQueryByLocationBound:input_type -> base_service.v1.ChannelQueryByLocationBoundReq
	39, // 50: base_service.v1.BaseService.PostLoad:input_type -> base_service.v1.PostLoadReq
	41, // 51: base_service.v1.BaseService.PostQuery:input_type -> base_service.v1.PostQueryReq
	43, // 52: base_service.v1.BaseService.PostQueryByUser:input_type -> base_service.v1.PostQueryByUserReq
	33, // 53: base_service.v1.BaseService.PostCreate:input_type -> base_service.v1.PostCreateReq
	35, // 54: base_service.v1.BaseService.PostUpdate:input_type -> base_service.v1.PostUpdateReq
	37, // 55: base_service.v1.BaseService.PostDelete:input_type -> base_service.v1.PostDeleteReq
	45, // 56: base_service.v1.BaseService.PostReact:input_type -> base_service.v1.PostReactReq
	6,  // 57: base_service.v1.BaseService.LocationCommonSearch:output_type -> base_service.v1.LocationCommonSearchRes
	12, // 58: base_service.v1.BaseService.MediaPutURLBatchGet:output_type -> base_service.v1.MediaPutURLBatchGetRes
	14, // 59: base_service.v1.BaseService.SystemNotifyGet:output_type -> base_service.v1.SystemNotifyGetRes
	2,  // 60: base_service.v1.BaseService.LoginWeChat:output_type -> base_service.v1.LoginWeChatRes
	4,  // 61: base_service.v1.BaseService.FastRegisterWeChat:output_type -> base_service.v1.FastRegisterWeChatRes
	8,  // 62: base_service.v1.BaseService.UserPetUpdate:output_type -> base_service.v1.UserPetUpdateRes
	10, // 63: base_service.v1.BaseService.UserPeGet:output_type -> base_service.v1.UserPeGetRes
	32, // 64: base_service.v1.BaseService.UserInx:output_type -> base_service.v1.UserInxRes
	16, // 65: base_service.v1.BaseService.PetMarkerInfoList:output_type -> base_service.v1.PetMarkerInfoRes
	18, // 66: base_service.v1.BaseService.ChannelCreate:output_type -> base_service.v1.ChannelCreateRes
	20, // 67: base_service.v1.BaseService.ChannelUpdate:output_type -> base_service.v1.ChannelUpdateRes
	22, // 68: base_service.v1.BaseService.ChannelDelete:output_type -> base_service.v1.ChannelDeleteRes
	30, // 69: base_service.v1.BaseService.ChannelGet:output_type -> base_service.v1.ChannelGetRes
	26, // 70: base_service.v1.BaseService.ChannelQueryByUser:output_type -> base_service.v1.ChannelQueryByUserRes
	24, // 71: base_service.v1.BaseService.ChannelQueryByLocationBound:output_type -> base_service.v1.ChannelQueryByLocationBoundRes
	40, // 72: base_service.v1.BaseService.PostLoad:output_type -> base_service.v1.PostLoadRes
	42, // 73: base_service.v1.BaseService.PostQuery:output_type -> base_service.v1.PostQueryRes
	44, // 74: base_service.v1.BaseService.PostQueryByUser:output_type -> base_service.v1.PostQueryByUserRes
	34, // 75: base_service.v1.BaseService.PostCreate:output_type -> base_service.v1.PostCreateRes
	36, // 76: base_service.v1.BaseService.PostUpdate:output_type -> base_service.v1.PostUpdateRes
	38, // 77: base_service.v1.BaseService.PostDelete:output_type -> base_service.v1.PostDeleteRes
	46, // 78: base_service.v1.BaseService.PostReact:output_type -> base_service.v1.PostReactRes
	57, // [57:79] is the sub-list for method output_type
	35, // [35:57] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_base_service_proto_init() }
func file_base_service_proto_init() {
	if File_base_service_proto != nil {
		return
	}
	file_common_proto_init()
	file_pet_proto_init()
	file_user_proto_init()
	file_channel_proto_init()
	file_post_proto_init()
	file_system_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_base_service_proto_rawDesc), len(file_base_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   47,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_base_service_proto_goTypes,
		DependencyIndexes: file_base_service_proto_depIdxs,
		MessageInfos:      file_base_service_proto_msgTypes,
	}.Build()
	File_base_service_proto = out.File
	file_base_service_proto_goTypes = nil
	file_base_service_proto_depIdxs = nil
}
