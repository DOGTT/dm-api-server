// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.14.0
// source: base-service.proto

package api

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 通用错误消息结构
type ErrorMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Desc          string                 `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ErrorMessage) Reset() {
	*x = ErrorMessage{}
	mi := &file_base_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ErrorMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorMessage) ProtoMessage() {}

func (x *ErrorMessage) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorMessage.ProtoReflect.Descriptor instead.
func (*ErrorMessage) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{0}
}

func (x *ErrorMessage) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ErrorMessage) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

// 登录请求
type LoginWeChatReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	WxCode        string                 `protobuf:"bytes,1,opt,name=wx_code,json=wxCode,proto3" json:"wx_code,omitempty"` // 微信小程序登录时获取临时登录凭证code
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoginWeChatReq) Reset() {
	*x = LoginWeChatReq{}
	mi := &file_base_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginWeChatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginWeChatReq) ProtoMessage() {}

func (x *LoginWeChatReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginWeChatReq.ProtoReflect.Descriptor instead.
func (*LoginWeChatReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{1}
}

func (x *LoginWeChatReq) GetWxCode() string {
	if x != nil {
		return x.WxCode
	}
	return ""
}

type LoginWeChatRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	User          *UserInfo              `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoginWeChatRes) Reset() {
	*x = LoginWeChatRes{}
	mi := &file_base_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginWeChatRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginWeChatRes) ProtoMessage() {}

func (x *LoginWeChatRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginWeChatRes.ProtoReflect.Descriptor instead.
func (*LoginWeChatRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{2}
}

func (x *LoginWeChatRes) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *LoginWeChatRes) GetUser() *UserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

// 快速注册请求
type FastRegisterWeChatReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RegData       *FastRegisterData      `protobuf:"bytes,1,opt,name=reg_data,json=regData,proto3" json:"reg_data,omitempty"`
	WxCode        string                 `protobuf:"bytes,2,opt,name=wx_code,json=wxCode,proto3" json:"wx_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FastRegisterWeChatReq) Reset() {
	*x = FastRegisterWeChatReq{}
	mi := &file_base_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FastRegisterWeChatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastRegisterWeChatReq) ProtoMessage() {}

func (x *FastRegisterWeChatReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastRegisterWeChatReq.ProtoReflect.Descriptor instead.
func (*FastRegisterWeChatReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{3}
}

func (x *FastRegisterWeChatReq) GetRegData() *FastRegisterData {
	if x != nil {
		return x.RegData
	}
	return nil
}

func (x *FastRegisterWeChatReq) GetWxCode() string {
	if x != nil {
		return x.WxCode
	}
	return ""
}

type FastRegisterWeChatRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	User          *UserInfo              `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FastRegisterWeChatRes) Reset() {
	*x = FastRegisterWeChatRes{}
	mi := &file_base_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FastRegisterWeChatRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FastRegisterWeChatRes) ProtoMessage() {}

func (x *FastRegisterWeChatRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FastRegisterWeChatRes.ProtoReflect.Descriptor instead.
func (*FastRegisterWeChatRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{4}
}

func (x *FastRegisterWeChatRes) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *FastRegisterWeChatRes) GetUser() *UserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

// 通用地点搜索请求
type LocationCommonSearchReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Input         string                 `protobuf:"bytes,1,opt,name=input,proto3" json:"input,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocationCommonSearchReq) Reset() {
	*x = LocationCommonSearchReq{}
	mi := &file_base_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocationCommonSearchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationCommonSearchReq) ProtoMessage() {}

func (x *LocationCommonSearchReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationCommonSearchReq.ProtoReflect.Descriptor instead.
func (*LocationCommonSearchReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{5}
}

func (x *LocationCommonSearchReq) GetInput() string {
	if x != nil {
		return x.Input
	}
	return ""
}

type LocationCommonSearchRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LocationCommonSearchRes) Reset() {
	*x = LocationCommonSearchRes{}
	mi := &file_base_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LocationCommonSearchRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationCommonSearchRes) ProtoMessage() {}

func (x *LocationCommonSearchRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationCommonSearchRes.ProtoReflect.Descriptor instead.
func (*LocationCommonSearchRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{6}
}

type UserPetUpdateReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserPet       *UserPetInfo           `protobuf:"bytes,1,opt,name=user_pet,json=userPet,proto3" json:"user_pet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserPetUpdateReq) Reset() {
	*x = UserPetUpdateReq{}
	mi := &file_base_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserPetUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPetUpdateReq) ProtoMessage() {}

func (x *UserPetUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPetUpdateReq.ProtoReflect.Descriptor instead.
func (*UserPetUpdateReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{7}
}

func (x *UserPetUpdateReq) GetUserPet() *UserPetInfo {
	if x != nil {
		return x.UserPet
	}
	return nil
}

type UserPetUpdateRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserPet       *UserPetInfo           `protobuf:"bytes,1,opt,name=user_pet,json=userPet,proto3" json:"user_pet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserPetUpdateRes) Reset() {
	*x = UserPetUpdateRes{}
	mi := &file_base_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserPetUpdateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPetUpdateRes) ProtoMessage() {}

func (x *UserPetUpdateRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPetUpdateRes.ProtoReflect.Descriptor instead.
func (*UserPetUpdateRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{8}
}

func (x *UserPetUpdateRes) GetUserPet() *UserPetInfo {
	if x != nil {
		return x.UserPet
	}
	return nil
}

type UserPeGetReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserPeGetReq) Reset() {
	*x = UserPeGetReq{}
	mi := &file_base_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserPeGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPeGetReq) ProtoMessage() {}

func (x *UserPeGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPeGetReq.ProtoReflect.Descriptor instead.
func (*UserPeGetReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{9}
}

func (x *UserPeGetReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type UserPeGetRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *UserInfo              `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserPeGetRes) Reset() {
	*x = UserPeGetRes{}
	mi := &file_base_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserPeGetRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserPeGetRes) ProtoMessage() {}

func (x *UserPeGetRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserPeGetRes.ProtoReflect.Descriptor instead.
func (*UserPeGetRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{10}
}

func (x *UserPeGetRes) GetUser() *UserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

// 批量获取对象上传预签名URL请求
type MediaPutURLBatchGetReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MediaType     MediaType              `protobuf:"varint,1,opt,name=media_type,json=mediaType,proto3,enum=common.MediaType" json:"media_type,omitempty"`
	Count         int32                  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MediaPutURLBatchGetReq) Reset() {
	*x = MediaPutURLBatchGetReq{}
	mi := &file_base_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MediaPutURLBatchGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaPutURLBatchGetReq) ProtoMessage() {}

func (x *MediaPutURLBatchGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaPutURLBatchGetReq.ProtoReflect.Descriptor instead.
func (*MediaPutURLBatchGetReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{11}
}

func (x *MediaPutURLBatchGetReq) GetMediaType() MediaType {
	if x != nil {
		return x.MediaType
	}
	return MediaType_MT_DEFAULT
}

func (x *MediaPutURLBatchGetReq) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type MediaPutURLBatchGetRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Media         []*MediaInfo           `protobuf:"bytes,1,rep,name=media,proto3" json:"media,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MediaPutURLBatchGetRes) Reset() {
	*x = MediaPutURLBatchGetRes{}
	mi := &file_base_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MediaPutURLBatchGetRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaPutURLBatchGetRes) ProtoMessage() {}

func (x *MediaPutURLBatchGetRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaPutURLBatchGetRes.ProtoReflect.Descriptor instead.
func (*MediaPutURLBatchGetRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{12}
}

func (x *MediaPutURLBatchGetRes) GetMedia() []*MediaInfo {
	if x != nil {
		return x.Media
	}
	return nil
}

type ChannelTypeListReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelTypeListReq) Reset() {
	*x = ChannelTypeListReq{}
	mi := &file_base_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelTypeListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelTypeListReq) ProtoMessage() {}

func (x *ChannelTypeListReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelTypeListReq.ProtoReflect.Descriptor instead.
func (*ChannelTypeListReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{13}
}

type ChannelTypeListRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChannelTypes  []*ChannelTypeInfo     `protobuf:"bytes,1,rep,name=channel_types,json=channelTypes,proto3" json:"channel_types,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelTypeListRes) Reset() {
	*x = ChannelTypeListRes{}
	mi := &file_base_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelTypeListRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelTypeListRes) ProtoMessage() {}

func (x *ChannelTypeListRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelTypeListRes.ProtoReflect.Descriptor instead.
func (*ChannelTypeListRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{14}
}

func (x *ChannelTypeListRes) GetChannelTypes() []*ChannelTypeInfo {
	if x != nil {
		return x.ChannelTypes
	}
	return nil
}

// 足迹创建
type ChannelCreateReq struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Channel *ChannelInfo           `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	// 创建时候可以携带第一条帖子
	Post          *PostInfo `protobuf:"bytes,2,opt,name=post,proto3" json:"post,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelCreateReq) Reset() {
	*x = ChannelCreateReq{}
	mi := &file_base_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelCreateReq) ProtoMessage() {}

func (x *ChannelCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelCreateReq.ProtoReflect.Descriptor instead.
func (*ChannelCreateReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{15}
}

func (x *ChannelCreateReq) GetChannel() *ChannelInfo {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *ChannelCreateReq) GetPost() *PostInfo {
	if x != nil {
		return x.Post
	}
	return nil
}

type ChannelCreateRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Channel       *ChannelInfo           `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelCreateRes) Reset() {
	*x = ChannelCreateRes{}
	mi := &file_base_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelCreateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelCreateRes) ProtoMessage() {}

func (x *ChannelCreateRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelCreateRes.ProtoReflect.Descriptor instead.
func (*ChannelCreateRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{16}
}

func (x *ChannelCreateRes) GetChannel() *ChannelInfo {
	if x != nil {
		return x.Channel
	}
	return nil
}

// 足迹更新
type ChannelUpdateReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Channel       *ChannelInfo           `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelUpdateReq) Reset() {
	*x = ChannelUpdateReq{}
	mi := &file_base_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelUpdateReq) ProtoMessage() {}

func (x *ChannelUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelUpdateReq.ProtoReflect.Descriptor instead.
func (*ChannelUpdateReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{17}
}

func (x *ChannelUpdateReq) GetChannel() *ChannelInfo {
	if x != nil {
		return x.Channel
	}
	return nil
}

type ChannelUpdateRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Channel       *ChannelInfo           `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelUpdateRes) Reset() {
	*x = ChannelUpdateRes{}
	mi := &file_base_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelUpdateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelUpdateRes) ProtoMessage() {}

func (x *ChannelUpdateRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelUpdateRes.ProtoReflect.Descriptor instead.
func (*ChannelUpdateRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{18}
}

func (x *ChannelUpdateRes) GetChannel() *ChannelInfo {
	if x != nil {
		return x.Channel
	}
	return nil
}

// 足迹删除
type ChannelDeleteReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChanId        string                 `protobuf:"bytes,1,opt,name=chan_id,json=chanId,proto3" json:"chan_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelDeleteReq) Reset() {
	*x = ChannelDeleteReq{}
	mi := &file_base_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelDeleteReq) ProtoMessage() {}

func (x *ChannelDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelDeleteReq.ProtoReflect.Descriptor instead.
func (*ChannelDeleteReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{19}
}

func (x *ChannelDeleteReq) GetChanId() string {
	if x != nil {
		return x.ChanId
	}
	return ""
}

type ChannelDeleteRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelDeleteRes) Reset() {
	*x = ChannelDeleteRes{}
	mi := &file_base_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelDeleteRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelDeleteRes) ProtoMessage() {}

func (x *ChannelDeleteRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelDeleteRes.ProtoReflect.Descriptor instead.
func (*ChannelDeleteRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{20}
}

type ChannelBaseQueryByBoundReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 足迹类型id列表
	TypeIds []int32 `protobuf:"varint,1,rep,packed,name=type_ids,json=typeIds,proto3" json:"type_ids,omitempty"`
	// 坐标范围
	Bound         *BoundCoord `protobuf:"bytes,2,opt,name=bound,proto3" json:"bound,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelBaseQueryByBoundReq) Reset() {
	*x = ChannelBaseQueryByBoundReq{}
	mi := &file_base_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelBaseQueryByBoundReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelBaseQueryByBoundReq) ProtoMessage() {}

func (x *ChannelBaseQueryByBoundReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelBaseQueryByBoundReq.ProtoReflect.Descriptor instead.
func (*ChannelBaseQueryByBoundReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{21}
}

func (x *ChannelBaseQueryByBoundReq) GetTypeIds() []int32 {
	if x != nil {
		return x.TypeIds
	}
	return nil
}

func (x *ChannelBaseQueryByBoundReq) GetBound() *BoundCoord {
	if x != nil {
		return x.Bound
	}
	return nil
}

type ChannelBaseQueryByBoundRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Channels      []*ChannelInfo         `protobuf:"bytes,1,rep,name=channels,proto3" json:"channels,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelBaseQueryByBoundRes) Reset() {
	*x = ChannelBaseQueryByBoundRes{}
	mi := &file_base_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelBaseQueryByBoundRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelBaseQueryByBoundRes) ProtoMessage() {}

func (x *ChannelBaseQueryByBoundRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelBaseQueryByBoundRes.ProtoReflect.Descriptor instead.
func (*ChannelBaseQueryByBoundRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{22}
}

func (x *ChannelBaseQueryByBoundRes) GetChannels() []*ChannelInfo {
	if x != nil {
		return x.Channels
	}
	return nil
}

type ChannelDetailQueryByIdReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChanId        string                 `protobuf:"bytes,1,opt,name=chan_id,json=chanId,proto3" json:"chan_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelDetailQueryByIdReq) Reset() {
	*x = ChannelDetailQueryByIdReq{}
	mi := &file_base_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelDetailQueryByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelDetailQueryByIdReq) ProtoMessage() {}

func (x *ChannelDetailQueryByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelDetailQueryByIdReq.ProtoReflect.Descriptor instead.
func (*ChannelDetailQueryByIdReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{23}
}

func (x *ChannelDetailQueryByIdReq) GetChanId() string {
	if x != nil {
		return x.ChanId
	}
	return ""
}

type ChannelDetailQueryByIdRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Channel       *ChannelInfo           `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelDetailQueryByIdRes) Reset() {
	*x = ChannelDetailQueryByIdRes{}
	mi := &file_base_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelDetailQueryByIdRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelDetailQueryByIdRes) ProtoMessage() {}

func (x *ChannelDetailQueryByIdRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelDetailQueryByIdRes.ProtoReflect.Descriptor instead.
func (*ChannelDetailQueryByIdRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{24}
}

func (x *ChannelDetailQueryByIdRes) GetChannel() *ChannelInfo {
	if x != nil {
		return x.Channel
	}
	return nil
}

type ChannelFullQueryByIdReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChanId        string                 `protobuf:"bytes,1,opt,name=chan_id,json=chanId,proto3" json:"chan_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelFullQueryByIdReq) Reset() {
	*x = ChannelFullQueryByIdReq{}
	mi := &file_base_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelFullQueryByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelFullQueryByIdReq) ProtoMessage() {}

func (x *ChannelFullQueryByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelFullQueryByIdReq.ProtoReflect.Descriptor instead.
func (*ChannelFullQueryByIdReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{25}
}

func (x *ChannelFullQueryByIdReq) GetChanId() string {
	if x != nil {
		return x.ChanId
	}
	return ""
}

type ChannelFullQueryByIdRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Channel       *ChannelInfo           `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelFullQueryByIdRes) Reset() {
	*x = ChannelFullQueryByIdRes{}
	mi := &file_base_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelFullQueryByIdRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelFullQueryByIdRes) ProtoMessage() {}

func (x *ChannelFullQueryByIdRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelFullQueryByIdRes.ProtoReflect.Descriptor instead.
func (*ChannelFullQueryByIdRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{26}
}

func (x *ChannelFullQueryByIdRes) GetChannel() *ChannelInfo {
	if x != nil {
		return x.Channel
	}
	return nil
}

type ChannelInxReq struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	ChanId string                 `protobuf:"bytes,1,opt,name=chan_id,json=chanId,proto3" json:"chan_id,omitempty"`
	// 互动状态
	IxnState ChannelIxnState `protobuf:"varint,2,opt,name=ixn_state,json=ixnState,proto3,enum=channel.ChannelIxnState" json:"ixn_state,omitempty"`
	// 是否撤销状态
	StateUndo InxUndoType `protobuf:"varint,3,opt,name=state_undo,json=stateUndo,proto3,enum=common.InxUndoType" json:"state_undo,omitempty"`
	// 互动事件
	IxnEvent      ChannelIxnEvent `protobuf:"varint,4,opt,name=ixn_event,json=ixnEvent,proto3,enum=channel.ChannelIxnEvent" json:"ixn_event,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelInxReq) Reset() {
	*x = ChannelInxReq{}
	mi := &file_base_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelInxReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelInxReq) ProtoMessage() {}

func (x *ChannelInxReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelInxReq.ProtoReflect.Descriptor instead.
func (*ChannelInxReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{27}
}

func (x *ChannelInxReq) GetChanId() string {
	if x != nil {
		return x.ChanId
	}
	return ""
}

func (x *ChannelInxReq) GetIxnState() ChannelIxnState {
	if x != nil {
		return x.IxnState
	}
	return ChannelIxnState_STATE_DEFAULT
}

func (x *ChannelInxReq) GetStateUndo() InxUndoType {
	if x != nil {
		return x.StateUndo
	}
	return InxUndoType_IU_DEFAULT
}

func (x *ChannelInxReq) GetIxnEvent() ChannelIxnEvent {
	if x != nil {
		return x.IxnEvent
	}
	return ChannelIxnEvent_EVENT_DEFAULT
}

type ChannelInxRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelInxRes) Reset() {
	*x = ChannelInxRes{}
	mi := &file_base_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelInxRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelInxRes) ProtoMessage() {}

func (x *ChannelInxRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelInxRes.ProtoReflect.Descriptor instead.
func (*ChannelInxRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{28}
}

type ChannelPostCreateReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Post          *PostInfo              `protobuf:"bytes,1,opt,name=post,proto3" json:"post,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelPostCreateReq) Reset() {
	*x = ChannelPostCreateReq{}
	mi := &file_base_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelPostCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelPostCreateReq) ProtoMessage() {}

func (x *ChannelPostCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelPostCreateReq.ProtoReflect.Descriptor instead.
func (*ChannelPostCreateReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{29}
}

func (x *ChannelPostCreateReq) GetPost() *PostInfo {
	if x != nil {
		return x.Post
	}
	return nil
}

type ChannelPostCreateRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Post          *PostInfo              `protobuf:"bytes,1,opt,name=post,proto3" json:"post,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelPostCreateRes) Reset() {
	*x = ChannelPostCreateRes{}
	mi := &file_base_service_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelPostCreateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelPostCreateRes) ProtoMessage() {}

func (x *ChannelPostCreateRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelPostCreateRes.ProtoReflect.Descriptor instead.
func (*ChannelPostCreateRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{30}
}

func (x *ChannelPostCreateRes) GetPost() *PostInfo {
	if x != nil {
		return x.Post
	}
	return nil
}

type ChannelPostUpdateReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Post          *PostInfo              `protobuf:"bytes,1,opt,name=post,proto3" json:"post,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelPostUpdateReq) Reset() {
	*x = ChannelPostUpdateReq{}
	mi := &file_base_service_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelPostUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelPostUpdateReq) ProtoMessage() {}

func (x *ChannelPostUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelPostUpdateReq.ProtoReflect.Descriptor instead.
func (*ChannelPostUpdateReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{31}
}

func (x *ChannelPostUpdateReq) GetPost() *PostInfo {
	if x != nil {
		return x.Post
	}
	return nil
}

type ChannelPostUpdateRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelPostUpdateRes) Reset() {
	*x = ChannelPostUpdateRes{}
	mi := &file_base_service_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelPostUpdateRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelPostUpdateRes) ProtoMessage() {}

func (x *ChannelPostUpdateRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelPostUpdateRes.ProtoReflect.Descriptor instead.
func (*ChannelPostUpdateRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{32}
}

type ChannelPostDeleteReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChanId        string                 `protobuf:"bytes,1,opt,name=chan_id,json=chanId,proto3" json:"chan_id,omitempty"`
	PostId        string                 `protobuf:"bytes,2,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelPostDeleteReq) Reset() {
	*x = ChannelPostDeleteReq{}
	mi := &file_base_service_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelPostDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelPostDeleteReq) ProtoMessage() {}

func (x *ChannelPostDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelPostDeleteReq.ProtoReflect.Descriptor instead.
func (*ChannelPostDeleteReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{33}
}

func (x *ChannelPostDeleteReq) GetChanId() string {
	if x != nil {
		return x.ChanId
	}
	return ""
}

func (x *ChannelPostDeleteReq) GetPostId() string {
	if x != nil {
		return x.PostId
	}
	return ""
}

type ChannelPostDeleteRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelPostDeleteRes) Reset() {
	*x = ChannelPostDeleteRes{}
	mi := &file_base_service_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelPostDeleteRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelPostDeleteRes) ProtoMessage() {}

func (x *ChannelPostDeleteRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelPostDeleteRes.ProtoReflect.Descriptor instead.
func (*ChannelPostDeleteRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{34}
}

type ChannelPostLoadReq struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	ChanId string                 `protobuf:"bytes,1,opt,name=chan_id,json=chanId,proto3" json:"chan_id,omitempty"`
	// 从传空加载最新100条
	LastPostId    string `protobuf:"bytes,2,opt,name=last_post_id,json=lastPostId,proto3" json:"last_post_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelPostLoadReq) Reset() {
	*x = ChannelPostLoadReq{}
	mi := &file_base_service_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelPostLoadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelPostLoadReq) ProtoMessage() {}

func (x *ChannelPostLoadReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelPostLoadReq.ProtoReflect.Descriptor instead.
func (*ChannelPostLoadReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{35}
}

func (x *ChannelPostLoadReq) GetChanId() string {
	if x != nil {
		return x.ChanId
	}
	return ""
}

func (x *ChannelPostLoadReq) GetLastPostId() string {
	if x != nil {
		return x.LastPostId
	}
	return ""
}

type ChannelPostLoadRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Posts         []*PostInfo            `protobuf:"bytes,1,rep,name=posts,proto3" json:"posts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelPostLoadRes) Reset() {
	*x = ChannelPostLoadRes{}
	mi := &file_base_service_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelPostLoadRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelPostLoadRes) ProtoMessage() {}

func (x *ChannelPostLoadRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelPostLoadRes.ProtoReflect.Descriptor instead.
func (*ChannelPostLoadRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{36}
}

func (x *ChannelPostLoadRes) GetPosts() []*PostInfo {
	if x != nil {
		return x.Posts
	}
	return nil
}

type ChannelPostInxReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChanId        string                 `protobuf:"bytes,1,opt,name=chan_id,json=chanId,proto3" json:"chan_id,omitempty"`
	PostId        string                 `protobuf:"bytes,2,opt,name=post_id,json=postId,proto3" json:"post_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelPostInxReq) Reset() {
	*x = ChannelPostInxReq{}
	mi := &file_base_service_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelPostInxReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelPostInxReq) ProtoMessage() {}

func (x *ChannelPostInxReq) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelPostInxReq.ProtoReflect.Descriptor instead.
func (*ChannelPostInxReq) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{37}
}

func (x *ChannelPostInxReq) GetChanId() string {
	if x != nil {
		return x.ChanId
	}
	return ""
}

func (x *ChannelPostInxReq) GetPostId() string {
	if x != nil {
		return x.PostId
	}
	return ""
}

type ChannelPostInxRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelPostInxRes) Reset() {
	*x = ChannelPostInxRes{}
	mi := &file_base_service_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelPostInxRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelPostInxRes) ProtoMessage() {}

func (x *ChannelPostInxRes) ProtoReflect() protoreflect.Message {
	mi := &file_base_service_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelPostInxRes.ProtoReflect.Descriptor instead.
func (*ChannelPostInxRes) Descriptor() ([]byte, []int) {
	return file_base_service_proto_rawDescGZIP(), []int{38}
}

var File_base_service_proto protoreflect.FileDescriptor

var file_base_service_proto_rawDesc = string([]byte{
	0x0a, 0x12, 0x62, 0x61, 0x73, 0x65, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x09, 0x70, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x75, 0x73,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x36, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x22, 0x29, 0x0a, 0x0e, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x57, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x77, 0x78, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x77, 0x78, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x4a, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x57,
	0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22,
	0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x22, 0x63, 0x0a, 0x15, 0x46, 0x61, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x57, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x08, 0x72,
	0x65, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x75, 0x73, 0x65, 0x72, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x44, 0x61, 0x74, 0x61, 0x52, 0x07, 0x72, 0x65, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x17,
	0x0a, 0x07, 0x77, 0x78, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x77, 0x78, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x51, 0x0a, 0x15, 0x46, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x57, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x2f, 0x0a, 0x17, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x19, 0x0a, 0x17, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x65, 0x73, 0x22, 0x40, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2c, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x70, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x50, 0x65, 0x74, 0x22, 0x40, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72,
	0x50, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x50, 0x65, 0x74, 0x22, 0x27, 0x0a, 0x0c, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x60, 0x0a, 0x16, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x50, 0x75, 0x74, 0x55, 0x52, 0x4c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x30, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x41, 0x0a, 0x16, 0x4d, 0x65, 0x64,
	0x69, 0x61, 0x50, 0x75, 0x74, 0x55, 0x52, 0x4c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x22, 0x14, 0x0a, 0x12,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x71, 0x22, 0x53, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x66, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x22, 0x0a, 0x04, 0x70,
	0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f, 0x73, 0x74,
	0x2e, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x22,
	0x42, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x22, 0x42, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x42, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x2b, 0x0a, 0x10, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x12, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x61, 0x0a, 0x1a,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x42, 0x79, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x74, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x05, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x05, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x22,
	0x4e, 0x0a, 0x1a, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x42, 0x79, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x12, 0x30, 0x0a,
	0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22,
	0x34, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63,
	0x68, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x4b, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x22, 0x32, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x75, 0x6c,
	0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x68, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x46, 0x75, 0x6c, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x12, 0x2e, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x22, 0xca, 0x01, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x78,
	0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x09,
	0x69, 0x78, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x78, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x69, 0x78, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x64,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x49, 0x6e, 0x78, 0x55, 0x6e, 0x64, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x55, 0x6e, 0x64, 0x6f, 0x12, 0x35, 0x0a, 0x09, 0x69, 0x78, 0x6e, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x78, 0x6e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x52, 0x08, 0x69, 0x78, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x0f,
	0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x78, 0x52, 0x65, 0x73, 0x22,
	0x3a, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x22, 0x3a, 0x0a, 0x14, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x22, 0x3a, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x22, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x6f, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70,
	0x6f, 0x73, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x48, 0x0a, 0x14, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x6f, 0x73, 0x74, 0x49, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x50, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x4f, 0x0a,
	0x12, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x4c, 0x6f, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x64, 0x22, 0x3a,
	0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x4c, 0x6f, 0x61,
	0x64, 0x52, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x6f, 0x73, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x05, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x22, 0x45, 0x0a, 0x11, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e, 0x78, 0x52, 0x65, 0x71, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x73, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49,
	0x64, 0x22, 0x13, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x73, 0x74,
	0x49, 0x6e, 0x78, 0x52, 0x65, 0x73, 0x32, 0xc1, 0x11, 0x0a, 0x0b, 0x42, 0x61, 0x73, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x87, 0x01, 0x0a, 0x14, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12,
	0x28, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x31,
	0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x12, 0x88, 0x01, 0x0a, 0x13, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x75, 0x74, 0x55, 0x52, 0x4c,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x12, 0x27, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61,
	0x50, 0x75, 0x74, 0x55, 0x52, 0x4c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x27, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x75, 0x74, 0x55, 0x52, 0x4c, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x19, 0x12, 0x17, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x2f, 0x70, 0x75,
	0x74, 0x5f, 0x75, 0x72, 0x6c, 0x2f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x6d, 0x0a, 0x0b, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x57, 0x65, 0x43, 0x68, 0x61, 0x74, 0x12, 0x1f, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x57, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x57, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x22, 0x1c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x16, 0x3a, 0x01, 0x2a, 0x22, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2f, 0x77, 0x78, 0x12, 0x85, 0x01, 0x0a, 0x12, 0x46,
	0x61, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x57, 0x65, 0x43, 0x68, 0x61,
	0x74, 0x12, 0x26, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x57, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x26, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x73, 0x74,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x57, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65,
	0x73, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x76,
	0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x67, 0x2f,
	0x77, 0x78, 0x12, 0x6e, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x11, 0x3a, 0x01, 0x2a, 0x1a, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x70,
	0x65, 0x74, 0x12, 0x5f, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x47, 0x65, 0x74, 0x12,
	0x1d, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1d,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x22, 0x14, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f,
	0x70, 0x65, 0x74, 0x12, 0x75, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x12, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x6d, 0x0a, 0x0d, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x21,
	0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x3a, 0x01, 0x2a, 0x22, 0x0b, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x6d, 0x0a, 0x0d, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x3a, 0x01, 0x2a, 0x1a, 0x0b, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x6a, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22,
	0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x2a, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x9f, 0x01, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x42, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x12, 0x2b, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x42, 0x79, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x2b, 0x2e,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x42, 0x79, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x62, 0x79,
	0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x90, 0x01, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x46, 0x75, 0x6c, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x12,
	0x28, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x46, 0x75, 0x6c, 0x6c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x62, 0x61, 0x73, 0x65,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x46, 0x75, 0x6c, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x5f, 0x62, 0x79, 0x5f, 0x69, 0x64, 0x12, 0x68, 0x0a, 0x0a, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x78, 0x12, 0x1e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x6e, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x6e, 0x78, 0x52, 0x65, 0x73, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a,
	0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f,
	0x69, 0x6e, 0x78, 0x12, 0x7e, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f,
	0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x25, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01,
	0x2a, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x70,
	0x6f, 0x73, 0x74, 0x12, 0x7e, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f,
	0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x25, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x3a, 0x01,
	0x2a, 0x1a, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x70,
	0x6f, 0x73, 0x74, 0x12, 0x7b, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f,
	0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x25, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x2a, 0x10,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x70, 0x6f, 0x73, 0x74,
	0x12, 0x7d, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x4c,
	0x6f, 0x61, 0x64, 0x12, 0x23, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x73,
	0x74, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x22, 0x20, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x79, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x6e,
	0x78, 0x12, 0x22, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x49,
	0x6e, 0x78, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50,
	0x6f, 0x73, 0x74, 0x49, 0x6e, 0x78, 0x52, 0x65, 0x73, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x19, 0x3a, 0x01, 0x2a, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x2f, 0x70, 0x6f, 0x73, 0x74, 0x2f, 0x69, 0x6e, 0x78, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x4f, 0x47, 0x54, 0x54, 0x2f, 0x64,
	0x6d, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x62, 0x61, 0x73, 0x65, 0x3b, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
})

var (
	file_base_service_proto_rawDescOnce sync.Once
	file_base_service_proto_rawDescData []byte
)

func file_base_service_proto_rawDescGZIP() []byte {
	file_base_service_proto_rawDescOnce.Do(func() {
		file_base_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_base_service_proto_rawDesc), len(file_base_service_proto_rawDesc)))
	})
	return file_base_service_proto_rawDescData
}

var file_base_service_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_base_service_proto_goTypes = []any{
	(*ErrorMessage)(nil),               // 0: base_service.v1.ErrorMessage
	(*LoginWeChatReq)(nil),             // 1: base_service.v1.LoginWeChatReq
	(*LoginWeChatRes)(nil),             // 2: base_service.v1.LoginWeChatRes
	(*FastRegisterWeChatReq)(nil),      // 3: base_service.v1.FastRegisterWeChatReq
	(*FastRegisterWeChatRes)(nil),      // 4: base_service.v1.FastRegisterWeChatRes
	(*LocationCommonSearchReq)(nil),    // 5: base_service.v1.LocationCommonSearchReq
	(*LocationCommonSearchRes)(nil),    // 6: base_service.v1.LocationCommonSearchRes
	(*UserPetUpdateReq)(nil),           // 7: base_service.v1.UserPetUpdateReq
	(*UserPetUpdateRes)(nil),           // 8: base_service.v1.UserPetUpdateRes
	(*UserPeGetReq)(nil),               // 9: base_service.v1.UserPeGetReq
	(*UserPeGetRes)(nil),               // 10: base_service.v1.UserPeGetRes
	(*MediaPutURLBatchGetReq)(nil),     // 11: base_service.v1.MediaPutURLBatchGetReq
	(*MediaPutURLBatchGetRes)(nil),     // 12: base_service.v1.MediaPutURLBatchGetRes
	(*ChannelTypeListReq)(nil),         // 13: base_service.v1.ChannelTypeListReq
	(*ChannelTypeListRes)(nil),         // 14: base_service.v1.ChannelTypeListRes
	(*ChannelCreateReq)(nil),           // 15: base_service.v1.ChannelCreateReq
	(*ChannelCreateRes)(nil),           // 16: base_service.v1.ChannelCreateRes
	(*ChannelUpdateReq)(nil),           // 17: base_service.v1.ChannelUpdateReq
	(*ChannelUpdateRes)(nil),           // 18: base_service.v1.ChannelUpdateRes
	(*ChannelDeleteReq)(nil),           // 19: base_service.v1.ChannelDeleteReq
	(*ChannelDeleteRes)(nil),           // 20: base_service.v1.ChannelDeleteRes
	(*ChannelBaseQueryByBoundReq)(nil), // 21: base_service.v1.ChannelBaseQueryByBoundReq
	(*ChannelBaseQueryByBoundRes)(nil), // 22: base_service.v1.ChannelBaseQueryByBoundRes
	(*ChannelDetailQueryByIdReq)(nil),  // 23: base_service.v1.ChannelDetailQueryByIdReq
	(*ChannelDetailQueryByIdRes)(nil),  // 24: base_service.v1.ChannelDetailQueryByIdRes
	(*ChannelFullQueryByIdReq)(nil),    // 25: base_service.v1.ChannelFullQueryByIdReq
	(*ChannelFullQueryByIdRes)(nil),    // 26: base_service.v1.ChannelFullQueryByIdRes
	(*ChannelInxReq)(nil),              // 27: base_service.v1.ChannelInxReq
	(*ChannelInxRes)(nil),              // 28: base_service.v1.ChannelInxRes
	(*ChannelPostCreateReq)(nil),       // 29: base_service.v1.ChannelPostCreateReq
	(*ChannelPostCreateRes)(nil),       // 30: base_service.v1.ChannelPostCreateRes
	(*ChannelPostUpdateReq)(nil),       // 31: base_service.v1.ChannelPostUpdateReq
	(*ChannelPostUpdateRes)(nil),       // 32: base_service.v1.ChannelPostUpdateRes
	(*ChannelPostDeleteReq)(nil),       // 33: base_service.v1.ChannelPostDeleteReq
	(*ChannelPostDeleteRes)(nil),       // 34: base_service.v1.ChannelPostDeleteRes
	(*ChannelPostLoadReq)(nil),         // 35: base_service.v1.ChannelPostLoadReq
	(*ChannelPostLoadRes)(nil),         // 36: base_service.v1.ChannelPostLoadRes
	(*ChannelPostInxReq)(nil),          // 37: base_service.v1.ChannelPostInxReq
	(*ChannelPostInxRes)(nil),          // 38: base_service.v1.ChannelPostInxRes
	(*UserInfo)(nil),                   // 39: user.UserInfo
	(*FastRegisterData)(nil),           // 40: user.FastRegisterData
	(*UserPetInfo)(nil),                // 41: user.UserPetInfo
	(MediaType)(0),                     // 42: common.MediaType
	(*MediaInfo)(nil),                  // 43: common.MediaInfo
	(*ChannelTypeInfo)(nil),            // 44: channel.ChannelTypeInfo
	(*ChannelInfo)(nil),                // 45: channel.ChannelInfo
	(*PostInfo)(nil),                   // 46: post.PostInfo
	(*BoundCoord)(nil),                 // 47: common.BoundCoord
	(ChannelIxnState)(0),               // 48: channel.ChannelIxnState
	(InxUndoType)(0),                   // 49: common.InxUndoType
	(ChannelIxnEvent)(0),               // 50: channel.ChannelIxnEvent
}
var file_base_service_proto_depIdxs = []int32{
	39, // 0: base_service.v1.LoginWeChatRes.user:type_name -> user.UserInfo
	40, // 1: base_service.v1.FastRegisterWeChatReq.reg_data:type_name -> user.FastRegisterData
	39, // 2: base_service.v1.FastRegisterWeChatRes.user:type_name -> user.UserInfo
	41, // 3: base_service.v1.UserPetUpdateReq.user_pet:type_name -> user.UserPetInfo
	41, // 4: base_service.v1.UserPetUpdateRes.user_pet:type_name -> user.UserPetInfo
	39, // 5: base_service.v1.UserPeGetRes.user:type_name -> user.UserInfo
	42, // 6: base_service.v1.MediaPutURLBatchGetReq.media_type:type_name -> common.MediaType
	43, // 7: base_service.v1.MediaPutURLBatchGetRes.media:type_name -> common.MediaInfo
	44, // 8: base_service.v1.ChannelTypeListRes.channel_types:type_name -> channel.ChannelTypeInfo
	45, // 9: base_service.v1.ChannelCreateReq.channel:type_name -> channel.ChannelInfo
	46, // 10: base_service.v1.ChannelCreateReq.post:type_name -> post.PostInfo
	45, // 11: base_service.v1.ChannelCreateRes.channel:type_name -> channel.ChannelInfo
	45, // 12: base_service.v1.ChannelUpdateReq.channel:type_name -> channel.ChannelInfo
	45, // 13: base_service.v1.ChannelUpdateRes.channel:type_name -> channel.ChannelInfo
	47, // 14: base_service.v1.ChannelBaseQueryByBoundReq.bound:type_name -> common.BoundCoord
	45, // 15: base_service.v1.ChannelBaseQueryByBoundRes.channels:type_name -> channel.ChannelInfo
	45, // 16: base_service.v1.ChannelDetailQueryByIdRes.channel:type_name -> channel.ChannelInfo
	45, // 17: base_service.v1.ChannelFullQueryByIdRes.channel:type_name -> channel.ChannelInfo
	48, // 18: base_service.v1.ChannelInxReq.ixn_state:type_name -> channel.ChannelIxnState
	49, // 19: base_service.v1.ChannelInxReq.state_undo:type_name -> common.InxUndoType
	50, // 20: base_service.v1.ChannelInxReq.ixn_event:type_name -> channel.ChannelIxnEvent
	46, // 21: base_service.v1.ChannelPostCreateReq.post:type_name -> post.PostInfo
	46, // 22: base_service.v1.ChannelPostCreateRes.post:type_name -> post.PostInfo
	46, // 23: base_service.v1.ChannelPostUpdateReq.post:type_name -> post.PostInfo
	46, // 24: base_service.v1.ChannelPostLoadRes.posts:type_name -> post.PostInfo
	5,  // 25: base_service.v1.BaseService.LocationCommonSearch:input_type -> base_service.v1.LocationCommonSearchReq
	11, // 26: base_service.v1.BaseService.MediaPutURLBatchGet:input_type -> base_service.v1.MediaPutURLBatchGetReq
	1,  // 27: base_service.v1.BaseService.LoginWeChat:input_type -> base_service.v1.LoginWeChatReq
	3,  // 28: base_service.v1.BaseService.FastRegisterWeChat:input_type -> base_service.v1.FastRegisterWeChatReq
	7,  // 29: base_service.v1.BaseService.UserPetUpdate:input_type -> base_service.v1.UserPetUpdateReq
	9,  // 30: base_service.v1.BaseService.UserPeGet:input_type -> base_service.v1.UserPeGetReq
	13, // 31: base_service.v1.BaseService.ChannelTypeList:input_type -> base_service.v1.ChannelTypeListReq
	15, // 32: base_service.v1.BaseService.ChannelCreate:input_type -> base_service.v1.ChannelCreateReq
	17, // 33: base_service.v1.BaseService.ChannelUpdate:input_type -> base_service.v1.ChannelUpdateReq
	19, // 34: base_service.v1.BaseService.ChannelDelete:input_type -> base_service.v1.ChannelDeleteReq
	21, // 35: base_service.v1.BaseService.ChannelBaseQueryByBound:input_type -> base_service.v1.ChannelBaseQueryByBoundReq
	25, // 36: base_service.v1.BaseService.ChannelFullQueryById:input_type -> base_service.v1.ChannelFullQueryByIdReq
	27, // 37: base_service.v1.BaseService.ChannelInx:input_type -> base_service.v1.ChannelInxReq
	29, // 38: base_service.v1.BaseService.ChannelPostCreate:input_type -> base_service.v1.ChannelPostCreateReq
	31, // 39: base_service.v1.BaseService.ChannelPostUpdate:input_type -> base_service.v1.ChannelPostUpdateReq
	33, // 40: base_service.v1.BaseService.ChannelPostDelete:input_type -> base_service.v1.ChannelPostDeleteReq
	35, // 41: base_service.v1.BaseService.ChannelPostLoad:input_type -> base_service.v1.ChannelPostLoadReq
	37, // 42: base_service.v1.BaseService.ChannelPostInx:input_type -> base_service.v1.ChannelPostInxReq
	6,  // 43: base_service.v1.BaseService.LocationCommonSearch:output_type -> base_service.v1.LocationCommonSearchRes
	12, // 44: base_service.v1.BaseService.MediaPutURLBatchGet:output_type -> base_service.v1.MediaPutURLBatchGetRes
	2,  // 45: base_service.v1.BaseService.LoginWeChat:output_type -> base_service.v1.LoginWeChatRes
	4,  // 46: base_service.v1.BaseService.FastRegisterWeChat:output_type -> base_service.v1.FastRegisterWeChatRes
	8,  // 47: base_service.v1.BaseService.UserPetUpdate:output_type -> base_service.v1.UserPetUpdateRes
	10, // 48: base_service.v1.BaseService.UserPeGet:output_type -> base_service.v1.UserPeGetRes
	14, // 49: base_service.v1.BaseService.ChannelTypeList:output_type -> base_service.v1.ChannelTypeListRes
	16, // 50: base_service.v1.BaseService.ChannelCreate:output_type -> base_service.v1.ChannelCreateRes
	18, // 51: base_service.v1.BaseService.ChannelUpdate:output_type -> base_service.v1.ChannelUpdateRes
	20, // 52: base_service.v1.BaseService.ChannelDelete:output_type -> base_service.v1.ChannelDeleteRes
	22, // 53: base_service.v1.BaseService.ChannelBaseQueryByBound:output_type -> base_service.v1.ChannelBaseQueryByBoundRes
	26, // 54: base_service.v1.BaseService.ChannelFullQueryById:output_type -> base_service.v1.ChannelFullQueryByIdRes
	28, // 55: base_service.v1.BaseService.ChannelInx:output_type -> base_service.v1.ChannelInxRes
	30, // 56: base_service.v1.BaseService.ChannelPostCreate:output_type -> base_service.v1.ChannelPostCreateRes
	32, // 57: base_service.v1.BaseService.ChannelPostUpdate:output_type -> base_service.v1.ChannelPostUpdateRes
	34, // 58: base_service.v1.BaseService.ChannelPostDelete:output_type -> base_service.v1.ChannelPostDeleteRes
	36, // 59: base_service.v1.BaseService.ChannelPostLoad:output_type -> base_service.v1.ChannelPostLoadRes
	38, // 60: base_service.v1.BaseService.ChannelPostInx:output_type -> base_service.v1.ChannelPostInxRes
	43, // [43:61] is the sub-list for method output_type
	25, // [25:43] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_base_service_proto_init() }
func file_base_service_proto_init() {
	if File_base_service_proto != nil {
		return
	}
	file_common_proto_init()
	file_pet_proto_init()
	file_user_proto_init()
	file_channel_proto_init()
	file_post_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_base_service_proto_rawDesc), len(file_base_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_base_service_proto_goTypes,
		DependencyIndexes: file_base_service_proto_depIdxs,
		MessageInfos:      file_base_service_proto_msgTypes,
	}.Build()
	File_base_service_proto = out.File
	file_base_service_proto_goTypes = nil
	file_base_service_proto_depIdxs = nil
}
