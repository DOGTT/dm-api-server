// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: base-service.proto

package api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ErrorMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ErrorMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ErrorMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ErrorMessageMultiError, or
// nil if none found.
func (m *ErrorMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *ErrorMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Desc

	if len(errors) > 0 {
		return ErrorMessageMultiError(errors)
	}

	return nil
}

// ErrorMessageMultiError is an error wrapping multiple validation errors
// returned by ErrorMessage.ValidateAll() if the designated constraints aren't met.
type ErrorMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorMessageMultiError) AllErrors() []error { return m }

// ErrorMessageValidationError is the validation error returned by
// ErrorMessage.Validate if the designated constraints aren't met.
type ErrorMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorMessageValidationError) ErrorName() string { return "ErrorMessageValidationError" }

// Error satisfies the builtin error interface
func (e ErrorMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorMessageValidationError{}

// Validate checks the field values on WeChatLoginReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WeChatLoginReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WeChatLoginReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WeChatLoginReqMultiError,
// or nil if none found.
func (m *WeChatLoginReq) ValidateAll() error {
	return m.validate(true)
}

func (m *WeChatLoginReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WxCode

	if len(errors) > 0 {
		return WeChatLoginReqMultiError(errors)
	}

	return nil
}

// WeChatLoginReqMultiError is an error wrapping multiple validation errors
// returned by WeChatLoginReq.ValidateAll() if the designated constraints
// aren't met.
type WeChatLoginReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WeChatLoginReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WeChatLoginReqMultiError) AllErrors() []error { return m }

// WeChatLoginReqValidationError is the validation error returned by
// WeChatLoginReq.Validate if the designated constraints aren't met.
type WeChatLoginReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WeChatLoginReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WeChatLoginReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WeChatLoginReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WeChatLoginReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WeChatLoginReqValidationError) ErrorName() string { return "WeChatLoginReqValidationError" }

// Error satisfies the builtin error interface
func (e WeChatLoginReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWeChatLoginReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WeChatLoginReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WeChatLoginReqValidationError{}

// Validate checks the field values on WeChatLoginResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WeChatLoginResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WeChatLoginResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WeChatLoginRespMultiError, or nil if none found.
func (m *WeChatLoginResp) ValidateAll() error {
	return m.validate(true)
}

func (m *WeChatLoginResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if all {
		switch v := interface{}(m.GetUserInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WeChatLoginRespValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WeChatLoginRespValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WeChatLoginRespValidationError{
				field:  "UserInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WeChatLoginRespMultiError(errors)
	}

	return nil
}

// WeChatLoginRespMultiError is an error wrapping multiple validation errors
// returned by WeChatLoginResp.ValidateAll() if the designated constraints
// aren't met.
type WeChatLoginRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WeChatLoginRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WeChatLoginRespMultiError) AllErrors() []error { return m }

// WeChatLoginRespValidationError is the validation error returned by
// WeChatLoginResp.Validate if the designated constraints aren't met.
type WeChatLoginRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WeChatLoginRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WeChatLoginRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WeChatLoginRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WeChatLoginRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WeChatLoginRespValidationError) ErrorName() string { return "WeChatLoginRespValidationError" }

// Error satisfies the builtin error interface
func (e WeChatLoginRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWeChatLoginResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WeChatLoginRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WeChatLoginRespValidationError{}

// Validate checks the field values on WeChatRegisterFastReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WeChatRegisterFastReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WeChatRegisterFastReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WeChatRegisterFastReqMultiError, or nil if none found.
func (m *WeChatRegisterFastReq) ValidateAll() error {
	return m.validate(true)
}

func (m *WeChatRegisterFastReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WxCode

	if all {
		switch v := interface{}(m.GetPet()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WeChatRegisterFastReqValidationError{
					field:  "Pet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WeChatRegisterFastReqValidationError{
					field:  "Pet",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPet()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WeChatRegisterFastReqValidationError{
				field:  "Pet",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WeChatRegisterFastReqMultiError(errors)
	}

	return nil
}

// WeChatRegisterFastReqMultiError is an error wrapping multiple validation
// errors returned by WeChatRegisterFastReq.ValidateAll() if the designated
// constraints aren't met.
type WeChatRegisterFastReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WeChatRegisterFastReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WeChatRegisterFastReqMultiError) AllErrors() []error { return m }

// WeChatRegisterFastReqValidationError is the validation error returned by
// WeChatRegisterFastReq.Validate if the designated constraints aren't met.
type WeChatRegisterFastReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WeChatRegisterFastReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WeChatRegisterFastReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WeChatRegisterFastReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WeChatRegisterFastReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WeChatRegisterFastReqValidationError) ErrorName() string {
	return "WeChatRegisterFastReqValidationError"
}

// Error satisfies the builtin error interface
func (e WeChatRegisterFastReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWeChatRegisterFastReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WeChatRegisterFastReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WeChatRegisterFastReqValidationError{}

// Validate checks the field values on WeChatRegisterFastResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WeChatRegisterFastResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WeChatRegisterFastResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WeChatRegisterFastRespMultiError, or nil if none found.
func (m *WeChatRegisterFastResp) ValidateAll() error {
	return m.validate(true)
}

func (m *WeChatRegisterFastResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if all {
		switch v := interface{}(m.GetUserInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WeChatRegisterFastRespValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WeChatRegisterFastRespValidationError{
					field:  "UserInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUserInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WeChatRegisterFastRespValidationError{
				field:  "UserInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WeChatRegisterFastRespMultiError(errors)
	}

	return nil
}

// WeChatRegisterFastRespMultiError is an error wrapping multiple validation
// errors returned by WeChatRegisterFastResp.ValidateAll() if the designated
// constraints aren't met.
type WeChatRegisterFastRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WeChatRegisterFastRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WeChatRegisterFastRespMultiError) AllErrors() []error { return m }

// WeChatRegisterFastRespValidationError is the validation error returned by
// WeChatRegisterFastResp.Validate if the designated constraints aren't met.
type WeChatRegisterFastRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WeChatRegisterFastRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WeChatRegisterFastRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WeChatRegisterFastRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WeChatRegisterFastRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WeChatRegisterFastRespValidationError) ErrorName() string {
	return "WeChatRegisterFastRespValidationError"
}

// Error satisfies the builtin error interface
func (e WeChatRegisterFastRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWeChatRegisterFastResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WeChatRegisterFastRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WeChatRegisterFastRespValidationError{}

// Validate checks the field values on LocationCommonSearchReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LocationCommonSearchReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LocationCommonSearchReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LocationCommonSearchReqMultiError, or nil if none found.
func (m *LocationCommonSearchReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LocationCommonSearchReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Input

	if len(errors) > 0 {
		return LocationCommonSearchReqMultiError(errors)
	}

	return nil
}

// LocationCommonSearchReqMultiError is an error wrapping multiple validation
// errors returned by LocationCommonSearchReq.ValidateAll() if the designated
// constraints aren't met.
type LocationCommonSearchReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LocationCommonSearchReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LocationCommonSearchReqMultiError) AllErrors() []error { return m }

// LocationCommonSearchReqValidationError is the validation error returned by
// LocationCommonSearchReq.Validate if the designated constraints aren't met.
type LocationCommonSearchReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocationCommonSearchReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocationCommonSearchReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocationCommonSearchReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocationCommonSearchReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocationCommonSearchReqValidationError) ErrorName() string {
	return "LocationCommonSearchReqValidationError"
}

// Error satisfies the builtin error interface
func (e LocationCommonSearchReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocationCommonSearchReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocationCommonSearchReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocationCommonSearchReqValidationError{}

// Validate checks the field values on LocationCommonSearchResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LocationCommonSearchResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LocationCommonSearchResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LocationCommonSearchRespMultiError, or nil if none found.
func (m *LocationCommonSearchResp) ValidateAll() error {
	return m.validate(true)
}

func (m *LocationCommonSearchResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LocationCommonSearchRespMultiError(errors)
	}

	return nil
}

// LocationCommonSearchRespMultiError is an error wrapping multiple validation
// errors returned by LocationCommonSearchResp.ValidateAll() if the designated
// constraints aren't met.
type LocationCommonSearchRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LocationCommonSearchRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LocationCommonSearchRespMultiError) AllErrors() []error { return m }

// LocationCommonSearchRespValidationError is the validation error returned by
// LocationCommonSearchResp.Validate if the designated constraints aren't met.
type LocationCommonSearchRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LocationCommonSearchRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LocationCommonSearchRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LocationCommonSearchRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LocationCommonSearchRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LocationCommonSearchRespValidationError) ErrorName() string {
	return "LocationCommonSearchRespValidationError"
}

// Error satisfies the builtin error interface
func (e LocationCommonSearchRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLocationCommonSearchResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LocationCommonSearchRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LocationCommonSearchRespValidationError{}

// Validate checks the field values on ObjectPutPresignURLBatchGetReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectPutPresignURLBatchGetReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectPutPresignURLBatchGetReq with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ObjectPutPresignURLBatchGetReqMultiError, or nil if none found.
func (m *ObjectPutPresignURLBatchGetReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectPutPresignURLBatchGetReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ObjectType

	// no validation rules for ObjectCount

	if len(errors) > 0 {
		return ObjectPutPresignURLBatchGetReqMultiError(errors)
	}

	return nil
}

// ObjectPutPresignURLBatchGetReqMultiError is an error wrapping multiple
// validation errors returned by ObjectPutPresignURLBatchGetReq.ValidateAll()
// if the designated constraints aren't met.
type ObjectPutPresignURLBatchGetReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectPutPresignURLBatchGetReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectPutPresignURLBatchGetReqMultiError) AllErrors() []error { return m }

// ObjectPutPresignURLBatchGetReqValidationError is the validation error
// returned by ObjectPutPresignURLBatchGetReq.Validate if the designated
// constraints aren't met.
type ObjectPutPresignURLBatchGetReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectPutPresignURLBatchGetReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectPutPresignURLBatchGetReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectPutPresignURLBatchGetReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectPutPresignURLBatchGetReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectPutPresignURLBatchGetReqValidationError) ErrorName() string {
	return "ObjectPutPresignURLBatchGetReqValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectPutPresignURLBatchGetReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectPutPresignURLBatchGetReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectPutPresignURLBatchGetReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectPutPresignURLBatchGetReqValidationError{}

// Validate checks the field values on ObjectPutPresignURLBatchGetResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ObjectPutPresignURLBatchGetResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectPutPresignURLBatchGetResp with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ObjectPutPresignURLBatchGetRespMultiError, or nil if none found.
func (m *ObjectPutPresignURLBatchGetResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectPutPresignURLBatchGetResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ObjectPutPresignURLBatchGetRespMultiError(errors)
	}

	return nil
}

// ObjectPutPresignURLBatchGetRespMultiError is an error wrapping multiple
// validation errors returned by ObjectPutPresignURLBatchGetResp.ValidateAll()
// if the designated constraints aren't met.
type ObjectPutPresignURLBatchGetRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectPutPresignURLBatchGetRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectPutPresignURLBatchGetRespMultiError) AllErrors() []error { return m }

// ObjectPutPresignURLBatchGetRespValidationError is the validation error
// returned by ObjectPutPresignURLBatchGetResp.Validate if the designated
// constraints aren't met.
type ObjectPutPresignURLBatchGetRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectPutPresignURLBatchGetRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectPutPresignURLBatchGetRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectPutPresignURLBatchGetRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectPutPresignURLBatchGetRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectPutPresignURLBatchGetRespValidationError) ErrorName() string {
	return "ObjectPutPresignURLBatchGetRespValidationError"
}

// Error satisfies the builtin error interface
func (e ObjectPutPresignURLBatchGetRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectPutPresignURLBatchGetResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectPutPresignURLBatchGetRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectPutPresignURLBatchGetRespValidationError{}

// Validate checks the field values on PofpCreateReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PofpCreateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PofpCreateReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PofpCreateReqMultiError, or
// nil if none found.
func (m *PofpCreateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PofpCreateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPofp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PofpCreateReqValidationError{
					field:  "Pofp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PofpCreateReqValidationError{
					field:  "Pofp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPofp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PofpCreateReqValidationError{
				field:  "Pofp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PofpCreateReqMultiError(errors)
	}

	return nil
}

// PofpCreateReqMultiError is an error wrapping multiple validation errors
// returned by PofpCreateReq.ValidateAll() if the designated constraints
// aren't met.
type PofpCreateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PofpCreateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PofpCreateReqMultiError) AllErrors() []error { return m }

// PofpCreateReqValidationError is the validation error returned by
// PofpCreateReq.Validate if the designated constraints aren't met.
type PofpCreateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PofpCreateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PofpCreateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PofpCreateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PofpCreateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PofpCreateReqValidationError) ErrorName() string { return "PofpCreateReqValidationError" }

// Error satisfies the builtin error interface
func (e PofpCreateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPofpCreateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PofpCreateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PofpCreateReqValidationError{}

// Validate checks the field values on PofpCreateResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PofpCreateResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PofpCreateResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PofpCreateRespMultiError,
// or nil if none found.
func (m *PofpCreateResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PofpCreateResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PofpCreateRespMultiError(errors)
	}

	return nil
}

// PofpCreateRespMultiError is an error wrapping multiple validation errors
// returned by PofpCreateResp.ValidateAll() if the designated constraints
// aren't met.
type PofpCreateRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PofpCreateRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PofpCreateRespMultiError) AllErrors() []error { return m }

// PofpCreateRespValidationError is the validation error returned by
// PofpCreateResp.Validate if the designated constraints aren't met.
type PofpCreateRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PofpCreateRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PofpCreateRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PofpCreateRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PofpCreateRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PofpCreateRespValidationError) ErrorName() string { return "PofpCreateRespValidationError" }

// Error satisfies the builtin error interface
func (e PofpCreateRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPofpCreateResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PofpCreateRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PofpCreateRespValidationError{}

// Validate checks the field values on PofpUpdateReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PofpUpdateReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PofpUpdateReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PofpUpdateReqMultiError, or
// nil if none found.
func (m *PofpUpdateReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PofpUpdateReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPofp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PofpUpdateReqValidationError{
					field:  "Pofp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PofpUpdateReqValidationError{
					field:  "Pofp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPofp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PofpUpdateReqValidationError{
				field:  "Pofp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PofpUpdateReqMultiError(errors)
	}

	return nil
}

// PofpUpdateReqMultiError is an error wrapping multiple validation errors
// returned by PofpUpdateReq.ValidateAll() if the designated constraints
// aren't met.
type PofpUpdateReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PofpUpdateReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PofpUpdateReqMultiError) AllErrors() []error { return m }

// PofpUpdateReqValidationError is the validation error returned by
// PofpUpdateReq.Validate if the designated constraints aren't met.
type PofpUpdateReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PofpUpdateReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PofpUpdateReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PofpUpdateReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PofpUpdateReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PofpUpdateReqValidationError) ErrorName() string { return "PofpUpdateReqValidationError" }

// Error satisfies the builtin error interface
func (e PofpUpdateReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPofpUpdateReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PofpUpdateReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PofpUpdateReqValidationError{}

// Validate checks the field values on PofpUpdateResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PofpUpdateResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PofpUpdateResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PofpUpdateRespMultiError,
// or nil if none found.
func (m *PofpUpdateResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PofpUpdateResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PofpUpdateRespMultiError(errors)
	}

	return nil
}

// PofpUpdateRespMultiError is an error wrapping multiple validation errors
// returned by PofpUpdateResp.ValidateAll() if the designated constraints
// aren't met.
type PofpUpdateRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PofpUpdateRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PofpUpdateRespMultiError) AllErrors() []error { return m }

// PofpUpdateRespValidationError is the validation error returned by
// PofpUpdateResp.Validate if the designated constraints aren't met.
type PofpUpdateRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PofpUpdateRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PofpUpdateRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PofpUpdateRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PofpUpdateRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PofpUpdateRespValidationError) ErrorName() string { return "PofpUpdateRespValidationError" }

// Error satisfies the builtin error interface
func (e PofpUpdateRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPofpUpdateResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PofpUpdateRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PofpUpdateRespValidationError{}

// Validate checks the field values on PofpDeleteReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PofpDeleteReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PofpDeleteReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PofpDeleteReqMultiError, or
// nil if none found.
func (m *PofpDeleteReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PofpDeleteReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if len(errors) > 0 {
		return PofpDeleteReqMultiError(errors)
	}

	return nil
}

// PofpDeleteReqMultiError is an error wrapping multiple validation errors
// returned by PofpDeleteReq.ValidateAll() if the designated constraints
// aren't met.
type PofpDeleteReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PofpDeleteReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PofpDeleteReqMultiError) AllErrors() []error { return m }

// PofpDeleteReqValidationError is the validation error returned by
// PofpDeleteReq.Validate if the designated constraints aren't met.
type PofpDeleteReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PofpDeleteReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PofpDeleteReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PofpDeleteReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PofpDeleteReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PofpDeleteReqValidationError) ErrorName() string { return "PofpDeleteReqValidationError" }

// Error satisfies the builtin error interface
func (e PofpDeleteReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPofpDeleteReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PofpDeleteReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PofpDeleteReqValidationError{}

// Validate checks the field values on PofpDeleteResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PofpDeleteResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PofpDeleteResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PofpDeleteRespMultiError,
// or nil if none found.
func (m *PofpDeleteResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PofpDeleteResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PofpDeleteRespMultiError(errors)
	}

	return nil
}

// PofpDeleteRespMultiError is an error wrapping multiple validation errors
// returned by PofpDeleteResp.ValidateAll() if the designated constraints
// aren't met.
type PofpDeleteRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PofpDeleteRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PofpDeleteRespMultiError) AllErrors() []error { return m }

// PofpDeleteRespValidationError is the validation error returned by
// PofpDeleteResp.Validate if the designated constraints aren't met.
type PofpDeleteRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PofpDeleteRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PofpDeleteRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PofpDeleteRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PofpDeleteRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PofpDeleteRespValidationError) ErrorName() string { return "PofpDeleteRespValidationError" }

// Error satisfies the builtin error interface
func (e PofpDeleteRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPofpDeleteResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PofpDeleteRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PofpDeleteRespValidationError{}

// Validate checks the field values on PofpBaseQueryByBoundReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PofpBaseQueryByBoundReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PofpBaseQueryByBoundReq with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PofpBaseQueryByBoundReqMultiError, or nil if none found.
func (m *PofpBaseQueryByBoundReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PofpBaseQueryByBoundReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBound()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PofpBaseQueryByBoundReqValidationError{
					field:  "Bound",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PofpBaseQueryByBoundReqValidationError{
					field:  "Bound",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBound()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PofpBaseQueryByBoundReqValidationError{
				field:  "Bound",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PofpBaseQueryByBoundReqMultiError(errors)
	}

	return nil
}

// PofpBaseQueryByBoundReqMultiError is an error wrapping multiple validation
// errors returned by PofpBaseQueryByBoundReq.ValidateAll() if the designated
// constraints aren't met.
type PofpBaseQueryByBoundReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PofpBaseQueryByBoundReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PofpBaseQueryByBoundReqMultiError) AllErrors() []error { return m }

// PofpBaseQueryByBoundReqValidationError is the validation error returned by
// PofpBaseQueryByBoundReq.Validate if the designated constraints aren't met.
type PofpBaseQueryByBoundReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PofpBaseQueryByBoundReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PofpBaseQueryByBoundReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PofpBaseQueryByBoundReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PofpBaseQueryByBoundReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PofpBaseQueryByBoundReqValidationError) ErrorName() string {
	return "PofpBaseQueryByBoundReqValidationError"
}

// Error satisfies the builtin error interface
func (e PofpBaseQueryByBoundReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPofpBaseQueryByBoundReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PofpBaseQueryByBoundReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PofpBaseQueryByBoundReqValidationError{}

// Validate checks the field values on PofpBaseQueryByBoundResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PofpBaseQueryByBoundResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PofpBaseQueryByBoundResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PofpBaseQueryByBoundRespMultiError, or nil if none found.
func (m *PofpBaseQueryByBoundResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PofpBaseQueryByBoundResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPofps() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PofpBaseQueryByBoundRespValidationError{
						field:  fmt.Sprintf("Pofps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PofpBaseQueryByBoundRespValidationError{
						field:  fmt.Sprintf("Pofps[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PofpBaseQueryByBoundRespValidationError{
					field:  fmt.Sprintf("Pofps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PofpBaseQueryByBoundRespMultiError(errors)
	}

	return nil
}

// PofpBaseQueryByBoundRespMultiError is an error wrapping multiple validation
// errors returned by PofpBaseQueryByBoundResp.ValidateAll() if the designated
// constraints aren't met.
type PofpBaseQueryByBoundRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PofpBaseQueryByBoundRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PofpBaseQueryByBoundRespMultiError) AllErrors() []error { return m }

// PofpBaseQueryByBoundRespValidationError is the validation error returned by
// PofpBaseQueryByBoundResp.Validate if the designated constraints aren't met.
type PofpBaseQueryByBoundRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PofpBaseQueryByBoundRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PofpBaseQueryByBoundRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PofpBaseQueryByBoundRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PofpBaseQueryByBoundRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PofpBaseQueryByBoundRespValidationError) ErrorName() string {
	return "PofpBaseQueryByBoundRespValidationError"
}

// Error satisfies the builtin error interface
func (e PofpBaseQueryByBoundRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPofpBaseQueryByBoundResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PofpBaseQueryByBoundRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PofpBaseQueryByBoundRespValidationError{}

// Validate checks the field values on PofpDetailQueryByIdReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PofpDetailQueryByIdReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PofpDetailQueryByIdReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PofpDetailQueryByIdReqMultiError, or nil if none found.
func (m *PofpDetailQueryByIdReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PofpDetailQueryByIdReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if len(errors) > 0 {
		return PofpDetailQueryByIdReqMultiError(errors)
	}

	return nil
}

// PofpDetailQueryByIdReqMultiError is an error wrapping multiple validation
// errors returned by PofpDetailQueryByIdReq.ValidateAll() if the designated
// constraints aren't met.
type PofpDetailQueryByIdReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PofpDetailQueryByIdReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PofpDetailQueryByIdReqMultiError) AllErrors() []error { return m }

// PofpDetailQueryByIdReqValidationError is the validation error returned by
// PofpDetailQueryByIdReq.Validate if the designated constraints aren't met.
type PofpDetailQueryByIdReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PofpDetailQueryByIdReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PofpDetailQueryByIdReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PofpDetailQueryByIdReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PofpDetailQueryByIdReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PofpDetailQueryByIdReqValidationError) ErrorName() string {
	return "PofpDetailQueryByIdReqValidationError"
}

// Error satisfies the builtin error interface
func (e PofpDetailQueryByIdReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPofpDetailQueryByIdReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PofpDetailQueryByIdReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PofpDetailQueryByIdReqValidationError{}

// Validate checks the field values on PofpDetailQueryByIdResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PofpDetailQueryByIdResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PofpDetailQueryByIdResp with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PofpDetailQueryByIdRespMultiError, or nil if none found.
func (m *PofpDetailQueryByIdResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PofpDetailQueryByIdResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPofp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PofpDetailQueryByIdRespValidationError{
					field:  "Pofp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PofpDetailQueryByIdRespValidationError{
					field:  "Pofp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPofp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PofpDetailQueryByIdRespValidationError{
				field:  "Pofp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPofpDynamicInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PofpDetailQueryByIdRespValidationError{
					field:  "PofpDynamicInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PofpDetailQueryByIdRespValidationError{
					field:  "PofpDynamicInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPofpDynamicInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PofpDetailQueryByIdRespValidationError{
				field:  "PofpDynamicInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PofpDetailQueryByIdRespMultiError(errors)
	}

	return nil
}

// PofpDetailQueryByIdRespMultiError is an error wrapping multiple validation
// errors returned by PofpDetailQueryByIdResp.ValidateAll() if the designated
// constraints aren't met.
type PofpDetailQueryByIdRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PofpDetailQueryByIdRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PofpDetailQueryByIdRespMultiError) AllErrors() []error { return m }

// PofpDetailQueryByIdRespValidationError is the validation error returned by
// PofpDetailQueryByIdResp.Validate if the designated constraints aren't met.
type PofpDetailQueryByIdRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PofpDetailQueryByIdRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PofpDetailQueryByIdRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PofpDetailQueryByIdRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PofpDetailQueryByIdRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PofpDetailQueryByIdRespValidationError) ErrorName() string {
	return "PofpDetailQueryByIdRespValidationError"
}

// Error satisfies the builtin error interface
func (e PofpDetailQueryByIdRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPofpDetailQueryByIdResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PofpDetailQueryByIdRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PofpDetailQueryByIdRespValidationError{}

// Validate checks the field values on PofpFullQueryByIdReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PofpFullQueryByIdReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PofpFullQueryByIdReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PofpFullQueryByIdReqMultiError, or nil if none found.
func (m *PofpFullQueryByIdReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PofpFullQueryByIdReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if len(errors) > 0 {
		return PofpFullQueryByIdReqMultiError(errors)
	}

	return nil
}

// PofpFullQueryByIdReqMultiError is an error wrapping multiple validation
// errors returned by PofpFullQueryByIdReq.ValidateAll() if the designated
// constraints aren't met.
type PofpFullQueryByIdReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PofpFullQueryByIdReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PofpFullQueryByIdReqMultiError) AllErrors() []error { return m }

// PofpFullQueryByIdReqValidationError is the validation error returned by
// PofpFullQueryByIdReq.Validate if the designated constraints aren't met.
type PofpFullQueryByIdReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PofpFullQueryByIdReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PofpFullQueryByIdReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PofpFullQueryByIdReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PofpFullQueryByIdReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PofpFullQueryByIdReqValidationError) ErrorName() string {
	return "PofpFullQueryByIdReqValidationError"
}

// Error satisfies the builtin error interface
func (e PofpFullQueryByIdReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPofpFullQueryByIdReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PofpFullQueryByIdReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PofpFullQueryByIdReqValidationError{}

// Validate checks the field values on PofpFullQueryByIdResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PofpFullQueryByIdResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PofpFullQueryByIdResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PofpFullQueryByIdRespMultiError, or nil if none found.
func (m *PofpFullQueryByIdResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PofpFullQueryByIdResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPofp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PofpFullQueryByIdRespValidationError{
					field:  "Pofp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PofpFullQueryByIdRespValidationError{
					field:  "Pofp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPofp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PofpFullQueryByIdRespValidationError{
				field:  "Pofp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPofpDynamicInfo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PofpFullQueryByIdRespValidationError{
					field:  "PofpDynamicInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PofpFullQueryByIdRespValidationError{
					field:  "PofpDynamicInfo",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPofpDynamicInfo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PofpFullQueryByIdRespValidationError{
				field:  "PofpDynamicInfo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PofpFullQueryByIdRespMultiError(errors)
	}

	return nil
}

// PofpFullQueryByIdRespMultiError is an error wrapping multiple validation
// errors returned by PofpFullQueryByIdResp.ValidateAll() if the designated
// constraints aren't met.
type PofpFullQueryByIdRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PofpFullQueryByIdRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PofpFullQueryByIdRespMultiError) AllErrors() []error { return m }

// PofpFullQueryByIdRespValidationError is the validation error returned by
// PofpFullQueryByIdResp.Validate if the designated constraints aren't met.
type PofpFullQueryByIdRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PofpFullQueryByIdRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PofpFullQueryByIdRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PofpFullQueryByIdRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PofpFullQueryByIdRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PofpFullQueryByIdRespValidationError) ErrorName() string {
	return "PofpFullQueryByIdRespValidationError"
}

// Error satisfies the builtin error interface
func (e PofpFullQueryByIdRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPofpFullQueryByIdResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PofpFullQueryByIdRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PofpFullQueryByIdRespValidationError{}

// Validate checks the field values on PofpInteractionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PofpInteractionReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PofpInteractionReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PofpInteractionReqMultiError, or nil if none found.
func (m *PofpInteractionReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PofpInteractionReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uuid

	if _, ok := InteractionType_name[int32(m.GetIxnType())]; !ok {
		err := PofpInteractionReqValidationError{
			field:  "IxnType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PofpInteractionReqMultiError(errors)
	}

	return nil
}

// PofpInteractionReqMultiError is an error wrapping multiple validation errors
// returned by PofpInteractionReq.ValidateAll() if the designated constraints
// aren't met.
type PofpInteractionReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PofpInteractionReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PofpInteractionReqMultiError) AllErrors() []error { return m }

// PofpInteractionReqValidationError is the validation error returned by
// PofpInteractionReq.Validate if the designated constraints aren't met.
type PofpInteractionReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PofpInteractionReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PofpInteractionReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PofpInteractionReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PofpInteractionReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PofpInteractionReqValidationError) ErrorName() string {
	return "PofpInteractionReqValidationError"
}

// Error satisfies the builtin error interface
func (e PofpInteractionReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPofpInteractionReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PofpInteractionReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PofpInteractionReqValidationError{}

// Validate checks the field values on PofpInteractionResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PofpInteractionResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PofpInteractionResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PofpInteractionRespMultiError, or nil if none found.
func (m *PofpInteractionResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PofpInteractionResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PofpInteractionRespMultiError(errors)
	}

	return nil
}

// PofpInteractionRespMultiError is an error wrapping multiple validation
// errors returned by PofpInteractionResp.ValidateAll() if the designated
// constraints aren't met.
type PofpInteractionRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PofpInteractionRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PofpInteractionRespMultiError) AllErrors() []error { return m }

// PofpInteractionRespValidationError is the validation error returned by
// PofpInteractionResp.Validate if the designated constraints aren't met.
type PofpInteractionRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PofpInteractionRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PofpInteractionRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PofpInteractionRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PofpInteractionRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PofpInteractionRespValidationError) ErrorName() string {
	return "PofpInteractionRespValidationError"
}

// Error satisfies the builtin error interface
func (e PofpInteractionRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPofpInteractionResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PofpInteractionRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PofpInteractionRespValidationError{}

// Validate checks the field values on PofpCommentReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PofpCommentReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PofpCommentReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PofpCommentReqMultiError,
// or nil if none found.
func (m *PofpCommentReq) ValidateAll() error {
	return m.validate(true)
}

func (m *PofpCommentReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PofpCommentReqValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PofpCommentReqValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PofpCommentReqValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PofpCommentReqMultiError(errors)
	}

	return nil
}

// PofpCommentReqMultiError is an error wrapping multiple validation errors
// returned by PofpCommentReq.ValidateAll() if the designated constraints
// aren't met.
type PofpCommentReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PofpCommentReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PofpCommentReqMultiError) AllErrors() []error { return m }

// PofpCommentReqValidationError is the validation error returned by
// PofpCommentReq.Validate if the designated constraints aren't met.
type PofpCommentReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PofpCommentReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PofpCommentReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PofpCommentReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PofpCommentReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PofpCommentReqValidationError) ErrorName() string { return "PofpCommentReqValidationError" }

// Error satisfies the builtin error interface
func (e PofpCommentReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPofpCommentReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PofpCommentReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PofpCommentReqValidationError{}

// Validate checks the field values on PofpCommentResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PofpCommentResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PofpCommentResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PofpCommentRespMultiError, or nil if none found.
func (m *PofpCommentResp) ValidateAll() error {
	return m.validate(true)
}

func (m *PofpCommentResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PofpCommentRespMultiError(errors)
	}

	return nil
}

// PofpCommentRespMultiError is an error wrapping multiple validation errors
// returned by PofpCommentResp.ValidateAll() if the designated constraints
// aren't met.
type PofpCommentRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PofpCommentRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PofpCommentRespMultiError) AllErrors() []error { return m }

// PofpCommentRespValidationError is the validation error returned by
// PofpCommentResp.Validate if the designated constraints aren't met.
type PofpCommentRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PofpCommentRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PofpCommentRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PofpCommentRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PofpCommentRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PofpCommentRespValidationError) ErrorName() string { return "PofpCommentRespValidationError" }

// Error satisfies the builtin error interface
func (e PofpCommentRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPofpCommentResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PofpCommentRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PofpCommentRespValidationError{}
