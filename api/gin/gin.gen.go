// Package apigin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package apigin

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// BoundCoord defines model for BoundCoord.
type BoundCoord struct {
	Ne *PointCoord `json:"ne,omitempty"`
	Sw *PointCoord `json:"sw,omitempty"`
}

// LocationCommonSearchResp defines model for LocationCommonSearchResp.
type LocationCommonSearchResp = map[string]interface{}

// MediaInfo defines model for MediaInfo.
type MediaInfo struct {
	// GetUrl 读取URL
	GetUrl *string `json:"get_url,omitempty"`

	// PutUrl 写入URL
	PutUrl *string `json:"put_url,omitempty"`

	// Type 类型
	Type *int `json:"type,omitempty"`

	// Uuid ID, 可写入
	Uuid *string `json:"uuid,omitempty"`
}

// MediaPutPresignURLBatchGetResp defines model for MediaPutPresignURLBatchGetResp.
type MediaPutPresignURLBatchGetResp struct {
	Media *[]MediaInfo `json:"media,omitempty"`
}

// PetInfo defines model for PetInfo.
type PetInfo struct {
	Avatar    *string `json:"avatar,omitempty"`
	BirthDate *string `json:"birth_date,omitempty"`
	Breed     *string `json:"breed,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	Gender    *uint32 `json:"gender,omitempty"`
	Id        *string `json:"id,omitempty"`
	Name      *string `json:"name,omitempty"`
	Specie    *string `json:"specie,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	Weight    *int32  `json:"weight,omitempty"`
}

// PetInfoReg 宠物注册信息
type PetInfoReg struct {
	// AvatarData base64 data
	AvatarData *string `json:"avatar_data,omitempty"`

	// Name 名字
	Name *string `json:"name,omitempty"`
}

// PofpBaseQueryByBoundReq defines model for PofpBaseQueryByBoundReq.
type PofpBaseQueryByBoundReq struct {
	// Bound 坐标范围
	Bound *BoundCoord `json:"bound,omitempty"`

	// TypeIds 足迹类型id列表
	TypeIds *[]int32 `json:"type_ids,omitempty"`
}

// PofpBaseQueryByBoundResp defines model for PofpBaseQueryByBoundResp.
type PofpBaseQueryByBoundResp struct {
	Pofps *[]PofpInfo `json:"pofps,omitempty"`
}

// PofpCommentInfo 足迹评论
type PofpCommentInfo struct {
	Content    *string `json:"content,omitempty"`
	CreatedAt  *string `json:"created_at,omitempty"`
	ParentUuid *string `json:"parent_uuid,omitempty"`
	UpdatedAt  *string `json:"updated_at,omitempty"`
	Uuid       *string `json:"uuid,omitempty"`
}

// PofpCommentReq defines model for PofpCommentReq.
type PofpCommentReq struct {
	// Comment 足迹评论
	Comment *PofpCommentInfo `json:"comment,omitempty"`
}

// PofpCommentResp defines model for PofpCommentResp.
type PofpCommentResp = map[string]interface{}

// PofpCreateReq 足迹创建
type PofpCreateReq struct {
	Pofp *PofpInfo `json:"pofp,omitempty"`
}

// PofpCreateResp defines model for PofpCreateResp.
type PofpCreateResp struct {
	Pofp *PofpInfo `json:"pofp,omitempty"`
}

// PofpDeleteResp defines model for PofpDeleteResp.
type PofpDeleteResp = map[string]interface{}

// PofpDetailQueryByIdResp defines model for PofpDetailQueryByIdResp.
type PofpDetailQueryByIdResp struct {
	Pofp            *PofpInfo        `json:"pofp,omitempty"`
	PofpDynamicInfo *PofpDynamicInfo `json:"pofp_dynamic_info,omitempty"`
}

// PofpDynamicInfo defines model for PofpDynamicInfo.
type PofpDynamicInfo struct {
	Uuid *string `json:"uuid,omitempty"`
}

// PofpFullQueryByIdResp defines model for PofpFullQueryByIdResp.
type PofpFullQueryByIdResp struct {
	Pofp            *PofpInfo        `json:"pofp,omitempty"`
	PofpDynamicInfo *PofpDynamicInfo `json:"pofp_dynamic_info,omitempty"`
}

// PofpInfo defines model for PofpInfo.
type PofpInfo struct {
	// Address POI 地址, 不可更新
	Address *string `json:"address,omitempty"`

	// CommentsCnt 评论数，只读
	CommentsCnt *int32 `json:"comments_cnt,omitempty"`

	// Content 内容, 可更新
	Content   *string `json:"content,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	LastMark  *string `json:"last_mark,omitempty"`
	LastView  *string `json:"last_view,omitempty"`

	// LikesCnt 喜欢数，只读
	LikesCnt *int32 `json:"likes_cnt,omitempty"`

	// LngLat 足迹位置, 不可更新
	LngLat *PointCoord `json:"lng_lat,omitempty"`

	// MarksCnt 标记数，只读
	MarksCnt *int32 `json:"marks_cnt,omitempty"`

	// Media 媒体信息
	Media *[]MediaInfo `json:"media,omitempty"`

	// Pid 足迹作者, 不可更新
	Pid *string `json:"pid,omitempty"`

	// PoiData POI 详细信息, 不可更新
	PoiData *map[string]string `json:"poi_data,omitempty"`

	// PoiId POI ID, 不可更新
	PoiId *string `json:"poi_id,omitempty"`

	// Title 足迹名称, 可更新
	Title *string `json:"title,omitempty"`

	// TypeId 足迹类型, 不可更新
	TypeId    *uint32 `json:"type_id,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`

	// Uuid 足迹 ID
	Uuid *string `json:"uuid,omitempty"`

	// ViewsCnt 查看数，只读
	ViewsCnt *int32 `json:"views_cnt,omitempty"`
}

// PofpInteractionReq defines model for PofpInteractionReq.
type PofpInteractionReq struct {
	// IxnType 互动类型
	IxnType *int    `json:"ixn_type,omitempty"`
	Uuid    *string `json:"uuid,omitempty"`
}

// PofpInteractionResp defines model for PofpInteractionResp.
type PofpInteractionResp = map[string]interface{}

// PofpTypeInfo 足迹点类型
type PofpTypeInfo struct {
	CoverageRadius *int32  `json:"coverage_radius,omitempty"`
	CreatedAt      *string `json:"created_at,omitempty"`
	Id             *uint32 `json:"id,omitempty"`
	Name           *string `json:"name,omitempty"`
	ThemeColor     *string `json:"theme_color,omitempty"`
	UpdatedAt      *string `json:"updated_at,omitempty"`
}

// PofpTypeListResp defines model for PofpTypeListResp.
type PofpTypeListResp struct {
	PofpTypes *[]PofpTypeInfo `json:"pofp_types,omitempty"`
}

// PofpUpdateReq 足迹更新
type PofpUpdateReq struct {
	Pofp *PofpInfo `json:"pofp,omitempty"`
}

// PofpUpdateResp defines model for PofpUpdateResp.
type PofpUpdateResp = map[string]interface{}

// PointCoord defines model for PointCoord.
type PointCoord struct {
	Lat *float32 `json:"lat,omitempty"`
	Lng *float32 `json:"lng,omitempty"`
}

// UserInfo defines model for UserInfo.
type UserInfo struct {
	Id   *string    `json:"id,omitempty"`
	Pets *[]PetInfo `json:"pets,omitempty"`
}

// WeChatLoginReq 登录请求
type WeChatLoginReq struct {
	WxCode *string `json:"wxCode,omitempty"`
}

// WeChatLoginResp defines model for WeChatLoginResp.
type WeChatLoginResp struct {
	Token    *string   `json:"token,omitempty"`
	UserInfo *UserInfo `json:"user_info,omitempty"`
}

// WeChatRegisterFastReq 快速注册请求
type WeChatRegisterFastReq struct {
	// Pet 宠物注册信息
	Pet    *PetInfoReg `json:"pet,omitempty"`
	WxCode *string     `json:"wx_code,omitempty"`
}

// WeChatRegisterFastResp defines model for WeChatRegisterFastResp.
type WeChatRegisterFastResp struct {
	Token    *string   `json:"token,omitempty"`
	UserInfo *UserInfo `json:"user_info,omitempty"`
}

// BaseServiceLocationCommonSearchParams defines parameters for BaseServiceLocationCommonSearch.
type BaseServiceLocationCommonSearchParams struct {
	Input *string `form:"input,omitempty" json:"input,omitempty"`
}

// BaseServiceMediaPutPresignURLBatchGetParams defines parameters for BaseServiceMediaPutPresignURLBatchGet.
type BaseServiceMediaPutPresignURLBatchGetParams struct {
	MediaType *int   `form:"media_type,omitempty" json:"media_type,omitempty"`
	Count     *int32 `form:"count,omitempty" json:"count,omitempty"`
}

// BaseServicePofpDeleteParams defines parameters for BaseServicePofpDelete.
type BaseServicePofpDeleteParams struct {
	Uuid *string `form:"uuid,omitempty" json:"uuid,omitempty"`
}

// BaseServicePofpDetailQueryByIdParams defines parameters for BaseServicePofpDetailQueryById.
type BaseServicePofpDetailQueryByIdParams struct {
	Uuid *string `form:"uuid,omitempty" json:"uuid,omitempty"`
}

// BaseServicePofpFullQueryByIdParams defines parameters for BaseServicePofpFullQueryById.
type BaseServicePofpFullQueryByIdParams struct {
	Uuid *string `form:"uuid,omitempty" json:"uuid,omitempty"`
}

// BaseServicePofpCreateJSONRequestBody defines body for BaseServicePofpCreate for application/json ContentType.
type BaseServicePofpCreateJSONRequestBody = PofpCreateReq

// BaseServicePofpUpdateJSONRequestBody defines body for BaseServicePofpUpdate for application/json ContentType.
type BaseServicePofpUpdateJSONRequestBody = PofpUpdateReq

// BaseServicePofpBaseQueryByBoundJSONRequestBody defines body for BaseServicePofpBaseQueryByBound for application/json ContentType.
type BaseServicePofpBaseQueryByBoundJSONRequestBody = PofpBaseQueryByBoundReq

// BaseServicePofpCommentJSONRequestBody defines body for BaseServicePofpComment for application/json ContentType.
type BaseServicePofpCommentJSONRequestBody = PofpCommentReq

// BaseServicePofpInteractionJSONRequestBody defines body for BaseServicePofpInteraction for application/json ContentType.
type BaseServicePofpInteractionJSONRequestBody = PofpInteractionReq

// BaseServiceWeChatLoginJSONRequestBody defines body for BaseServiceWeChatLogin for application/json ContentType.
type BaseServiceWeChatLoginJSONRequestBody = WeChatLoginReq

// BaseServiceWeChatRegisterFastJSONRequestBody defines body for BaseServiceWeChatRegisterFast for application/json ContentType.
type BaseServiceWeChatRegisterFastJSONRequestBody = WeChatRegisterFastReq

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// BaseServiceLocationCommonSearch request
	BaseServiceLocationCommonSearch(ctx context.Context, params *BaseServiceLocationCommonSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceMediaPutPresignURLBatchGet request
	BaseServiceMediaPutPresignURLBatchGet(ctx context.Context, params *BaseServiceMediaPutPresignURLBatchGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServicePofpDelete request
	BaseServicePofpDelete(ctx context.Context, params *BaseServicePofpDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServicePofpCreateWithBody request with any body
	BaseServicePofpCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BaseServicePofpCreate(ctx context.Context, body BaseServicePofpCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServicePofpUpdateWithBody request with any body
	BaseServicePofpUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BaseServicePofpUpdate(ctx context.Context, body BaseServicePofpUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServicePofpBaseQueryByBoundWithBody request with any body
	BaseServicePofpBaseQueryByBoundWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BaseServicePofpBaseQueryByBound(ctx context.Context, body BaseServicePofpBaseQueryByBoundJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServicePofpCommentWithBody request with any body
	BaseServicePofpCommentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BaseServicePofpComment(ctx context.Context, body BaseServicePofpCommentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServicePofpDetailQueryById request
	BaseServicePofpDetailQueryById(ctx context.Context, params *BaseServicePofpDetailQueryByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServicePofpFullQueryById request
	BaseServicePofpFullQueryById(ctx context.Context, params *BaseServicePofpFullQueryByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServicePofpInteractionWithBody request with any body
	BaseServicePofpInteractionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BaseServicePofpInteraction(ctx context.Context, body BaseServicePofpInteractionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServicePofpTypeList request
	BaseServicePofpTypeList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceWeChatLoginWithBody request with any body
	BaseServiceWeChatLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BaseServiceWeChatLogin(ctx context.Context, body BaseServiceWeChatLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceWeChatRegisterFastWithBody request with any body
	BaseServiceWeChatRegisterFastWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BaseServiceWeChatRegisterFast(ctx context.Context, body BaseServiceWeChatRegisterFastJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) BaseServiceLocationCommonSearch(ctx context.Context, params *BaseServiceLocationCommonSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceLocationCommonSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceMediaPutPresignURLBatchGet(ctx context.Context, params *BaseServiceMediaPutPresignURLBatchGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceMediaPutPresignURLBatchGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServicePofpDelete(ctx context.Context, params *BaseServicePofpDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServicePofpDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServicePofpCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServicePofpCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServicePofpCreate(ctx context.Context, body BaseServicePofpCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServicePofpCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServicePofpUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServicePofpUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServicePofpUpdate(ctx context.Context, body BaseServicePofpUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServicePofpUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServicePofpBaseQueryByBoundWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServicePofpBaseQueryByBoundRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServicePofpBaseQueryByBound(ctx context.Context, body BaseServicePofpBaseQueryByBoundJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServicePofpBaseQueryByBoundRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServicePofpCommentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServicePofpCommentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServicePofpComment(ctx context.Context, body BaseServicePofpCommentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServicePofpCommentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServicePofpDetailQueryById(ctx context.Context, params *BaseServicePofpDetailQueryByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServicePofpDetailQueryByIdRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServicePofpFullQueryById(ctx context.Context, params *BaseServicePofpFullQueryByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServicePofpFullQueryByIdRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServicePofpInteractionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServicePofpInteractionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServicePofpInteraction(ctx context.Context, body BaseServicePofpInteractionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServicePofpInteractionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServicePofpTypeList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServicePofpTypeListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceWeChatLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceWeChatLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceWeChatLogin(ctx context.Context, body BaseServiceWeChatLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceWeChatLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceWeChatRegisterFastWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceWeChatRegisterFastRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceWeChatRegisterFast(ctx context.Context, body BaseServiceWeChatRegisterFastJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceWeChatRegisterFastRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewBaseServiceLocationCommonSearchRequest generates requests for BaseServiceLocationCommonSearch
func NewBaseServiceLocationCommonSearchRequest(server string, params *BaseServiceLocationCommonSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/location/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Input != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "input", runtime.ParamLocationQuery, *params.Input); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBaseServiceMediaPutPresignURLBatchGetRequest generates requests for BaseServiceMediaPutPresignURLBatchGet
func NewBaseServiceMediaPutPresignURLBatchGetRequest(server string, params *BaseServiceMediaPutPresignURLBatchGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/media/put_presign_url/batch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MediaType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "media_type", runtime.ParamLocationQuery, *params.MediaType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBaseServicePofpDeleteRequest generates requests for BaseServicePofpDelete
func NewBaseServicePofpDeleteRequest(server string, params *BaseServicePofpDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/popf")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Uuid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uuid", runtime.ParamLocationQuery, *params.Uuid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBaseServicePofpCreateRequest calls the generic BaseServicePofpCreate builder with application/json body
func NewBaseServicePofpCreateRequest(server string, body BaseServicePofpCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBaseServicePofpCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewBaseServicePofpCreateRequestWithBody generates requests for BaseServicePofpCreate with any type of body
func NewBaseServicePofpCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/popf")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBaseServicePofpUpdateRequest calls the generic BaseServicePofpUpdate builder with application/json body
func NewBaseServicePofpUpdateRequest(server string, body BaseServicePofpUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBaseServicePofpUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewBaseServicePofpUpdateRequestWithBody generates requests for BaseServicePofpUpdate with any type of body
func NewBaseServicePofpUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/popf")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBaseServicePofpBaseQueryByBoundRequest calls the generic BaseServicePofpBaseQueryByBound builder with application/json body
func NewBaseServicePofpBaseQueryByBoundRequest(server string, body BaseServicePofpBaseQueryByBoundJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBaseServicePofpBaseQueryByBoundRequestWithBody(server, "application/json", bodyReader)
}

// NewBaseServicePofpBaseQueryByBoundRequestWithBody generates requests for BaseServicePofpBaseQueryByBound with any type of body
func NewBaseServicePofpBaseQueryByBoundRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/popf/base_query_by_bound")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBaseServicePofpCommentRequest calls the generic BaseServicePofpComment builder with application/json body
func NewBaseServicePofpCommentRequest(server string, body BaseServicePofpCommentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBaseServicePofpCommentRequestWithBody(server, "application/json", bodyReader)
}

// NewBaseServicePofpCommentRequestWithBody generates requests for BaseServicePofpComment with any type of body
func NewBaseServicePofpCommentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/popf/comment")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBaseServicePofpDetailQueryByIdRequest generates requests for BaseServicePofpDetailQueryById
func NewBaseServicePofpDetailQueryByIdRequest(server string, params *BaseServicePofpDetailQueryByIdParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/popf/detail_query_by_id")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Uuid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uuid", runtime.ParamLocationQuery, *params.Uuid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBaseServicePofpFullQueryByIdRequest generates requests for BaseServicePofpFullQueryById
func NewBaseServicePofpFullQueryByIdRequest(server string, params *BaseServicePofpFullQueryByIdParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/popf/full_query_by_id")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Uuid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uuid", runtime.ParamLocationQuery, *params.Uuid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBaseServicePofpInteractionRequest calls the generic BaseServicePofpInteraction builder with application/json body
func NewBaseServicePofpInteractionRequest(server string, body BaseServicePofpInteractionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBaseServicePofpInteractionRequestWithBody(server, "application/json", bodyReader)
}

// NewBaseServicePofpInteractionRequestWithBody generates requests for BaseServicePofpInteraction with any type of body
func NewBaseServicePofpInteractionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/popf/interaction")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBaseServicePofpTypeListRequest generates requests for BaseServicePofpTypeList
func NewBaseServicePofpTypeListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/popf/type")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBaseServiceWeChatLoginRequest calls the generic BaseServiceWeChatLogin builder with application/json body
func NewBaseServiceWeChatLoginRequest(server string, body BaseServiceWeChatLoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBaseServiceWeChatLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewBaseServiceWeChatLoginRequestWithBody generates requests for BaseServiceWeChatLogin with any type of body
func NewBaseServiceWeChatLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/user/wx/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBaseServiceWeChatRegisterFastRequest calls the generic BaseServiceWeChatRegisterFast builder with application/json body
func NewBaseServiceWeChatRegisterFastRequest(server string, body BaseServiceWeChatRegisterFastJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBaseServiceWeChatRegisterFastRequestWithBody(server, "application/json", bodyReader)
}

// NewBaseServiceWeChatRegisterFastRequestWithBody generates requests for BaseServiceWeChatRegisterFast with any type of body
func NewBaseServiceWeChatRegisterFastRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/user/wx/reg/fast")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// BaseServiceLocationCommonSearchWithResponse request
	BaseServiceLocationCommonSearchWithResponse(ctx context.Context, params *BaseServiceLocationCommonSearchParams, reqEditors ...RequestEditorFn) (*BaseServiceLocationCommonSearchResponse, error)

	// BaseServiceMediaPutPresignURLBatchGetWithResponse request
	BaseServiceMediaPutPresignURLBatchGetWithResponse(ctx context.Context, params *BaseServiceMediaPutPresignURLBatchGetParams, reqEditors ...RequestEditorFn) (*BaseServiceMediaPutPresignURLBatchGetResponse, error)

	// BaseServicePofpDeleteWithResponse request
	BaseServicePofpDeleteWithResponse(ctx context.Context, params *BaseServicePofpDeleteParams, reqEditors ...RequestEditorFn) (*BaseServicePofpDeleteResponse, error)

	// BaseServicePofpCreateWithBodyWithResponse request with any body
	BaseServicePofpCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServicePofpCreateResponse, error)

	BaseServicePofpCreateWithResponse(ctx context.Context, body BaseServicePofpCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServicePofpCreateResponse, error)

	// BaseServicePofpUpdateWithBodyWithResponse request with any body
	BaseServicePofpUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServicePofpUpdateResponse, error)

	BaseServicePofpUpdateWithResponse(ctx context.Context, body BaseServicePofpUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServicePofpUpdateResponse, error)

	// BaseServicePofpBaseQueryByBoundWithBodyWithResponse request with any body
	BaseServicePofpBaseQueryByBoundWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServicePofpBaseQueryByBoundResponse, error)

	BaseServicePofpBaseQueryByBoundWithResponse(ctx context.Context, body BaseServicePofpBaseQueryByBoundJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServicePofpBaseQueryByBoundResponse, error)

	// BaseServicePofpCommentWithBodyWithResponse request with any body
	BaseServicePofpCommentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServicePofpCommentResponse, error)

	BaseServicePofpCommentWithResponse(ctx context.Context, body BaseServicePofpCommentJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServicePofpCommentResponse, error)

	// BaseServicePofpDetailQueryByIdWithResponse request
	BaseServicePofpDetailQueryByIdWithResponse(ctx context.Context, params *BaseServicePofpDetailQueryByIdParams, reqEditors ...RequestEditorFn) (*BaseServicePofpDetailQueryByIdResponse, error)

	// BaseServicePofpFullQueryByIdWithResponse request
	BaseServicePofpFullQueryByIdWithResponse(ctx context.Context, params *BaseServicePofpFullQueryByIdParams, reqEditors ...RequestEditorFn) (*BaseServicePofpFullQueryByIdResponse, error)

	// BaseServicePofpInteractionWithBodyWithResponse request with any body
	BaseServicePofpInteractionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServicePofpInteractionResponse, error)

	BaseServicePofpInteractionWithResponse(ctx context.Context, body BaseServicePofpInteractionJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServicePofpInteractionResponse, error)

	// BaseServicePofpTypeListWithResponse request
	BaseServicePofpTypeListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BaseServicePofpTypeListResponse, error)

	// BaseServiceWeChatLoginWithBodyWithResponse request with any body
	BaseServiceWeChatLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceWeChatLoginResponse, error)

	BaseServiceWeChatLoginWithResponse(ctx context.Context, body BaseServiceWeChatLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceWeChatLoginResponse, error)

	// BaseServiceWeChatRegisterFastWithBodyWithResponse request with any body
	BaseServiceWeChatRegisterFastWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceWeChatRegisterFastResponse, error)

	BaseServiceWeChatRegisterFastWithResponse(ctx context.Context, body BaseServiceWeChatRegisterFastJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceWeChatRegisterFastResponse, error)
}

type BaseServiceLocationCommonSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LocationCommonSearchResp
}

// Status returns HTTPResponse.Status
func (r BaseServiceLocationCommonSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceLocationCommonSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceMediaPutPresignURLBatchGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MediaPutPresignURLBatchGetResp
}

// Status returns HTTPResponse.Status
func (r BaseServiceMediaPutPresignURLBatchGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceMediaPutPresignURLBatchGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServicePofpDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PofpDeleteResp
}

// Status returns HTTPResponse.Status
func (r BaseServicePofpDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServicePofpDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServicePofpCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PofpCreateResp
}

// Status returns HTTPResponse.Status
func (r BaseServicePofpCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServicePofpCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServicePofpUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PofpUpdateResp
}

// Status returns HTTPResponse.Status
func (r BaseServicePofpUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServicePofpUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServicePofpBaseQueryByBoundResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PofpBaseQueryByBoundResp
}

// Status returns HTTPResponse.Status
func (r BaseServicePofpBaseQueryByBoundResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServicePofpBaseQueryByBoundResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServicePofpCommentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PofpCommentResp
}

// Status returns HTTPResponse.Status
func (r BaseServicePofpCommentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServicePofpCommentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServicePofpDetailQueryByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PofpDetailQueryByIdResp
}

// Status returns HTTPResponse.Status
func (r BaseServicePofpDetailQueryByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServicePofpDetailQueryByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServicePofpFullQueryByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PofpFullQueryByIdResp
}

// Status returns HTTPResponse.Status
func (r BaseServicePofpFullQueryByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServicePofpFullQueryByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServicePofpInteractionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PofpInteractionResp
}

// Status returns HTTPResponse.Status
func (r BaseServicePofpInteractionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServicePofpInteractionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServicePofpTypeListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PofpTypeListResp
}

// Status returns HTTPResponse.Status
func (r BaseServicePofpTypeListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServicePofpTypeListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceWeChatLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WeChatLoginResp
}

// Status returns HTTPResponse.Status
func (r BaseServiceWeChatLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceWeChatLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceWeChatRegisterFastResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WeChatRegisterFastResp
}

// Status returns HTTPResponse.Status
func (r BaseServiceWeChatRegisterFastResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceWeChatRegisterFastResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// BaseServiceLocationCommonSearchWithResponse request returning *BaseServiceLocationCommonSearchResponse
func (c *ClientWithResponses) BaseServiceLocationCommonSearchWithResponse(ctx context.Context, params *BaseServiceLocationCommonSearchParams, reqEditors ...RequestEditorFn) (*BaseServiceLocationCommonSearchResponse, error) {
	rsp, err := c.BaseServiceLocationCommonSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceLocationCommonSearchResponse(rsp)
}

// BaseServiceMediaPutPresignURLBatchGetWithResponse request returning *BaseServiceMediaPutPresignURLBatchGetResponse
func (c *ClientWithResponses) BaseServiceMediaPutPresignURLBatchGetWithResponse(ctx context.Context, params *BaseServiceMediaPutPresignURLBatchGetParams, reqEditors ...RequestEditorFn) (*BaseServiceMediaPutPresignURLBatchGetResponse, error) {
	rsp, err := c.BaseServiceMediaPutPresignURLBatchGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceMediaPutPresignURLBatchGetResponse(rsp)
}

// BaseServicePofpDeleteWithResponse request returning *BaseServicePofpDeleteResponse
func (c *ClientWithResponses) BaseServicePofpDeleteWithResponse(ctx context.Context, params *BaseServicePofpDeleteParams, reqEditors ...RequestEditorFn) (*BaseServicePofpDeleteResponse, error) {
	rsp, err := c.BaseServicePofpDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServicePofpDeleteResponse(rsp)
}

// BaseServicePofpCreateWithBodyWithResponse request with arbitrary body returning *BaseServicePofpCreateResponse
func (c *ClientWithResponses) BaseServicePofpCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServicePofpCreateResponse, error) {
	rsp, err := c.BaseServicePofpCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServicePofpCreateResponse(rsp)
}

func (c *ClientWithResponses) BaseServicePofpCreateWithResponse(ctx context.Context, body BaseServicePofpCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServicePofpCreateResponse, error) {
	rsp, err := c.BaseServicePofpCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServicePofpCreateResponse(rsp)
}

// BaseServicePofpUpdateWithBodyWithResponse request with arbitrary body returning *BaseServicePofpUpdateResponse
func (c *ClientWithResponses) BaseServicePofpUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServicePofpUpdateResponse, error) {
	rsp, err := c.BaseServicePofpUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServicePofpUpdateResponse(rsp)
}

func (c *ClientWithResponses) BaseServicePofpUpdateWithResponse(ctx context.Context, body BaseServicePofpUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServicePofpUpdateResponse, error) {
	rsp, err := c.BaseServicePofpUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServicePofpUpdateResponse(rsp)
}

// BaseServicePofpBaseQueryByBoundWithBodyWithResponse request with arbitrary body returning *BaseServicePofpBaseQueryByBoundResponse
func (c *ClientWithResponses) BaseServicePofpBaseQueryByBoundWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServicePofpBaseQueryByBoundResponse, error) {
	rsp, err := c.BaseServicePofpBaseQueryByBoundWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServicePofpBaseQueryByBoundResponse(rsp)
}

func (c *ClientWithResponses) BaseServicePofpBaseQueryByBoundWithResponse(ctx context.Context, body BaseServicePofpBaseQueryByBoundJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServicePofpBaseQueryByBoundResponse, error) {
	rsp, err := c.BaseServicePofpBaseQueryByBound(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServicePofpBaseQueryByBoundResponse(rsp)
}

// BaseServicePofpCommentWithBodyWithResponse request with arbitrary body returning *BaseServicePofpCommentResponse
func (c *ClientWithResponses) BaseServicePofpCommentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServicePofpCommentResponse, error) {
	rsp, err := c.BaseServicePofpCommentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServicePofpCommentResponse(rsp)
}

func (c *ClientWithResponses) BaseServicePofpCommentWithResponse(ctx context.Context, body BaseServicePofpCommentJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServicePofpCommentResponse, error) {
	rsp, err := c.BaseServicePofpComment(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServicePofpCommentResponse(rsp)
}

// BaseServicePofpDetailQueryByIdWithResponse request returning *BaseServicePofpDetailQueryByIdResponse
func (c *ClientWithResponses) BaseServicePofpDetailQueryByIdWithResponse(ctx context.Context, params *BaseServicePofpDetailQueryByIdParams, reqEditors ...RequestEditorFn) (*BaseServicePofpDetailQueryByIdResponse, error) {
	rsp, err := c.BaseServicePofpDetailQueryById(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServicePofpDetailQueryByIdResponse(rsp)
}

// BaseServicePofpFullQueryByIdWithResponse request returning *BaseServicePofpFullQueryByIdResponse
func (c *ClientWithResponses) BaseServicePofpFullQueryByIdWithResponse(ctx context.Context, params *BaseServicePofpFullQueryByIdParams, reqEditors ...RequestEditorFn) (*BaseServicePofpFullQueryByIdResponse, error) {
	rsp, err := c.BaseServicePofpFullQueryById(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServicePofpFullQueryByIdResponse(rsp)
}

// BaseServicePofpInteractionWithBodyWithResponse request with arbitrary body returning *BaseServicePofpInteractionResponse
func (c *ClientWithResponses) BaseServicePofpInteractionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServicePofpInteractionResponse, error) {
	rsp, err := c.BaseServicePofpInteractionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServicePofpInteractionResponse(rsp)
}

func (c *ClientWithResponses) BaseServicePofpInteractionWithResponse(ctx context.Context, body BaseServicePofpInteractionJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServicePofpInteractionResponse, error) {
	rsp, err := c.BaseServicePofpInteraction(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServicePofpInteractionResponse(rsp)
}

// BaseServicePofpTypeListWithResponse request returning *BaseServicePofpTypeListResponse
func (c *ClientWithResponses) BaseServicePofpTypeListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BaseServicePofpTypeListResponse, error) {
	rsp, err := c.BaseServicePofpTypeList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServicePofpTypeListResponse(rsp)
}

// BaseServiceWeChatLoginWithBodyWithResponse request with arbitrary body returning *BaseServiceWeChatLoginResponse
func (c *ClientWithResponses) BaseServiceWeChatLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceWeChatLoginResponse, error) {
	rsp, err := c.BaseServiceWeChatLoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceWeChatLoginResponse(rsp)
}

func (c *ClientWithResponses) BaseServiceWeChatLoginWithResponse(ctx context.Context, body BaseServiceWeChatLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceWeChatLoginResponse, error) {
	rsp, err := c.BaseServiceWeChatLogin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceWeChatLoginResponse(rsp)
}

// BaseServiceWeChatRegisterFastWithBodyWithResponse request with arbitrary body returning *BaseServiceWeChatRegisterFastResponse
func (c *ClientWithResponses) BaseServiceWeChatRegisterFastWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceWeChatRegisterFastResponse, error) {
	rsp, err := c.BaseServiceWeChatRegisterFastWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceWeChatRegisterFastResponse(rsp)
}

func (c *ClientWithResponses) BaseServiceWeChatRegisterFastWithResponse(ctx context.Context, body BaseServiceWeChatRegisterFastJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceWeChatRegisterFastResponse, error) {
	rsp, err := c.BaseServiceWeChatRegisterFast(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceWeChatRegisterFastResponse(rsp)
}

// ParseBaseServiceLocationCommonSearchResponse parses an HTTP response from a BaseServiceLocationCommonSearchWithResponse call
func ParseBaseServiceLocationCommonSearchResponse(rsp *http.Response) (*BaseServiceLocationCommonSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceLocationCommonSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LocationCommonSearchResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceMediaPutPresignURLBatchGetResponse parses an HTTP response from a BaseServiceMediaPutPresignURLBatchGetWithResponse call
func ParseBaseServiceMediaPutPresignURLBatchGetResponse(rsp *http.Response) (*BaseServiceMediaPutPresignURLBatchGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceMediaPutPresignURLBatchGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MediaPutPresignURLBatchGetResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServicePofpDeleteResponse parses an HTTP response from a BaseServicePofpDeleteWithResponse call
func ParseBaseServicePofpDeleteResponse(rsp *http.Response) (*BaseServicePofpDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServicePofpDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PofpDeleteResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServicePofpCreateResponse parses an HTTP response from a BaseServicePofpCreateWithResponse call
func ParseBaseServicePofpCreateResponse(rsp *http.Response) (*BaseServicePofpCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServicePofpCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PofpCreateResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServicePofpUpdateResponse parses an HTTP response from a BaseServicePofpUpdateWithResponse call
func ParseBaseServicePofpUpdateResponse(rsp *http.Response) (*BaseServicePofpUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServicePofpUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PofpUpdateResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServicePofpBaseQueryByBoundResponse parses an HTTP response from a BaseServicePofpBaseQueryByBoundWithResponse call
func ParseBaseServicePofpBaseQueryByBoundResponse(rsp *http.Response) (*BaseServicePofpBaseQueryByBoundResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServicePofpBaseQueryByBoundResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PofpBaseQueryByBoundResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServicePofpCommentResponse parses an HTTP response from a BaseServicePofpCommentWithResponse call
func ParseBaseServicePofpCommentResponse(rsp *http.Response) (*BaseServicePofpCommentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServicePofpCommentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PofpCommentResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServicePofpDetailQueryByIdResponse parses an HTTP response from a BaseServicePofpDetailQueryByIdWithResponse call
func ParseBaseServicePofpDetailQueryByIdResponse(rsp *http.Response) (*BaseServicePofpDetailQueryByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServicePofpDetailQueryByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PofpDetailQueryByIdResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServicePofpFullQueryByIdResponse parses an HTTP response from a BaseServicePofpFullQueryByIdWithResponse call
func ParseBaseServicePofpFullQueryByIdResponse(rsp *http.Response) (*BaseServicePofpFullQueryByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServicePofpFullQueryByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PofpFullQueryByIdResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServicePofpInteractionResponse parses an HTTP response from a BaseServicePofpInteractionWithResponse call
func ParseBaseServicePofpInteractionResponse(rsp *http.Response) (*BaseServicePofpInteractionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServicePofpInteractionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PofpInteractionResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServicePofpTypeListResponse parses an HTTP response from a BaseServicePofpTypeListWithResponse call
func ParseBaseServicePofpTypeListResponse(rsp *http.Response) (*BaseServicePofpTypeListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServicePofpTypeListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PofpTypeListResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceWeChatLoginResponse parses an HTTP response from a BaseServiceWeChatLoginWithResponse call
func ParseBaseServiceWeChatLoginResponse(rsp *http.Response) (*BaseServiceWeChatLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceWeChatLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WeChatLoginResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceWeChatRegisterFastResponse parses an HTTP response from a BaseServiceWeChatRegisterFastWithResponse call
func ParseBaseServiceWeChatRegisterFastResponse(rsp *http.Response) (*BaseServiceWeChatRegisterFastResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceWeChatRegisterFastResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WeChatRegisterFastResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /v1/location/search)
	BaseServiceLocationCommonSearch(c *gin.Context, params BaseServiceLocationCommonSearchParams)

	// (GET /v1/media/put_presign_url/batch)
	BaseServiceMediaPutPresignURLBatchGet(c *gin.Context, params BaseServiceMediaPutPresignURLBatchGetParams)

	// (DELETE /v1/popf)
	BaseServicePofpDelete(c *gin.Context, params BaseServicePofpDeleteParams)

	// (POST /v1/popf)
	BaseServicePofpCreate(c *gin.Context)

	// (PUT /v1/popf)
	BaseServicePofpUpdate(c *gin.Context)

	// (POST /v1/popf/base_query_by_bound)
	BaseServicePofpBaseQueryByBound(c *gin.Context)

	// (POST /v1/popf/comment)
	BaseServicePofpComment(c *gin.Context)

	// (GET /v1/popf/detail_query_by_id)
	BaseServicePofpDetailQueryById(c *gin.Context, params BaseServicePofpDetailQueryByIdParams)

	// (GET /v1/popf/full_query_by_id)
	BaseServicePofpFullQueryById(c *gin.Context, params BaseServicePofpFullQueryByIdParams)

	// (POST /v1/popf/interaction)
	BaseServicePofpInteraction(c *gin.Context)

	// (GET /v1/popf/type)
	BaseServicePofpTypeList(c *gin.Context)

	// (POST /v1/user/wx/login)
	BaseServiceWeChatLogin(c *gin.Context)

	// (POST /v1/user/wx/reg/fast)
	BaseServiceWeChatRegisterFast(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// BaseServiceLocationCommonSearch operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceLocationCommonSearch(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params BaseServiceLocationCommonSearchParams

	// ------------- Optional query parameter "input" -------------

	err = runtime.BindQueryParameter("form", true, false, "input", c.Request.URL.Query(), &params.Input)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter input: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceLocationCommonSearch(c, params)
}

// BaseServiceMediaPutPresignURLBatchGet operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceMediaPutPresignURLBatchGet(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params BaseServiceMediaPutPresignURLBatchGetParams

	// ------------- Optional query parameter "media_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "media_type", c.Request.URL.Query(), &params.MediaType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter media_type: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", c.Request.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter count: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceMediaPutPresignURLBatchGet(c, params)
}

// BaseServicePofpDelete operation middleware
func (siw *ServerInterfaceWrapper) BaseServicePofpDelete(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params BaseServicePofpDeleteParams

	// ------------- Optional query parameter "uuid" -------------

	err = runtime.BindQueryParameter("form", true, false, "uuid", c.Request.URL.Query(), &params.Uuid)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter uuid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServicePofpDelete(c, params)
}

// BaseServicePofpCreate operation middleware
func (siw *ServerInterfaceWrapper) BaseServicePofpCreate(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServicePofpCreate(c)
}

// BaseServicePofpUpdate operation middleware
func (siw *ServerInterfaceWrapper) BaseServicePofpUpdate(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServicePofpUpdate(c)
}

// BaseServicePofpBaseQueryByBound operation middleware
func (siw *ServerInterfaceWrapper) BaseServicePofpBaseQueryByBound(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServicePofpBaseQueryByBound(c)
}

// BaseServicePofpComment operation middleware
func (siw *ServerInterfaceWrapper) BaseServicePofpComment(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServicePofpComment(c)
}

// BaseServicePofpDetailQueryById operation middleware
func (siw *ServerInterfaceWrapper) BaseServicePofpDetailQueryById(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params BaseServicePofpDetailQueryByIdParams

	// ------------- Optional query parameter "uuid" -------------

	err = runtime.BindQueryParameter("form", true, false, "uuid", c.Request.URL.Query(), &params.Uuid)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter uuid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServicePofpDetailQueryById(c, params)
}

// BaseServicePofpFullQueryById operation middleware
func (siw *ServerInterfaceWrapper) BaseServicePofpFullQueryById(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params BaseServicePofpFullQueryByIdParams

	// ------------- Optional query parameter "uuid" -------------

	err = runtime.BindQueryParameter("form", true, false, "uuid", c.Request.URL.Query(), &params.Uuid)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter uuid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServicePofpFullQueryById(c, params)
}

// BaseServicePofpInteraction operation middleware
func (siw *ServerInterfaceWrapper) BaseServicePofpInteraction(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServicePofpInteraction(c)
}

// BaseServicePofpTypeList operation middleware
func (siw *ServerInterfaceWrapper) BaseServicePofpTypeList(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServicePofpTypeList(c)
}

// BaseServiceWeChatLogin operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceWeChatLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceWeChatLogin(c)
}

// BaseServiceWeChatRegisterFast operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceWeChatRegisterFast(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceWeChatRegisterFast(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/v1/location/search", wrapper.BaseServiceLocationCommonSearch)
	router.GET(options.BaseURL+"/v1/media/put_presign_url/batch", wrapper.BaseServiceMediaPutPresignURLBatchGet)
	router.DELETE(options.BaseURL+"/v1/popf", wrapper.BaseServicePofpDelete)
	router.POST(options.BaseURL+"/v1/popf", wrapper.BaseServicePofpCreate)
	router.PUT(options.BaseURL+"/v1/popf", wrapper.BaseServicePofpUpdate)
	router.POST(options.BaseURL+"/v1/popf/base_query_by_bound", wrapper.BaseServicePofpBaseQueryByBound)
	router.POST(options.BaseURL+"/v1/popf/comment", wrapper.BaseServicePofpComment)
	router.GET(options.BaseURL+"/v1/popf/detail_query_by_id", wrapper.BaseServicePofpDetailQueryById)
	router.GET(options.BaseURL+"/v1/popf/full_query_by_id", wrapper.BaseServicePofpFullQueryById)
	router.POST(options.BaseURL+"/v1/popf/interaction", wrapper.BaseServicePofpInteraction)
	router.GET(options.BaseURL+"/v1/popf/type", wrapper.BaseServicePofpTypeList)
	router.POST(options.BaseURL+"/v1/user/wx/login", wrapper.BaseServiceWeChatLogin)
	router.POST(options.BaseURL+"/v1/user/wx/reg/fast", wrapper.BaseServiceWeChatRegisterFast)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RZ4W/bxhX/V4TbPgqW2wz74E+tY3Qw5iGeu2Af1oA4kU/SNdSRuTva0QIDbtakSWNX",
	"RrekSOMucba0XrdKDpqtddzU/4woyZ/2LwxHSiRFHinKqmbkS6D4eHfv/X7vvXv3uxtIt+q2RYEKjhZu",
	"IK7XoI69n4uWQ42LlsUM+T+bWTYwQcAboyD//TmDClpAPyuFa5QGC5RWLUKFP3uziPjGJN9vFpFo2IAW",
	"kFV+H3QhV1ixdCyIRS9a9bpF3wXM9NoacFuum/j4N2AQvEwrVtLyKgjNYab8aQDXGbHlqmgB9dvHbvPB",
	"5bUVFOzOBSO0Khe0nZRZ7u2H7q1nKbP8P8Sn9J4fu3+9h4qoYrE6FmgBAXXq4XxCBVSByQUchxjJBZaX",
	"igW32fa3Tu6rQs8DZNURqww4qdLLayuLWOi1X4EYYjiKUl1+L38QAXU+jrsQ7nBvzBhuqI1ZBaHmBq9j",
	"gVmE0RDKMmGiphlYgHqYARjKEZ0BFmBoEmjFcBWoAd6WARsOoeLCm0o+iHoPiutqs7gNOlEPObaRZdcG",
	"kGpNjNiVZlYGxGtQVYRs60nv7j+63x64t7c7J/vdD9qoqCRCwo2T88uYwy9/UfAGI0FcbgjgqiwYohOz",
	"YnfH/eazfNG7alXsRczhtw6wxmLDK0xrcC0ZQGU54jlgmpcqaOEP2XEbqXCbV4pxA7/Y7T75qL/9J/fR",
	"i2Fca8Tgisrxn2/7J0d+WhPDvfNZf/8AFcPUGctgrqRRYqDKXduq2Dx37sp1J0hdq2LLCgw0SGEVFv32",
	"h/3Wy0RY6RYVQMVZ8tTGDKjQhgVx0nRKmTfGRWWM6f5YHlyjSI3fK+Us877xwBmYowLcvfPIPU4CLkMh",
	"fwCkWjjYPS3Ypt9hCUwId0j5RGBiDqJ/2fgprCl632tGg+I60TUyCOhxk5f878d4FPkoYeaE0fiOY74+",
	"jqec7IbBgCtq5+ql5YK7d+h+sVUsdL7fcZvt7qMX3QeHqoNkkHlc0/30i/dvsuZ07x/+94dtt/l1v30c",
	"PZ3SS2+kKMVbu1tu68hrtTJsyi5bJuZCq2N2NX10ncCGepRchRRf3Qd73X89ndxXk1Y10zc13wkZ7coT",
	"J6RfejqvdnqvWjH2NotIep1ivjxXW4eTmx90pTE0vv608+rPQSszbctaRLaq6x56u9ffujU+Vm2LBO0T",
	"NgwiF8Hm6khSJCYlU6Pf/rJ3fNt3LW3TMP/kpirT5Ury0jDOaEGECalHzO5O76vDMekwaJKye6SEIXla",
	"75wHvGrXwvKSylaZeGkB+vhZb+/epAGaXhIFMKzLtZUdBblONfVVsfPyU/fjgzNcGHOeLCOWZRy+v2vY",
	"kNXv9W4eBUbGu6V1YLgKGsMGcfK2w2Oqqu9jnqhJvZmJGtRB0y3TYpP3k2lwSphWCBfpZ7TH82TNeYB9",
	"7gb9smd7RrcYJN4sernh7qnhFJwoCYQGR1NAbMW0sAh5pU69HJxjeT5UmXiZA1P3KCk3CxvEBIQNpI1c",
	"XP0eLtawWLGqhCrJ6j08dl/d77e/6z6/mSBr4/pFy4CcwTmykyo2hXUVqDoROLBcHWIAbIYFa1AlXAB7",
	"B3OhdNk9+efp1mNfm0hx3AaRk4U18KWU65o+KVSjhp4DYvJPRFlx3+KgO4yIxhJUCPUaCz6HbXIVGoVF",
	"wAzY246ovUcLbxFaqAE2gMn/yEpYkCMWI3/0lFQUHPhoEXN4F9g60aHw9uoyKqJ1YNzfb35ufu4N6Zdl",
	"A8U2QQvowtz83AVJDBY1D4zS+hslcyDQlrinzQ601qT9p1uf9/5y4O4d9m4edXf3ei+eIm9t5s1eNkbN",
	"Ucm+3s4M10EA414LS+TC1+QVCQ1rPiLUdmRN8NFWsX+liBhw26Lcp/TN+fmYSoFt2yQDt97nFg0V8nHc",
	"psrVHrOjiFz6tR8BuCq9iXqPrsgBia7X+pZsR2i2L+FqDjNLZSwykO7ePTr9qNn/5Du3+cBtH/Wf73e+",
	"/7jzw5PTpx/2vvnR3d3xZetU7NNF43wMeDb7nU2UhnFdzGZRvZxuOVSoV0rtyGZJ8RhN/YxE25Zd8ak0",
	"Qah00ztPTh/+PWi7svgLlZV8fHnN43klTEwGmhQ9efnhqpuyJ4zlhsuXupD085oDXCxaRuMndTFU8jwP",
	"5TaEgYEWBHNgc8b4RoS8M+DrqEqM10nmhtfvDWcIb9j6ngO8kc53iuQvlTEHzUtNrdzQgicNdXx3t+/2",
	"bn3lv1J0Hz/rt58ObuuPX/b2twJNJJOV+LPCDPlRveKcA1PKh5RpOIs8Cqh5ClIkeBrJrkOD9WZYiMIn",
	"jvOoRJFHj2lwN7xXgTBb/DucuhvyMoUY0Szptbb6X36QL0tiDxCvzZGafDaZBvCKY54d7tP9f7ut7e79",
	"F/kQH3n3eE3wTr7VTIM2CfW5HKXFVwvHoRrR/GZYXmKa5zmUmLi2OQ0PQ3VWGen+g/9IWYnIoZlcDAVD",
	"NGMsRoTJMwLhcGCljesl06qSjGh0f2x1Tvbdw2bv4J77sulrWN1PnrnNv71HC4F4EZEqskCKCFczCtaY",
	"CPd/DtS4MDclNwyqpQrmIjc9vt42IMlT3Xyq3NbnnaO745mJ6mQzJSiuHJ4LTwlVcGK6wpEbwyMr+sXm",
	"lc3/BQAA//9VNOrEkSkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
