// Package apigin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package apigin

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// BoundCoord defines model for BoundCoord.
type BoundCoord struct {
	Ne *PointCoord `json:"ne,omitempty"`
	Sw *PointCoord `json:"sw,omitempty"`
}

// ChannelBaseQueryByBoundReq defines model for ChannelBaseQueryByBoundReq.
type ChannelBaseQueryByBoundReq struct {
	// Bound 坐标范围
	Bound *BoundCoord `json:"bound,omitempty"`

	// TypeIds 足迹类型id列表
	TypeIds *[]int32 `json:"type_ids,omitempty"`
}

// ChannelBaseQueryByBoundRes defines model for ChannelBaseQueryByBoundRes.
type ChannelBaseQueryByBoundRes struct {
	Channels *[]ChannelInfo `json:"channels,omitempty"`
}

// ChannelCommentReq defines model for ChannelCommentReq.
type ChannelCommentReq struct {
	// Comment 足迹评论
	Comment *PostInfo `json:"comment,omitempty"`
}

// ChannelCommentRes defines model for ChannelCommentRes.
type ChannelCommentRes = map[string]interface{}

// ChannelCreateReq 足迹创建
type ChannelCreateReq struct {
	// Channel 频道信息
	Channel *ChannelInfo `json:"channel,omitempty"`
}

// ChannelCreateRes defines model for ChannelCreateRes.
type ChannelCreateRes struct {
	// Channel 频道信息
	Channel *ChannelInfo `json:"channel,omitempty"`
}

// ChannelDeleteRes defines model for ChannelDeleteRes.
type ChannelDeleteRes = map[string]interface{}

// ChannelDetailQueryByIdRes defines model for ChannelDetailQueryByIdRes.
type ChannelDetailQueryByIdRes struct {
	// Channel 频道信息
	Channel *ChannelInfo `json:"channel,omitempty"`
}

// ChannelFullQueryByIdRes defines model for ChannelFullQueryByIdRes.
type ChannelFullQueryByIdRes struct {
	// Channel 频道信息
	Channel *ChannelInfo `json:"channel,omitempty"`
}

// ChannelInfo 频道信息
type ChannelInfo struct {
	// Avatar 头像
	Avatar    *MediaInfo `json:"avatar,omitempty"`
	CreatedAt *string    `json:"created_at,omitempty"`

	// Intro 简介, 可更新
	Intro    *string       `json:"intro,omitempty"`
	Location *LocationInfo `json:"location,omitempty"`

	// Stats 动态状态信息，只读
	Stats *ChannelStats `json:"stats,omitempty"`

	// Title 足迹名称, 可更新
	Title *string `json:"title,omitempty"`

	// TypeId 足迹频道类型, 不可更新
	TypeId *uint32 `json:"type_id,omitempty"`

	// Uid 足迹作者, 不可更新
	Uid       *string `json:"uid,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`

	// Uuid 足迹频道 ID
	Uuid *string `json:"uuid,omitempty"`
}

// ChannelInteractionReq defines model for ChannelInteractionReq.
type ChannelInteractionReq struct {
	// IxnEvent 互动类型
	IxnEvent *int    `json:"ixn_event,omitempty"`
	IxnState *int    `json:"ixn_state,omitempty"`
	Uuid     *string `json:"uuid,omitempty"`
}

// ChannelInteractionRes defines model for ChannelInteractionRes.
type ChannelInteractionRes = map[string]interface{}

// ChannelStats defines model for ChannelStats.
type ChannelStats struct {
	// CommentsCnt 评论数，只读
	CommentsCnt *int32  `json:"comments_cnt,omitempty"`
	LastMark    *string `json:"last_mark,omitempty"`
	LastView    *string `json:"last_view,omitempty"`

	// LikesCnt 喜欢数，只读
	LikesCnt *int32 `json:"likes_cnt,omitempty"`

	// MarksCnt 标记数，只读
	MarksCnt *int32 `json:"marks_cnt,omitempty"`

	// ViewsCnt 查看数，只读
	ViewsCnt *int32 `json:"views_cnt,omitempty"`
}

// ChannelTypeInfo 足迹频道类型
type ChannelTypeInfo struct {
	CoverageRadius *int32  `json:"coverage_radius,omitempty"`
	CreatedAt      *string `json:"created_at,omitempty"`
	Id             *uint32 `json:"id,omitempty"`
	Name           *string `json:"name,omitempty"`
	ThemeColor     *string `json:"theme_color,omitempty"`
	UpdatedAt      *string `json:"updated_at,omitempty"`
}

// ChannelTypeListRes defines model for ChannelTypeListRes.
type ChannelTypeListRes struct {
	ChannelTypes *[]ChannelTypeInfo `json:"channel_types,omitempty"`
}

// ChannelUpdateReq 足迹更新
type ChannelUpdateReq struct {
	// Channel 频道信息
	Channel *ChannelInfo `json:"channel,omitempty"`
}

// ChannelUpdateRes defines model for ChannelUpdateRes.
type ChannelUpdateRes = map[string]interface{}

// FastRegisterData 宠物注册信息
type FastRegisterData struct {
	// AvatarData base64 data
	AvatarData *string `json:"avatar_data,omitempty"`

	// Name 名字
	Name *string `json:"name,omitempty"`
}

// FastRegisterWeChatReq 快速注册请求
type FastRegisterWeChatReq struct {
	// RegData 宠物注册信息
	RegData *FastRegisterData `json:"reg_data,omitempty"`
	WxCode  *string           `json:"wx_code,omitempty"`
}

// FastRegisterWeChatRes defines model for FastRegisterWeChatRes.
type FastRegisterWeChatRes struct {
	Token    *string   `json:"token,omitempty"`
	UserInfo *UserInfo `json:"user_info,omitempty"`
}

// LocationCommonSearchRes defines model for LocationCommonSearchRes.
type LocationCommonSearchRes = map[string]interface{}

// LocationInfo defines model for LocationInfo.
type LocationInfo struct {
	// Address POI 地址, 不可更新
	Address *string `json:"address,omitempty"`

	// LngLat 足迹位置, 不可更新
	LngLat *PointCoord `json:"lng_lat,omitempty"`
}

// LoginWeChatReq 登录请求
type LoginWeChatReq struct {
	WxCode *string `json:"wx_code,omitempty"`
}

// LoginWeChatRes defines model for LoginWeChatRes.
type LoginWeChatRes struct {
	Token    *string   `json:"token,omitempty"`
	UserInfo *UserInfo `json:"user_info,omitempty"`
}

// MediaInfo defines model for MediaInfo.
type MediaInfo struct {
	// GetUrl 读取URL
	GetUrl *string `json:"get_url,omitempty"`

	// PutUrl 写入URL
	PutUrl *string `json:"put_url,omitempty"`

	// Type 类型
	Type *int `json:"type,omitempty"`

	// Uuid ID, 可写入
	Uuid *string `json:"uuid,omitempty"`
}

// MediaPutPresignURLBatchGetRes defines model for MediaPutPresignURLBatchGetRes.
type MediaPutPresignURLBatchGetRes struct {
	Media *[]MediaInfo `json:"media,omitempty"`
}

// PetInfo defines model for PetInfo.
type PetInfo struct {
	Avatar    *string `json:"avatar,omitempty"`
	BirthDate *string `json:"birth_date,omitempty"`
	Breed     *string `json:"breed,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	Gender    *uint32 `json:"gender,omitempty"`
	Id        *string `json:"id,omitempty"`
	Name      *string `json:"name,omitempty"`
	Specie    *string `json:"specie,omitempty"`
	Status    *int32  `json:"status,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	Weight    *int32  `json:"weight,omitempty"`
}

// PointCoord defines model for PointCoord.
type PointCoord struct {
	Lat *float32 `json:"lat,omitempty"`
	Lng *float32 `json:"lng,omitempty"`
}

// PostInfo 足迹评论
type PostInfo struct {
	Content    *string `json:"content,omitempty"`
	CreatedAt  *string `json:"created_at,omitempty"`
	ParentUuid *string `json:"parent_uuid,omitempty"`
	RootUuid   *string `json:"root_uuid,omitempty"`
	UpdatedAt  *string `json:"updated_at,omitempty"`
	Uuid       *string `json:"uuid,omitempty"`
}

// UserInfo defines model for UserInfo.
type UserInfo struct {
	Id    *string    `json:"id,omitempty"`
	Pets  *[]PetInfo `json:"pets,omitempty"`
	Title *string    `json:"title,omitempty"`
}

// BaseServiceChannelDeleteParams defines parameters for BaseServiceChannelDelete.
type BaseServiceChannelDeleteParams struct {
	Uuid *string `form:"uuid,omitempty" json:"uuid,omitempty"`
}

// BaseServiceChannelDetailQueryByIdParams defines parameters for BaseServiceChannelDetailQueryById.
type BaseServiceChannelDetailQueryByIdParams struct {
	Uuid *string `form:"uuid,omitempty" json:"uuid,omitempty"`
}

// BaseServiceChannelFullQueryByIdParams defines parameters for BaseServiceChannelFullQueryById.
type BaseServiceChannelFullQueryByIdParams struct {
	Uuid *string `form:"uuid,omitempty" json:"uuid,omitempty"`
}

// BaseServiceLocationCommonSearchParams defines parameters for BaseServiceLocationCommonSearch.
type BaseServiceLocationCommonSearchParams struct {
	Input *string `form:"input,omitempty" json:"input,omitempty"`
}

// BaseServiceMediaPutPresignURLBatchGetParams defines parameters for BaseServiceMediaPutPresignURLBatchGet.
type BaseServiceMediaPutPresignURLBatchGetParams struct {
	MediaType *int   `form:"media_type,omitempty" json:"media_type,omitempty"`
	Count     *int32 `form:"count,omitempty" json:"count,omitempty"`
}

// BaseServiceChannelCreateJSONRequestBody defines body for BaseServiceChannelCreate for application/json ContentType.
type BaseServiceChannelCreateJSONRequestBody = ChannelCreateReq

// BaseServiceChannelUpdateJSONRequestBody defines body for BaseServiceChannelUpdate for application/json ContentType.
type BaseServiceChannelUpdateJSONRequestBody = ChannelUpdateReq

// BaseServiceChannelBaseQueryByBoundJSONRequestBody defines body for BaseServiceChannelBaseQueryByBound for application/json ContentType.
type BaseServiceChannelBaseQueryByBoundJSONRequestBody = ChannelBaseQueryByBoundReq

// BaseServiceChannelInteractionJSONRequestBody defines body for BaseServiceChannelInteraction for application/json ContentType.
type BaseServiceChannelInteractionJSONRequestBody = ChannelInteractionReq

// BaseServiceChannelCommentJSONRequestBody defines body for BaseServiceChannelComment for application/json ContentType.
type BaseServiceChannelCommentJSONRequestBody = ChannelCommentReq

// BaseServiceFastRegisterWeChatJSONRequestBody defines body for BaseServiceFastRegisterWeChat for application/json ContentType.
type BaseServiceFastRegisterWeChatJSONRequestBody = FastRegisterWeChatReq

// BaseServiceLoginWeChatJSONRequestBody defines body for BaseServiceLoginWeChat for application/json ContentType.
type BaseServiceLoginWeChatJSONRequestBody = LoginWeChatReq

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// BaseServiceChannelDelete request
	BaseServiceChannelDelete(ctx context.Context, params *BaseServiceChannelDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceChannelCreateWithBody request with any body
	BaseServiceChannelCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BaseServiceChannelCreate(ctx context.Context, body BaseServiceChannelCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceChannelUpdateWithBody request with any body
	BaseServiceChannelUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BaseServiceChannelUpdate(ctx context.Context, body BaseServiceChannelUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceChannelBaseQueryByBoundWithBody request with any body
	BaseServiceChannelBaseQueryByBoundWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BaseServiceChannelBaseQueryByBound(ctx context.Context, body BaseServiceChannelBaseQueryByBoundJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceChannelDetailQueryById request
	BaseServiceChannelDetailQueryById(ctx context.Context, params *BaseServiceChannelDetailQueryByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceChannelFullQueryById request
	BaseServiceChannelFullQueryById(ctx context.Context, params *BaseServiceChannelFullQueryByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceChannelInteractionWithBody request with any body
	BaseServiceChannelInteractionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BaseServiceChannelInteraction(ctx context.Context, body BaseServiceChannelInteractionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceChannelCommentWithBody request with any body
	BaseServiceChannelCommentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BaseServiceChannelComment(ctx context.Context, body BaseServiceChannelCommentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceChannelTypeList request
	BaseServiceChannelTypeList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceLocationCommonSearch request
	BaseServiceLocationCommonSearch(ctx context.Context, params *BaseServiceLocationCommonSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceMediaPutPresignURLBatchGet request
	BaseServiceMediaPutPresignURLBatchGet(ctx context.Context, params *BaseServiceMediaPutPresignURLBatchGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceFastRegisterWeChatWithBody request with any body
	BaseServiceFastRegisterWeChatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BaseServiceFastRegisterWeChat(ctx context.Context, body BaseServiceFastRegisterWeChatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceLoginWeChatWithBody request with any body
	BaseServiceLoginWeChatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BaseServiceLoginWeChat(ctx context.Context, body BaseServiceLoginWeChatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) BaseServiceChannelDelete(ctx context.Context, params *BaseServiceChannelDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelCreate(ctx context.Context, body BaseServiceChannelCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelUpdate(ctx context.Context, body BaseServiceChannelUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelBaseQueryByBoundWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelBaseQueryByBoundRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelBaseQueryByBound(ctx context.Context, body BaseServiceChannelBaseQueryByBoundJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelBaseQueryByBoundRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelDetailQueryById(ctx context.Context, params *BaseServiceChannelDetailQueryByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelDetailQueryByIdRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelFullQueryById(ctx context.Context, params *BaseServiceChannelFullQueryByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelFullQueryByIdRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelInteractionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelInteractionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelInteraction(ctx context.Context, body BaseServiceChannelInteractionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelInteractionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelCommentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelCommentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelComment(ctx context.Context, body BaseServiceChannelCommentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelCommentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelTypeList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelTypeListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceLocationCommonSearch(ctx context.Context, params *BaseServiceLocationCommonSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceLocationCommonSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceMediaPutPresignURLBatchGet(ctx context.Context, params *BaseServiceMediaPutPresignURLBatchGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceMediaPutPresignURLBatchGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceFastRegisterWeChatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceFastRegisterWeChatRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceFastRegisterWeChat(ctx context.Context, body BaseServiceFastRegisterWeChatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceFastRegisterWeChatRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceLoginWeChatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceLoginWeChatRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceLoginWeChat(ctx context.Context, body BaseServiceLoginWeChatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceLoginWeChatRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewBaseServiceChannelDeleteRequest generates requests for BaseServiceChannelDelete
func NewBaseServiceChannelDeleteRequest(server string, params *BaseServiceChannelDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Uuid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uuid", runtime.ParamLocationQuery, *params.Uuid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBaseServiceChannelCreateRequest calls the generic BaseServiceChannelCreate builder with application/json body
func NewBaseServiceChannelCreateRequest(server string, body BaseServiceChannelCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBaseServiceChannelCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewBaseServiceChannelCreateRequestWithBody generates requests for BaseServiceChannelCreate with any type of body
func NewBaseServiceChannelCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBaseServiceChannelUpdateRequest calls the generic BaseServiceChannelUpdate builder with application/json body
func NewBaseServiceChannelUpdateRequest(server string, body BaseServiceChannelUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBaseServiceChannelUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewBaseServiceChannelUpdateRequestWithBody generates requests for BaseServiceChannelUpdate with any type of body
func NewBaseServiceChannelUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBaseServiceChannelBaseQueryByBoundRequest calls the generic BaseServiceChannelBaseQueryByBound builder with application/json body
func NewBaseServiceChannelBaseQueryByBoundRequest(server string, body BaseServiceChannelBaseQueryByBoundJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBaseServiceChannelBaseQueryByBoundRequestWithBody(server, "application/json", bodyReader)
}

// NewBaseServiceChannelBaseQueryByBoundRequestWithBody generates requests for BaseServiceChannelBaseQueryByBound with any type of body
func NewBaseServiceChannelBaseQueryByBoundRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channel/base_query_by_bound")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBaseServiceChannelDetailQueryByIdRequest generates requests for BaseServiceChannelDetailQueryById
func NewBaseServiceChannelDetailQueryByIdRequest(server string, params *BaseServiceChannelDetailQueryByIdParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channel/detail_query_by_id")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Uuid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uuid", runtime.ParamLocationQuery, *params.Uuid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBaseServiceChannelFullQueryByIdRequest generates requests for BaseServiceChannelFullQueryById
func NewBaseServiceChannelFullQueryByIdRequest(server string, params *BaseServiceChannelFullQueryByIdParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channel/full_query_by_id")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Uuid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uuid", runtime.ParamLocationQuery, *params.Uuid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBaseServiceChannelInteractionRequest calls the generic BaseServiceChannelInteraction builder with application/json body
func NewBaseServiceChannelInteractionRequest(server string, body BaseServiceChannelInteractionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBaseServiceChannelInteractionRequestWithBody(server, "application/json", bodyReader)
}

// NewBaseServiceChannelInteractionRequestWithBody generates requests for BaseServiceChannelInteraction with any type of body
func NewBaseServiceChannelInteractionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channel/inx")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBaseServiceChannelCommentRequest calls the generic BaseServiceChannelComment builder with application/json body
func NewBaseServiceChannelCommentRequest(server string, body BaseServiceChannelCommentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBaseServiceChannelCommentRequestWithBody(server, "application/json", bodyReader)
}

// NewBaseServiceChannelCommentRequestWithBody generates requests for BaseServiceChannelComment with any type of body
func NewBaseServiceChannelCommentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channel/post")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBaseServiceChannelTypeListRequest generates requests for BaseServiceChannelTypeList
func NewBaseServiceChannelTypeListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channel/type")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBaseServiceLocationCommonSearchRequest generates requests for BaseServiceLocationCommonSearch
func NewBaseServiceLocationCommonSearchRequest(server string, params *BaseServiceLocationCommonSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/location/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Input != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "input", runtime.ParamLocationQuery, *params.Input); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBaseServiceMediaPutPresignURLBatchGetRequest generates requests for BaseServiceMediaPutPresignURLBatchGet
func NewBaseServiceMediaPutPresignURLBatchGetRequest(server string, params *BaseServiceMediaPutPresignURLBatchGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/media/put_presign_url/batch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MediaType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "media_type", runtime.ParamLocationQuery, *params.MediaType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBaseServiceFastRegisterWeChatRequest calls the generic BaseServiceFastRegisterWeChat builder with application/json body
func NewBaseServiceFastRegisterWeChatRequest(server string, body BaseServiceFastRegisterWeChatJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBaseServiceFastRegisterWeChatRequestWithBody(server, "application/json", bodyReader)
}

// NewBaseServiceFastRegisterWeChatRequestWithBody generates requests for BaseServiceFastRegisterWeChat with any type of body
func NewBaseServiceFastRegisterWeChatRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/user/fast_reg/wx")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBaseServiceLoginWeChatRequest calls the generic BaseServiceLoginWeChat builder with application/json body
func NewBaseServiceLoginWeChatRequest(server string, body BaseServiceLoginWeChatJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBaseServiceLoginWeChatRequestWithBody(server, "application/json", bodyReader)
}

// NewBaseServiceLoginWeChatRequestWithBody generates requests for BaseServiceLoginWeChat with any type of body
func NewBaseServiceLoginWeChatRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/user/login/wx")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// BaseServiceChannelDeleteWithResponse request
	BaseServiceChannelDeleteWithResponse(ctx context.Context, params *BaseServiceChannelDeleteParams, reqEditors ...RequestEditorFn) (*BaseServiceChannelDeleteResponse, error)

	// BaseServiceChannelCreateWithBodyWithResponse request with any body
	BaseServiceChannelCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceChannelCreateResponse, error)

	BaseServiceChannelCreateWithResponse(ctx context.Context, body BaseServiceChannelCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceChannelCreateResponse, error)

	// BaseServiceChannelUpdateWithBodyWithResponse request with any body
	BaseServiceChannelUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceChannelUpdateResponse, error)

	BaseServiceChannelUpdateWithResponse(ctx context.Context, body BaseServiceChannelUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceChannelUpdateResponse, error)

	// BaseServiceChannelBaseQueryByBoundWithBodyWithResponse request with any body
	BaseServiceChannelBaseQueryByBoundWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceChannelBaseQueryByBoundResponse, error)

	BaseServiceChannelBaseQueryByBoundWithResponse(ctx context.Context, body BaseServiceChannelBaseQueryByBoundJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceChannelBaseQueryByBoundResponse, error)

	// BaseServiceChannelDetailQueryByIdWithResponse request
	BaseServiceChannelDetailQueryByIdWithResponse(ctx context.Context, params *BaseServiceChannelDetailQueryByIdParams, reqEditors ...RequestEditorFn) (*BaseServiceChannelDetailQueryByIdResponse, error)

	// BaseServiceChannelFullQueryByIdWithResponse request
	BaseServiceChannelFullQueryByIdWithResponse(ctx context.Context, params *BaseServiceChannelFullQueryByIdParams, reqEditors ...RequestEditorFn) (*BaseServiceChannelFullQueryByIdResponse, error)

	// BaseServiceChannelInteractionWithBodyWithResponse request with any body
	BaseServiceChannelInteractionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceChannelInteractionResponse, error)

	BaseServiceChannelInteractionWithResponse(ctx context.Context, body BaseServiceChannelInteractionJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceChannelInteractionResponse, error)

	// BaseServiceChannelCommentWithBodyWithResponse request with any body
	BaseServiceChannelCommentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceChannelCommentResponse, error)

	BaseServiceChannelCommentWithResponse(ctx context.Context, body BaseServiceChannelCommentJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceChannelCommentResponse, error)

	// BaseServiceChannelTypeListWithResponse request
	BaseServiceChannelTypeListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BaseServiceChannelTypeListResponse, error)

	// BaseServiceLocationCommonSearchWithResponse request
	BaseServiceLocationCommonSearchWithResponse(ctx context.Context, params *BaseServiceLocationCommonSearchParams, reqEditors ...RequestEditorFn) (*BaseServiceLocationCommonSearchResponse, error)

	// BaseServiceMediaPutPresignURLBatchGetWithResponse request
	BaseServiceMediaPutPresignURLBatchGetWithResponse(ctx context.Context, params *BaseServiceMediaPutPresignURLBatchGetParams, reqEditors ...RequestEditorFn) (*BaseServiceMediaPutPresignURLBatchGetResponse, error)

	// BaseServiceFastRegisterWeChatWithBodyWithResponse request with any body
	BaseServiceFastRegisterWeChatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceFastRegisterWeChatResponse, error)

	BaseServiceFastRegisterWeChatWithResponse(ctx context.Context, body BaseServiceFastRegisterWeChatJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceFastRegisterWeChatResponse, error)

	// BaseServiceLoginWeChatWithBodyWithResponse request with any body
	BaseServiceLoginWeChatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceLoginWeChatResponse, error)

	BaseServiceLoginWeChatWithResponse(ctx context.Context, body BaseServiceLoginWeChatJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceLoginWeChatResponse, error)
}

type BaseServiceChannelDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelDeleteRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceChannelDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceChannelDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceChannelCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelCreateRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceChannelCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceChannelCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceChannelUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelUpdateRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceChannelUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceChannelUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceChannelBaseQueryByBoundResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelBaseQueryByBoundRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceChannelBaseQueryByBoundResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceChannelBaseQueryByBoundResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceChannelDetailQueryByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelDetailQueryByIdRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceChannelDetailQueryByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceChannelDetailQueryByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceChannelFullQueryByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelFullQueryByIdRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceChannelFullQueryByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceChannelFullQueryByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceChannelInteractionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelInteractionRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceChannelInteractionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceChannelInteractionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceChannelCommentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelCommentRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceChannelCommentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceChannelCommentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceChannelTypeListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelTypeListRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceChannelTypeListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceChannelTypeListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceLocationCommonSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LocationCommonSearchRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceLocationCommonSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceLocationCommonSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceMediaPutPresignURLBatchGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MediaPutPresignURLBatchGetRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceMediaPutPresignURLBatchGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceMediaPutPresignURLBatchGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceFastRegisterWeChatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FastRegisterWeChatRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceFastRegisterWeChatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceFastRegisterWeChatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceLoginWeChatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LoginWeChatRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceLoginWeChatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceLoginWeChatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// BaseServiceChannelDeleteWithResponse request returning *BaseServiceChannelDeleteResponse
func (c *ClientWithResponses) BaseServiceChannelDeleteWithResponse(ctx context.Context, params *BaseServiceChannelDeleteParams, reqEditors ...RequestEditorFn) (*BaseServiceChannelDeleteResponse, error) {
	rsp, err := c.BaseServiceChannelDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelDeleteResponse(rsp)
}

// BaseServiceChannelCreateWithBodyWithResponse request with arbitrary body returning *BaseServiceChannelCreateResponse
func (c *ClientWithResponses) BaseServiceChannelCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceChannelCreateResponse, error) {
	rsp, err := c.BaseServiceChannelCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelCreateResponse(rsp)
}

func (c *ClientWithResponses) BaseServiceChannelCreateWithResponse(ctx context.Context, body BaseServiceChannelCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceChannelCreateResponse, error) {
	rsp, err := c.BaseServiceChannelCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelCreateResponse(rsp)
}

// BaseServiceChannelUpdateWithBodyWithResponse request with arbitrary body returning *BaseServiceChannelUpdateResponse
func (c *ClientWithResponses) BaseServiceChannelUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceChannelUpdateResponse, error) {
	rsp, err := c.BaseServiceChannelUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelUpdateResponse(rsp)
}

func (c *ClientWithResponses) BaseServiceChannelUpdateWithResponse(ctx context.Context, body BaseServiceChannelUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceChannelUpdateResponse, error) {
	rsp, err := c.BaseServiceChannelUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelUpdateResponse(rsp)
}

// BaseServiceChannelBaseQueryByBoundWithBodyWithResponse request with arbitrary body returning *BaseServiceChannelBaseQueryByBoundResponse
func (c *ClientWithResponses) BaseServiceChannelBaseQueryByBoundWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceChannelBaseQueryByBoundResponse, error) {
	rsp, err := c.BaseServiceChannelBaseQueryByBoundWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelBaseQueryByBoundResponse(rsp)
}

func (c *ClientWithResponses) BaseServiceChannelBaseQueryByBoundWithResponse(ctx context.Context, body BaseServiceChannelBaseQueryByBoundJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceChannelBaseQueryByBoundResponse, error) {
	rsp, err := c.BaseServiceChannelBaseQueryByBound(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelBaseQueryByBoundResponse(rsp)
}

// BaseServiceChannelDetailQueryByIdWithResponse request returning *BaseServiceChannelDetailQueryByIdResponse
func (c *ClientWithResponses) BaseServiceChannelDetailQueryByIdWithResponse(ctx context.Context, params *BaseServiceChannelDetailQueryByIdParams, reqEditors ...RequestEditorFn) (*BaseServiceChannelDetailQueryByIdResponse, error) {
	rsp, err := c.BaseServiceChannelDetailQueryById(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelDetailQueryByIdResponse(rsp)
}

// BaseServiceChannelFullQueryByIdWithResponse request returning *BaseServiceChannelFullQueryByIdResponse
func (c *ClientWithResponses) BaseServiceChannelFullQueryByIdWithResponse(ctx context.Context, params *BaseServiceChannelFullQueryByIdParams, reqEditors ...RequestEditorFn) (*BaseServiceChannelFullQueryByIdResponse, error) {
	rsp, err := c.BaseServiceChannelFullQueryById(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelFullQueryByIdResponse(rsp)
}

// BaseServiceChannelInteractionWithBodyWithResponse request with arbitrary body returning *BaseServiceChannelInteractionResponse
func (c *ClientWithResponses) BaseServiceChannelInteractionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceChannelInteractionResponse, error) {
	rsp, err := c.BaseServiceChannelInteractionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelInteractionResponse(rsp)
}

func (c *ClientWithResponses) BaseServiceChannelInteractionWithResponse(ctx context.Context, body BaseServiceChannelInteractionJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceChannelInteractionResponse, error) {
	rsp, err := c.BaseServiceChannelInteraction(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelInteractionResponse(rsp)
}

// BaseServiceChannelCommentWithBodyWithResponse request with arbitrary body returning *BaseServiceChannelCommentResponse
func (c *ClientWithResponses) BaseServiceChannelCommentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceChannelCommentResponse, error) {
	rsp, err := c.BaseServiceChannelCommentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelCommentResponse(rsp)
}

func (c *ClientWithResponses) BaseServiceChannelCommentWithResponse(ctx context.Context, body BaseServiceChannelCommentJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceChannelCommentResponse, error) {
	rsp, err := c.BaseServiceChannelComment(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelCommentResponse(rsp)
}

// BaseServiceChannelTypeListWithResponse request returning *BaseServiceChannelTypeListResponse
func (c *ClientWithResponses) BaseServiceChannelTypeListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BaseServiceChannelTypeListResponse, error) {
	rsp, err := c.BaseServiceChannelTypeList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelTypeListResponse(rsp)
}

// BaseServiceLocationCommonSearchWithResponse request returning *BaseServiceLocationCommonSearchResponse
func (c *ClientWithResponses) BaseServiceLocationCommonSearchWithResponse(ctx context.Context, params *BaseServiceLocationCommonSearchParams, reqEditors ...RequestEditorFn) (*BaseServiceLocationCommonSearchResponse, error) {
	rsp, err := c.BaseServiceLocationCommonSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceLocationCommonSearchResponse(rsp)
}

// BaseServiceMediaPutPresignURLBatchGetWithResponse request returning *BaseServiceMediaPutPresignURLBatchGetResponse
func (c *ClientWithResponses) BaseServiceMediaPutPresignURLBatchGetWithResponse(ctx context.Context, params *BaseServiceMediaPutPresignURLBatchGetParams, reqEditors ...RequestEditorFn) (*BaseServiceMediaPutPresignURLBatchGetResponse, error) {
	rsp, err := c.BaseServiceMediaPutPresignURLBatchGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceMediaPutPresignURLBatchGetResponse(rsp)
}

// BaseServiceFastRegisterWeChatWithBodyWithResponse request with arbitrary body returning *BaseServiceFastRegisterWeChatResponse
func (c *ClientWithResponses) BaseServiceFastRegisterWeChatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceFastRegisterWeChatResponse, error) {
	rsp, err := c.BaseServiceFastRegisterWeChatWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceFastRegisterWeChatResponse(rsp)
}

func (c *ClientWithResponses) BaseServiceFastRegisterWeChatWithResponse(ctx context.Context, body BaseServiceFastRegisterWeChatJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceFastRegisterWeChatResponse, error) {
	rsp, err := c.BaseServiceFastRegisterWeChat(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceFastRegisterWeChatResponse(rsp)
}

// BaseServiceLoginWeChatWithBodyWithResponse request with arbitrary body returning *BaseServiceLoginWeChatResponse
func (c *ClientWithResponses) BaseServiceLoginWeChatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceLoginWeChatResponse, error) {
	rsp, err := c.BaseServiceLoginWeChatWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceLoginWeChatResponse(rsp)
}

func (c *ClientWithResponses) BaseServiceLoginWeChatWithResponse(ctx context.Context, body BaseServiceLoginWeChatJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceLoginWeChatResponse, error) {
	rsp, err := c.BaseServiceLoginWeChat(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceLoginWeChatResponse(rsp)
}

// ParseBaseServiceChannelDeleteResponse parses an HTTP response from a BaseServiceChannelDeleteWithResponse call
func ParseBaseServiceChannelDeleteResponse(rsp *http.Response) (*BaseServiceChannelDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceChannelDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelDeleteRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceChannelCreateResponse parses an HTTP response from a BaseServiceChannelCreateWithResponse call
func ParseBaseServiceChannelCreateResponse(rsp *http.Response) (*BaseServiceChannelCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceChannelCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelCreateRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceChannelUpdateResponse parses an HTTP response from a BaseServiceChannelUpdateWithResponse call
func ParseBaseServiceChannelUpdateResponse(rsp *http.Response) (*BaseServiceChannelUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceChannelUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelUpdateRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceChannelBaseQueryByBoundResponse parses an HTTP response from a BaseServiceChannelBaseQueryByBoundWithResponse call
func ParseBaseServiceChannelBaseQueryByBoundResponse(rsp *http.Response) (*BaseServiceChannelBaseQueryByBoundResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceChannelBaseQueryByBoundResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelBaseQueryByBoundRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceChannelDetailQueryByIdResponse parses an HTTP response from a BaseServiceChannelDetailQueryByIdWithResponse call
func ParseBaseServiceChannelDetailQueryByIdResponse(rsp *http.Response) (*BaseServiceChannelDetailQueryByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceChannelDetailQueryByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelDetailQueryByIdRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceChannelFullQueryByIdResponse parses an HTTP response from a BaseServiceChannelFullQueryByIdWithResponse call
func ParseBaseServiceChannelFullQueryByIdResponse(rsp *http.Response) (*BaseServiceChannelFullQueryByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceChannelFullQueryByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelFullQueryByIdRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceChannelInteractionResponse parses an HTTP response from a BaseServiceChannelInteractionWithResponse call
func ParseBaseServiceChannelInteractionResponse(rsp *http.Response) (*BaseServiceChannelInteractionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceChannelInteractionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelInteractionRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceChannelCommentResponse parses an HTTP response from a BaseServiceChannelCommentWithResponse call
func ParseBaseServiceChannelCommentResponse(rsp *http.Response) (*BaseServiceChannelCommentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceChannelCommentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelCommentRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceChannelTypeListResponse parses an HTTP response from a BaseServiceChannelTypeListWithResponse call
func ParseBaseServiceChannelTypeListResponse(rsp *http.Response) (*BaseServiceChannelTypeListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceChannelTypeListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelTypeListRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceLocationCommonSearchResponse parses an HTTP response from a BaseServiceLocationCommonSearchWithResponse call
func ParseBaseServiceLocationCommonSearchResponse(rsp *http.Response) (*BaseServiceLocationCommonSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceLocationCommonSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LocationCommonSearchRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceMediaPutPresignURLBatchGetResponse parses an HTTP response from a BaseServiceMediaPutPresignURLBatchGetWithResponse call
func ParseBaseServiceMediaPutPresignURLBatchGetResponse(rsp *http.Response) (*BaseServiceMediaPutPresignURLBatchGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceMediaPutPresignURLBatchGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MediaPutPresignURLBatchGetRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceFastRegisterWeChatResponse parses an HTTP response from a BaseServiceFastRegisterWeChatWithResponse call
func ParseBaseServiceFastRegisterWeChatResponse(rsp *http.Response) (*BaseServiceFastRegisterWeChatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceFastRegisterWeChatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FastRegisterWeChatRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceLoginWeChatResponse parses an HTTP response from a BaseServiceLoginWeChatWithResponse call
func ParseBaseServiceLoginWeChatResponse(rsp *http.Response) (*BaseServiceLoginWeChatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceLoginWeChatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LoginWeChatRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (DELETE /v1/channel)
	BaseServiceChannelDelete(c *gin.Context, params BaseServiceChannelDeleteParams)

	// (POST /v1/channel)
	BaseServiceChannelCreate(c *gin.Context)

	// (PUT /v1/channel)
	BaseServiceChannelUpdate(c *gin.Context)

	// (POST /v1/channel/base_query_by_bound)
	BaseServiceChannelBaseQueryByBound(c *gin.Context)

	// (GET /v1/channel/detail_query_by_id)
	BaseServiceChannelDetailQueryById(c *gin.Context, params BaseServiceChannelDetailQueryByIdParams)

	// (GET /v1/channel/full_query_by_id)
	BaseServiceChannelFullQueryById(c *gin.Context, params BaseServiceChannelFullQueryByIdParams)

	// (POST /v1/channel/inx)
	BaseServiceChannelInteraction(c *gin.Context)

	// (POST /v1/channel/post)
	BaseServiceChannelComment(c *gin.Context)

	// (GET /v1/channel/type)
	BaseServiceChannelTypeList(c *gin.Context)

	// (GET /v1/location/search)
	BaseServiceLocationCommonSearch(c *gin.Context, params BaseServiceLocationCommonSearchParams)

	// (GET /v1/media/put_presign_url/batch)
	BaseServiceMediaPutPresignURLBatchGet(c *gin.Context, params BaseServiceMediaPutPresignURLBatchGetParams)

	// (POST /v1/user/fast_reg/wx)
	BaseServiceFastRegisterWeChat(c *gin.Context)

	// (POST /v1/user/login/wx)
	BaseServiceLoginWeChat(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// BaseServiceChannelDelete operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceChannelDelete(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params BaseServiceChannelDeleteParams

	// ------------- Optional query parameter "uuid" -------------

	err = runtime.BindQueryParameter("form", true, false, "uuid", c.Request.URL.Query(), &params.Uuid)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter uuid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceChannelDelete(c, params)
}

// BaseServiceChannelCreate operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceChannelCreate(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceChannelCreate(c)
}

// BaseServiceChannelUpdate operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceChannelUpdate(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceChannelUpdate(c)
}

// BaseServiceChannelBaseQueryByBound operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceChannelBaseQueryByBound(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceChannelBaseQueryByBound(c)
}

// BaseServiceChannelDetailQueryById operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceChannelDetailQueryById(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params BaseServiceChannelDetailQueryByIdParams

	// ------------- Optional query parameter "uuid" -------------

	err = runtime.BindQueryParameter("form", true, false, "uuid", c.Request.URL.Query(), &params.Uuid)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter uuid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceChannelDetailQueryById(c, params)
}

// BaseServiceChannelFullQueryById operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceChannelFullQueryById(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params BaseServiceChannelFullQueryByIdParams

	// ------------- Optional query parameter "uuid" -------------

	err = runtime.BindQueryParameter("form", true, false, "uuid", c.Request.URL.Query(), &params.Uuid)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter uuid: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceChannelFullQueryById(c, params)
}

// BaseServiceChannelInteraction operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceChannelInteraction(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceChannelInteraction(c)
}

// BaseServiceChannelComment operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceChannelComment(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceChannelComment(c)
}

// BaseServiceChannelTypeList operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceChannelTypeList(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceChannelTypeList(c)
}

// BaseServiceLocationCommonSearch operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceLocationCommonSearch(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params BaseServiceLocationCommonSearchParams

	// ------------- Optional query parameter "input" -------------

	err = runtime.BindQueryParameter("form", true, false, "input", c.Request.URL.Query(), &params.Input)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter input: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceLocationCommonSearch(c, params)
}

// BaseServiceMediaPutPresignURLBatchGet operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceMediaPutPresignURLBatchGet(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params BaseServiceMediaPutPresignURLBatchGetParams

	// ------------- Optional query parameter "media_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "media_type", c.Request.URL.Query(), &params.MediaType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter media_type: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", c.Request.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter count: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceMediaPutPresignURLBatchGet(c, params)
}

// BaseServiceFastRegisterWeChat operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceFastRegisterWeChat(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceFastRegisterWeChat(c)
}

// BaseServiceLoginWeChat operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceLoginWeChat(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceLoginWeChat(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.DELETE(options.BaseURL+"/v1/channel", wrapper.BaseServiceChannelDelete)
	router.POST(options.BaseURL+"/v1/channel", wrapper.BaseServiceChannelCreate)
	router.PUT(options.BaseURL+"/v1/channel", wrapper.BaseServiceChannelUpdate)
	router.POST(options.BaseURL+"/v1/channel/base_query_by_bound", wrapper.BaseServiceChannelBaseQueryByBound)
	router.GET(options.BaseURL+"/v1/channel/detail_query_by_id", wrapper.BaseServiceChannelDetailQueryById)
	router.GET(options.BaseURL+"/v1/channel/full_query_by_id", wrapper.BaseServiceChannelFullQueryById)
	router.POST(options.BaseURL+"/v1/channel/inx", wrapper.BaseServiceChannelInteraction)
	router.POST(options.BaseURL+"/v1/channel/post", wrapper.BaseServiceChannelComment)
	router.GET(options.BaseURL+"/v1/channel/type", wrapper.BaseServiceChannelTypeList)
	router.GET(options.BaseURL+"/v1/location/search", wrapper.BaseServiceLocationCommonSearch)
	router.GET(options.BaseURL+"/v1/media/put_presign_url/batch", wrapper.BaseServiceMediaPutPresignURLBatchGet)
	router.POST(options.BaseURL+"/v1/user/fast_reg/wx", wrapper.BaseServiceFastRegisterWeChat)
	router.POST(options.BaseURL+"/v1/user/login/wx", wrapper.BaseServiceLoginWeChat)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RaW28bxxX+K8S0j4SoxEUf9JTIQgqhLqzaNfrQGIvR7hE5MTm7npmVzBoEqCROfJFC",
	"9WIHjuXaUmNEvUSSESGJpDj+M1ySeupfKHZmubvkzi6XUmghL4akmT1z5vtmvjkX30amXXNsClRwNHMb",
	"cbMCNSx/nLVdal20bWb5vznMdoAJAnKMgv/vLxksoRn0i1JkoxQYKC3YhAr1daOI+Mo48xtFJOoOoBlk",
	"L34ApvAtXKxgSqE6izn83gVWn61L/67AzaR3i/6I/wOuVi8voZk/ZS8d22jjehFZwE1GHEFsimaQ93Sj",
	"8/zT3tpH3pMDFDhmEEuuMziz9+03vdeH3ZfH3j8eEMu7+3lvawcVERFQk7OXbFbDAs0gQsWFt1G4R0IF",
	"lIGhaNeYMVwfEwaehMFUc+XPoRdZQATG5+mSPZY3F+1aDajQcmGqsdH0c6HWzbOOtJw6iwEWEDijo8i7",
	"+8Q7PkJFPVxjgZTlbOBGOjE/1UpzUIVwpfRJApNqcGbmrTfh13tu9c0uKCckSD/Z/svJ6t/ar7c6q3sJ",
	"0vEyFpjl14rfgUWwciQpFV8eeB+1fH9Myb1lYBGjhAtGaNkfJlQwjaPd3Wb7+EGx4LX2Ok8OOo/2I42I",
	"vq3aJlbzsx29FMzrX2YusFL4fPsMEL0qv9Js9f5Op7navf9tp7mqkP3fD2te69+9vWOpHERUIfX6bax3",
	"v9ofsc1AZtNsKE6V1hYL7e/X48ZCoXXTldZNt91+tdlr3klYTbjoOlYWya47yv3C/FzSbubxFsCw6VvS",
	"Si25RQ1YDsR2cNn20V+9+zsKrzhCQN2aFh/fln9kYODlSp3e3+wpN5OpXFf7J1f7sHDD1G24t/dxb/eo",
	"83A/OpfFPC9wFXNh1DC7oeVUji4TWNGPkhuQ4o73aLPz3+3x3fE9STHpRyW7++Ob9N1PM/nsRXfzwbgm",
	"M0j+Q90BvSgnr3HyPbaXgeEyGAxbxM0bQo2SXmvAToZCUFwDrQlRgRoYpl21mf7iZ+nCCLAuES6yXkrD",
	"/3jsgC6kYZyg7prcRkYYFSrjRN/0vht6iXgP+3iVCRfA5rDAmpu3+7x771+db3a8T9YyYwDD0n6/iDn8",
	"+lcFORi7DIt1AVz3KvSPzZAXG+ve15/nU/v4nv4IFytYaEnwXv/npPlMbay3913n5YeJjTEoh7vK4iKB",
	"YqOIVm4Zpm1BziOs81lzioV9A6j+0nBgBgmkIsvXaxxY+qHpRz1+pmDTq4CZWUk7OwMRUsJVbFkMuCbN",
	"W7g8X/A2972nzdEhQpWWjarSgXxhVzwLTgRd/fBkvftqd2jtFDDKhGacoO7jY+/Vw5SzMx7/A0udB/FR",
	"XJ5YuwzCcFlVFyMce61H165c0lHnuClfeZ889u68SPlK/SEBdP64Sx81zs/JcFktnU9FJCALrlhgwEmZ",
	"XrtyaRYLs/Ib0BNU86fnfldiWVCeF2UBRMolC7OvBJKLhImKr176R3iRAVjakREBQBmoBSxvEED0a6TG",
	"BtwBk6QMCSxyRzEjcosVIOWKyGVLy0ekMglKArkK7S5VbSwiu9StLQaRMi3nmahfn4ussFAF75qAkIog",
	"uxmXdQczoMJISVOKiNl2xmjOTC/HrQxFLJm86Zd2QOQP9/r3LHEpYxn5SCcbskChI+cdDqbLiKjPwRKh",
	"xP8rn8IOuQH1wixgBuxdV1Tep4V3CC1UAFvA/F/8y1LwR2xG/qxqF6E/aBZzuApsmZhQeHdhHhXRMjCu",
	"1puemp56y3fedoBih6AZdGFqeuqCfzCwqEg4SstvlWIRpyVLYRrRvvv85PGX8aQDSbNMRQDWoCcDdTW5",
	"GsM1EMC4fMCJb/GmC6yO+lKgzkAxKJ/rcL5eRAy4Y1Ou+H57enroTGPHqRIVkpQ+4KrCE9nLEUtHdUBJ",
	"4iACl3+ryMZlfxPx3aLr/jmzuS5tlZXSMWFThU/k7/emC1zM2lb9p95qVOOVW/VXIsx/EARzoTF5qKPi",
	"7imgdnWpt4zjxkRa5UaTRTpKA88H6Sj/GxfpRjGuDiU/kTPkrTUW60bYItIf/M7ave6dr1TXp/PsRW9v",
	"O6hdPjvqbjXDPHIUQcNtmslSpeuNnQ9puvbUGemzZP8iIlC9l2VIJY9YceJOnj7uNFe93bXOw4Pc9A31",
	"TH5OL0Gi2XNG+Jfc6hnAl4Kmega5wR/oHv18oE80vc4IPKG30mUqDq8q8ecANlZ5n6weDfUrzkeKhvoM",
	"Z2SjT8NoOsIcZmS4FDTIJxsvRR36cwqYotb9GSnol1i06qP+10VSe8IKzCg2+kV4NHlI4vX+U2LSbwaX",
	"uKx0psJy0vyi+/cdb3O/++FhZ2Oze7CdBYWuiJpPgAn1g9vzUuC04u8pwZUlsZLjCsNRNTTDZX4YKTKA",
	"7tw7PPm01fvsO6/1yNs77L3can9/v/3D85Ptj7tf/+htrKu6YSr06VW7fARIn2WTaICFUXXHRlFvzrRd",
	"KvSWUutNk2Q4u6h5Sp5dDqy0hLkwGJRLKxnPrffjbvv1lrff6u488I5aqgOjquiqD9P57IXX+qe3+0X7",
	"8F4Wzcl2yYTkX99LesNPgL45dBa2qnaZ0HGoCkiS9LxPC2ElK1a3ylbEsL0xIaKGejVvmKGh9s3Y1EQj",
	"t/vSEZ/RuN74fwAAAP//Ly25GWgqAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
