// Package apigin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package apigin

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// ChannelCreateReq 创建频道
type ChannelCreateReq struct {
	// Channel 频道信息
	Channel *ChannelInfo `json:"channel,omitempty"`
}

// ChannelCreateRes defines model for ChannelCreateRes.
type ChannelCreateRes struct {
	// Channel 频道信息
	Channel *ChannelInfo `json:"channel,omitempty"`
}

// ChannelDeleteRes defines model for ChannelDeleteRes.
type ChannelDeleteRes = map[string]interface{}

// ChannelExtGroup 频道群组拓展
type ChannelExtGroup struct {
	// Avatar 频道头像
	Avatar *MediaInfo `json:"avatar,omitempty"`

	// Intro 简介, 可更新
	Intro *string `json:"intro,omitempty"`

	// Title 频道名称标题
	Title *string `json:"title,omitempty"`
}

// ChannelExtLocation 频道地点拓展
type ChannelExtLocation struct {
	// Address POI 地址, 不可更新
	Address *string `json:"address,omitempty"`

	// Coord 足迹位置, 不可更新
	Coord *PointCoord `json:"coord,omitempty"`

	// Name 地点名字
	Name  *string                  `json:"name,omitempty"`
	Stats *ChannelExtLocationStats `json:"stats,omitempty"`
}

// ChannelExtLocationStats defines model for ChannelExtLocationStats.
type ChannelExtLocationStats struct {
	// LastMarkAt 最新足迹时间
	LastMarkAt *string `json:"last_mark_at,omitempty"`

	// MarkerIds 出现过的标记id
	MarkerIds *[]int32 `json:"marker_ids,omitempty"`

	// MarksCnt 足迹数量
	MarksCnt *int32 `json:"marks_cnt,omitempty"`

	// PetsCnt 来过的狗狗数量
	PetsCnt *int32 `json:"pets_cnt,omitempty"`
}

// ChannelGetRes defines model for ChannelGetRes.
type ChannelGetRes struct {
	// Channel 频道信息
	Channel *ChannelInfo `json:"channel,omitempty"`
}

// ChannelInfo 频道信息
type ChannelInfo struct {
	CreatedAt *string `json:"created_at,omitempty"`

	// ExtType 频道拓展类型
	ExtType *int `json:"ext_type,omitempty"`

	// GroupExt 群组拓展
	GroupExt *ChannelExtGroup `json:"group_ext,omitempty"`

	// Id 频道 ID
	Id *string `json:"id,omitempty"`

	// LocationExt 地点拓展
	LocationExt *ChannelExtLocation `json:"location_ext,omitempty"`

	// Stats 状态信息，只读
	Stats *ChannelStats `json:"stats,omitempty"`

	// Uid 频道创建者
	Uid       *string `json:"uid,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// ChannelQueryByLocationBoundRes defines model for ChannelQueryByLocationBoundRes.
type ChannelQueryByLocationBoundRes struct {
	Channels *[]ChannelInfo `json:"channels,omitempty"`
}

// ChannelQueryByUserRes defines model for ChannelQueryByUserRes.
type ChannelQueryByUserRes struct {
	Channels *[]ChannelInfo `json:"channels,omitempty"`
}

// ChannelStats 频道状态, 只读
type ChannelStats struct {
	LastLikeAt *string `json:"last_like_at,omitempty"`
	LastPostAt *string `json:"last_post_at,omitempty"`
	LastStarAt *string `json:"last_star_at,omitempty"`

	// LikesCnt 点赞数, 点赞代表认可
	LikesCnt *int32 `json:"likes_cnt,omitempty"`

	// PostsCnt 帖子数量
	PostsCnt *int32 `json:"posts_cnt,omitempty"`

	// StarsCnt 收藏数, 收藏代表订阅
	StarsCnt  *int32  `json:"stars_cnt,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`

	// ViewsCnt 查看数
	ViewsCnt *int32 `json:"views_cnt,omitempty"`
}

// ChannelUpdateReq 频道更新
type ChannelUpdateReq struct {
	// Channel 频道信息
	Channel *ChannelInfo `json:"channel,omitempty"`
}

// ChannelUpdateRes defines model for ChannelUpdateRes.
type ChannelUpdateRes struct {
	// Channel 频道信息
	Channel *ChannelInfo `json:"channel,omitempty"`
}

// FastRegisterWeChatReq 快速注册请求
type FastRegisterWeChatReq struct {
	// RegData 宠物快速注册信息
	RegData *UserFastRegisterData `json:"reg_data,omitempty"`
	WxCode  *string               `json:"wx_code,omitempty"`
}

// FastRegisterWeChatRes defines model for FastRegisterWeChatRes.
type FastRegisterWeChatRes struct {
	Token *string   `json:"token,omitempty"`
	User  *UserInfo `json:"user,omitempty"`
}

// LocationCommonSearchRes defines model for LocationCommonSearchRes.
type LocationCommonSearchRes = map[string]interface{}

// LoginWeChatReq 登录请求
type LoginWeChatReq struct {
	WxCode *string `json:"wx_code,omitempty"`
}

// LoginWeChatRes defines model for LoginWeChatRes.
type LoginWeChatRes struct {
	Token *string   `json:"token,omitempty"`
	User  *UserInfo `json:"user,omitempty"`
}

// MediaInfo defines model for MediaInfo.
type MediaInfo struct {
	// Bucket 位置
	Bucket *int `json:"bucket,omitempty"`

	// GetUrl 读取URL
	GetUrl *string `json:"get_url,omitempty"`

	// PutUrl 写入URL
	PutUrl *string `json:"put_url,omitempty"`

	// Uuid ID, 可写入
	Uuid *string `json:"uuid,omitempty"`
}

// MediaPutURLBatchGetRes defines model for MediaPutURLBatchGetRes.
type MediaPutURLBatchGetRes struct {
	Media *[]MediaInfo `json:"media,omitempty"`
}

// NotifyInfo 系统通知
type NotifyInfo struct {
	// Content 正文内容
	Content   *string `json:"content,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`

	// Id 通知id
	Id        *string `json:"id,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// PetInfo defines model for PetInfo.
type PetInfo struct {
	Avatar    *MediaInfo `json:"avatar,omitempty"`
	BirthDate *string    `json:"birth_date,omitempty"`
	Breed     *string    `json:"breed,omitempty"`
	CreatedAt *string    `json:"created_at,omitempty"`
	Gender    *uint32    `json:"gender,omitempty"`
	Id        *string    `json:"id,omitempty"`
	Intro     *string    `json:"intro,omitempty"`
	Name      *string    `json:"name,omitempty"`
	Size      *string    `json:"size,omitempty"`
	Specie    *string    `json:"specie,omitempty"`
	Status    *int32     `json:"status,omitempty"`
	Uid       *string    `json:"uid,omitempty"`
	UpdatedAt *string    `json:"updated_at,omitempty"`
	Weight    *int32     `json:"weight,omitempty"`
}

// PetMarkerInfo 狗狗足迹信息
type PetMarkerInfo struct {
	CoverageRadius *int32  `json:"coverage_radius,omitempty"`
	CreatedAt      *string `json:"created_at,omitempty"`
	Id             *int32  `json:"id,omitempty"`
	Name           *string `json:"name,omitempty"`
	ThemeColor     *string `json:"theme_color,omitempty"`
	UpdatedAt      *string `json:"updated_at,omitempty"`
}

// PetMarkerInfoRes defines model for PetMarkerInfoRes.
type PetMarkerInfoRes struct {
	PetMarks *[]PetMarkerInfo `json:"pet_marks,omitempty"`
}

// PointCoord defines model for PointCoord.
type PointCoord struct {
	Lat *float32 `json:"lat,omitempty"`
	Lng *float32 `json:"lng,omitempty"`
}

// PostCreateReq defines model for PostCreateReq.
type PostCreateReq struct {
	// Post 帖子
	Post *PostInfo `json:"post,omitempty"`
}

// PostCreateRes defines model for PostCreateRes.
type PostCreateRes struct {
	// Post 帖子
	Post *PostInfo `json:"post,omitempty"`
}

// PostDeleteRes defines model for PostDeleteRes.
type PostDeleteRes = map[string]interface{}

// PostExtPetMarker 足迹拓展
type PostExtPetMarker struct {
	MarkerIds *[]int32  `json:"marker_ids,omitempty"`
	Pids      *[]string `json:"pids,omitempty"`
}

// PostInfo 帖子
type PostInfo struct {
	// ChannelId 频道id
	ChannelId *string `json:"channel_id,omitempty"`

	// Content 正文内容
	Content   *string `json:"content,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`

	// ExtPetMark 足迹拓展
	ExtPetMark *PostExtPetMarker `json:"ext_pet_mark,omitempty"`

	// ExtType 频道拓展类型
	ExtType *int `json:"ext_type,omitempty"`

	// Id 评论id
	Id *string `json:"id,omitempty"`

	// MediaIds 媒体id
	MediaIds *[]string `json:"media_ids,omitempty"`

	// ParentId 上级帖子id
	ParentId *string `json:"parent_id,omitempty"`

	// Stats 动态状态信息，只读
	Stats *PostStats `json:"stats,omitempty"`

	// Uid 足迹作者
	Uid       *string `json:"uid,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// PostLoadRes defines model for PostLoadRes.
type PostLoadRes struct {
	Posts *[]PostInfo `json:"posts,omitempty"`
}

// PostQueryByUserRes defines model for PostQueryByUserRes.
type PostQueryByUserRes struct {
	Posts *[]PostInfo `json:"posts,omitempty"`
}

// PostQueryRes defines model for PostQueryRes.
type PostQueryRes struct {
	Posts *[]PostInfo `json:"posts,omitempty"`
}

// PostReactReq defines model for PostReactReq.
type PostReactReq struct {
	PostId  *string `json:"post_id,omitempty"`
	ReactId *string `json:"react_id,omitempty"`
}

// PostReactRes defines model for PostReactRes.
type PostReactRes = map[string]interface{}

// PostReaction defines model for PostReaction.
type PostReaction struct {
	// Count 反应数量
	Count *int32 `json:"count,omitempty"`

	// Id 反应类型
	Id        *string `json:"id,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// PostSignReaction defines model for PostSignReaction.
type PostSignReaction struct {
	// Count 反应数量
	Count *int32 `json:"count,omitempty"`

	// Id 反应类型
	Id        *string `json:"id,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`

	// Users 反应用户信息列表.
	Users *[]UserInfo `json:"users,omitempty"`
}

// PostStats 频道状态, 只读
type PostStats struct {
	LastReplyAt *string         `json:"last_reply_at,omitempty"`
	LastStarAt  *string         `json:"last_star_at,omitempty"`
	Reacts      *[]PostReaction `json:"reacts,omitempty"`

	// RepliesCnt 回复数量
	RepliesCnt *int32              `json:"replies_cnt,omitempty"`
	SignReacts *[]PostSignReaction `json:"sign_reacts,omitempty"`

	// StarsCnt 收藏数
	StarsCnt  *int32  `json:"stars_cnt,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// PostUpdateReq defines model for PostUpdateReq.
type PostUpdateReq struct {
	// Post 帖子
	Post *PostInfo `json:"post,omitempty"`
}

// PostUpdateRes defines model for PostUpdateRes.
type PostUpdateRes struct {
	// Post 帖子
	Post *PostInfo `json:"post,omitempty"`
}

// SystemNotifyGetRes defines model for SystemNotifyGetRes.
type SystemNotifyGetRes struct {
	Notifies *[]NotifyInfo `json:"notifies,omitempty"`
}

// UserFastRegisterData 宠物快速注册信息
type UserFastRegisterData struct {
	// PetAvatarData 宠物头像 base64 data
	PetAvatarData *string `json:"pet_avatar_data,omitempty"`

	// PetName 名字
	PetName *string `json:"pet_name,omitempty"`

	// PetTitle 宠物和人的关系
	PetTitle *string `json:"pet_title,omitempty"`
}

// UserInfo defines model for UserInfo.
type UserInfo struct {
	Avatar    *string        `json:"avatar,omitempty"`
	CreatedAt *string        `json:"created_at,omitempty"`
	Id        *string        `json:"id,omitempty"`
	Name      *string        `json:"name,omitempty"`
	UpdatedAt *string        `json:"updated_at,omitempty"`
	UserPets  *[]UserPetInfo `json:"user_pets,omitempty"`
}

// UserInxReq defines model for UserInxReq.
type UserInxReq struct {
	// ChannelId 互动的频道
	ChannelId *string `json:"channel_id,omitempty"`

	// InxEvent 互动事件
	InxEvent *int `json:"inx_event,omitempty"`

	// InxState 互动状态
	InxState *int `json:"inx_state,omitempty"`

	// InxStateAction 是否撤销状态
	InxStateAction *int `json:"inx_state_action,omitempty"`

	// PostId 互动的帖子，为空则为互动频道
	PostId *string `json:"post_id,omitempty"`
}

// UserInxRes defines model for UserInxRes.
type UserInxRes = map[string]interface{}

// UserPeGetRes defines model for UserPeGetRes.
type UserPeGetRes struct {
	User *UserInfo `json:"user,omitempty"`
}

// UserPetInfo defines model for UserPetInfo.
type UserPetInfo struct {
	Pet       *PetInfo `json:"pet,omitempty"`
	PetStatus *int32   `json:"pet_status,omitempty"`
	PetTitle  *string  `json:"pet_title,omitempty"`
}

// UserPetUpdateReq defines model for UserPetUpdateReq.
type UserPetUpdateReq struct {
	UserPet *UserPetInfo `json:"user_pet,omitempty"`
}

// UserPetUpdateRes defines model for UserPetUpdateRes.
type UserPetUpdateRes struct {
	UserPet *UserPetInfo `json:"user_pet,omitempty"`
}

// BaseServiceChannelDeleteParams defines parameters for BaseServiceChannelDelete.
type BaseServiceChannelDeleteParams struct {
	ChannelId *string `form:"channel_id,omitempty" json:"channel_id,omitempty"`
}

// BaseServiceChannelGetParams defines parameters for BaseServiceChannelGet.
type BaseServiceChannelGetParams struct {
	ChannelId *string `form:"channel_id,omitempty" json:"channel_id,omitempty"`
}

// BaseServiceChannelQueryByLocationBoundParams defines parameters for BaseServiceChannelQueryByLocationBound.
type BaseServiceChannelQueryByLocationBoundParams struct {
	BoundSwLat *float32 `form:"bound.sw.lat,omitempty" json:"bound.sw.lat,omitempty"`
	BoundSwLng *float32 `form:"bound.sw.lng,omitempty" json:"bound.sw.lng,omitempty"`
	BoundNeLat *float32 `form:"bound.ne.lat,omitempty" json:"bound.ne.lat,omitempty"`
	BoundNeLng *float32 `form:"bound.ne.lng,omitempty" json:"bound.ne.lng,omitempty"`

	// MarkerIds 足迹类型id列表
	MarkerIds *[]int32 `form:"marker_ids,omitempty" json:"marker_ids,omitempty"`
}

// BaseServiceChannelQueryByUserParams defines parameters for BaseServiceChannelQueryByUser.
type BaseServiceChannelQueryByUserParams struct {
	UserId *string `form:"user_id,omitempty" json:"user_id,omitempty"`

	// IxnState 互动状态类型, 二选一
	IxnState *int `form:"ixn_state,omitempty" json:"ixn_state,omitempty"`

	// IxnEvent 互动时间类型, 二选一
	IxnEvent *int `form:"ixn_event,omitempty" json:"ixn_event,omitempty"`

	// ExtTypes 类型
	ExtTypes *[]int `form:"ext_types,omitempty" json:"ext_types,omitempty"`
}

// BaseServiceLocationCommonSearchParams defines parameters for BaseServiceLocationCommonSearch.
type BaseServiceLocationCommonSearchParams struct {
	Input *string `form:"input,omitempty" json:"input,omitempty"`
}

// BaseServiceMediaPutURLBatchGetParams defines parameters for BaseServiceMediaPutURLBatchGet.
type BaseServiceMediaPutURLBatchGetParams struct {
	Bucket *int   `form:"bucket,omitempty" json:"bucket,omitempty"`
	Count  *int32 `form:"count,omitempty" json:"count,omitempty"`
}

// BaseServicePostDeleteParams defines parameters for BaseServicePostDelete.
type BaseServicePostDeleteParams struct {
	ChannelId *string `form:"channel_id,omitempty" json:"channel_id,omitempty"`
	PostId    *string `form:"post_id,omitempty" json:"post_id,omitempty"`
}

// BaseServicePostLoadParams defines parameters for BaseServicePostLoad.
type BaseServicePostLoadParams struct {
	ChannelId *string `form:"channel_id,omitempty" json:"channel_id,omitempty"`
	Limit     *int32  `form:"limit,omitempty" json:"limit,omitempty"`

	// LastPostId 从传空加载最新100条
	LastPostId *string `form:"last_post_id,omitempty" json:"last_post_id,omitempty"`
}

// BaseServicePostQueryParams defines parameters for BaseServicePostQuery.
type BaseServicePostQueryParams struct {
	ChannelId *string `form:"channel_id,omitempty" json:"channel_id,omitempty"`
	Limit     *int32  `form:"limit,omitempty" json:"limit,omitempty"`
	MarkerId  *int32  `form:"marker_id,omitempty" json:"marker_id,omitempty"`
}

// BaseServicePostQueryByUserParams defines parameters for BaseServicePostQueryByUser.
type BaseServicePostQueryByUserParams struct {
	UserId *string `form:"user_id,omitempty" json:"user_id,omitempty"`

	// IxnState 互动状态类型, 二选一
	IxnState *int `form:"ixn_state,omitempty" json:"ixn_state,omitempty"`

	// IxnEvent 互动时间类型, 二选一
	IxnEvent *int `form:"ixn_event,omitempty" json:"ixn_event,omitempty"`

	// ExtTypes 类型
	ExtTypes *[]int `form:"ext_types,omitempty" json:"ext_types,omitempty"`
}

// BaseServiceSystemNotifyGetParams defines parameters for BaseServiceSystemNotifyGet.
type BaseServiceSystemNotifyGetParams struct {
	LastNotifyId *string `form:"last_notify_id,omitempty" json:"last_notify_id,omitempty"`
}

// BaseServiceUserPeGetParams defines parameters for BaseServiceUserPeGet.
type BaseServiceUserPeGetParams struct {
	UserId *string `form:"user_id,omitempty" json:"user_id,omitempty"`
}

// BaseServiceChannelCreateJSONRequestBody defines body for BaseServiceChannelCreate for application/json ContentType.
type BaseServiceChannelCreateJSONRequestBody = ChannelCreateReq

// BaseServiceChannelUpdateJSONRequestBody defines body for BaseServiceChannelUpdate for application/json ContentType.
type BaseServiceChannelUpdateJSONRequestBody = ChannelUpdateReq

// BaseServicePostCreateJSONRequestBody defines body for BaseServicePostCreate for application/json ContentType.
type BaseServicePostCreateJSONRequestBody = PostCreateReq

// BaseServicePostUpdateJSONRequestBody defines body for BaseServicePostUpdate for application/json ContentType.
type BaseServicePostUpdateJSONRequestBody = PostUpdateReq

// BaseServicePostReactJSONRequestBody defines body for BaseServicePostReact for application/json ContentType.
type BaseServicePostReactJSONRequestBody = PostReactReq

// BaseServiceFastRegisterWeChatJSONRequestBody defines body for BaseServiceFastRegisterWeChat for application/json ContentType.
type BaseServiceFastRegisterWeChatJSONRequestBody = FastRegisterWeChatReq

// BaseServiceUserInxJSONRequestBody defines body for BaseServiceUserInx for application/json ContentType.
type BaseServiceUserInxJSONRequestBody = UserInxReq

// BaseServiceLoginWeChatJSONRequestBody defines body for BaseServiceLoginWeChat for application/json ContentType.
type BaseServiceLoginWeChatJSONRequestBody = LoginWeChatReq

// BaseServiceUserPetUpdateJSONRequestBody defines body for BaseServiceUserPetUpdate for application/json ContentType.
type BaseServiceUserPetUpdateJSONRequestBody = UserPetUpdateReq

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// BaseServiceChannelDelete request
	BaseServiceChannelDelete(ctx context.Context, params *BaseServiceChannelDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceChannelGet request
	BaseServiceChannelGet(ctx context.Context, params *BaseServiceChannelGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceChannelCreateWithBody request with any body
	BaseServiceChannelCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BaseServiceChannelCreate(ctx context.Context, body BaseServiceChannelCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceChannelUpdateWithBody request with any body
	BaseServiceChannelUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BaseServiceChannelUpdate(ctx context.Context, body BaseServiceChannelUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceChannelQueryByLocationBound request
	BaseServiceChannelQueryByLocationBound(ctx context.Context, params *BaseServiceChannelQueryByLocationBoundParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceChannelQueryByUser request
	BaseServiceChannelQueryByUser(ctx context.Context, params *BaseServiceChannelQueryByUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceLocationCommonSearch request
	BaseServiceLocationCommonSearch(ctx context.Context, params *BaseServiceLocationCommonSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceMediaPutURLBatchGet request
	BaseServiceMediaPutURLBatchGet(ctx context.Context, params *BaseServiceMediaPutURLBatchGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServicePetMarkerInfoList request
	BaseServicePetMarkerInfoList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServicePostDelete request
	BaseServicePostDelete(ctx context.Context, params *BaseServicePostDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServicePostCreateWithBody request with any body
	BaseServicePostCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BaseServicePostCreate(ctx context.Context, body BaseServicePostCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServicePostUpdateWithBody request with any body
	BaseServicePostUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BaseServicePostUpdate(ctx context.Context, body BaseServicePostUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServicePostLoad request
	BaseServicePostLoad(ctx context.Context, params *BaseServicePostLoadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServicePostQuery request
	BaseServicePostQuery(ctx context.Context, params *BaseServicePostQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServicePostQueryByUser request
	BaseServicePostQueryByUser(ctx context.Context, params *BaseServicePostQueryByUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServicePostReactWithBody request with any body
	BaseServicePostReactWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BaseServicePostReact(ctx context.Context, body BaseServicePostReactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceSystemNotifyGet request
	BaseServiceSystemNotifyGet(ctx context.Context, params *BaseServiceSystemNotifyGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceFastRegisterWeChatWithBody request with any body
	BaseServiceFastRegisterWeChatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BaseServiceFastRegisterWeChat(ctx context.Context, body BaseServiceFastRegisterWeChatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceUserInxWithBody request with any body
	BaseServiceUserInxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BaseServiceUserInx(ctx context.Context, body BaseServiceUserInxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceLoginWeChatWithBody request with any body
	BaseServiceLoginWeChatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BaseServiceLoginWeChat(ctx context.Context, body BaseServiceLoginWeChatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceUserPeGet request
	BaseServiceUserPeGet(ctx context.Context, params *BaseServiceUserPeGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceUserPetUpdateWithBody request with any body
	BaseServiceUserPetUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BaseServiceUserPetUpdate(ctx context.Context, body BaseServiceUserPetUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) BaseServiceChannelDelete(ctx context.Context, params *BaseServiceChannelDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelGet(ctx context.Context, params *BaseServiceChannelGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelCreate(ctx context.Context, body BaseServiceChannelCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelUpdate(ctx context.Context, body BaseServiceChannelUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelQueryByLocationBound(ctx context.Context, params *BaseServiceChannelQueryByLocationBoundParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelQueryByLocationBoundRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelQueryByUser(ctx context.Context, params *BaseServiceChannelQueryByUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelQueryByUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceLocationCommonSearch(ctx context.Context, params *BaseServiceLocationCommonSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceLocationCommonSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceMediaPutURLBatchGet(ctx context.Context, params *BaseServiceMediaPutURLBatchGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceMediaPutURLBatchGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServicePetMarkerInfoList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServicePetMarkerInfoListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServicePostDelete(ctx context.Context, params *BaseServicePostDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServicePostDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServicePostCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServicePostCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServicePostCreate(ctx context.Context, body BaseServicePostCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServicePostCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServicePostUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServicePostUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServicePostUpdate(ctx context.Context, body BaseServicePostUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServicePostUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServicePostLoad(ctx context.Context, params *BaseServicePostLoadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServicePostLoadRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServicePostQuery(ctx context.Context, params *BaseServicePostQueryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServicePostQueryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServicePostQueryByUser(ctx context.Context, params *BaseServicePostQueryByUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServicePostQueryByUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServicePostReactWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServicePostReactRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServicePostReact(ctx context.Context, body BaseServicePostReactJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServicePostReactRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceSystemNotifyGet(ctx context.Context, params *BaseServiceSystemNotifyGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceSystemNotifyGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceFastRegisterWeChatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceFastRegisterWeChatRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceFastRegisterWeChat(ctx context.Context, body BaseServiceFastRegisterWeChatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceFastRegisterWeChatRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceUserInxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceUserInxRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceUserInx(ctx context.Context, body BaseServiceUserInxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceUserInxRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceLoginWeChatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceLoginWeChatRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceLoginWeChat(ctx context.Context, body BaseServiceLoginWeChatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceLoginWeChatRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceUserPeGet(ctx context.Context, params *BaseServiceUserPeGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceUserPeGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceUserPetUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceUserPetUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceUserPetUpdate(ctx context.Context, body BaseServiceUserPetUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceUserPetUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewBaseServiceChannelDeleteRequest generates requests for BaseServiceChannelDelete
func NewBaseServiceChannelDeleteRequest(server string, params *BaseServiceChannelDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ChannelId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "channel_id", runtime.ParamLocationQuery, *params.ChannelId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBaseServiceChannelGetRequest generates requests for BaseServiceChannelGet
func NewBaseServiceChannelGetRequest(server string, params *BaseServiceChannelGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ChannelId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "channel_id", runtime.ParamLocationQuery, *params.ChannelId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBaseServiceChannelCreateRequest calls the generic BaseServiceChannelCreate builder with application/json body
func NewBaseServiceChannelCreateRequest(server string, body BaseServiceChannelCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBaseServiceChannelCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewBaseServiceChannelCreateRequestWithBody generates requests for BaseServiceChannelCreate with any type of body
func NewBaseServiceChannelCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBaseServiceChannelUpdateRequest calls the generic BaseServiceChannelUpdate builder with application/json body
func NewBaseServiceChannelUpdateRequest(server string, body BaseServiceChannelUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBaseServiceChannelUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewBaseServiceChannelUpdateRequestWithBody generates requests for BaseServiceChannelUpdate with any type of body
func NewBaseServiceChannelUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBaseServiceChannelQueryByLocationBoundRequest generates requests for BaseServiceChannelQueryByLocationBound
func NewBaseServiceChannelQueryByLocationBoundRequest(server string, params *BaseServiceChannelQueryByLocationBoundParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channel/query_by_location_bound")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.BoundSwLat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bound.sw.lat", runtime.ParamLocationQuery, *params.BoundSwLat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BoundSwLng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bound.sw.lng", runtime.ParamLocationQuery, *params.BoundSwLng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BoundNeLat != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bound.ne.lat", runtime.ParamLocationQuery, *params.BoundNeLat); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.BoundNeLng != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bound.ne.lng", runtime.ParamLocationQuery, *params.BoundNeLng); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MarkerIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marker_ids", runtime.ParamLocationQuery, *params.MarkerIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBaseServiceChannelQueryByUserRequest generates requests for BaseServiceChannelQueryByUser
func NewBaseServiceChannelQueryByUserRequest(server string, params *BaseServiceChannelQueryByUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channel/query_by_user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_id", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IxnState != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ixn_state", runtime.ParamLocationQuery, *params.IxnState); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IxnEvent != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ixn_event", runtime.ParamLocationQuery, *params.IxnEvent); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExtTypes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ext_types", runtime.ParamLocationQuery, *params.ExtTypes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBaseServiceLocationCommonSearchRequest generates requests for BaseServiceLocationCommonSearch
func NewBaseServiceLocationCommonSearchRequest(server string, params *BaseServiceLocationCommonSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/location/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Input != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "input", runtime.ParamLocationQuery, *params.Input); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBaseServiceMediaPutURLBatchGetRequest generates requests for BaseServiceMediaPutURLBatchGet
func NewBaseServiceMediaPutURLBatchGetRequest(server string, params *BaseServiceMediaPutURLBatchGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/media/put_url/batch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Bucket != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bucket", runtime.ParamLocationQuery, *params.Bucket); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBaseServicePetMarkerInfoListRequest generates requests for BaseServicePetMarkerInfoList
func NewBaseServicePetMarkerInfoListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/pet/marker")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBaseServicePostDeleteRequest generates requests for BaseServicePostDelete
func NewBaseServicePostDeleteRequest(server string, params *BaseServicePostDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ChannelId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "channel_id", runtime.ParamLocationQuery, *params.ChannelId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PostId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "post_id", runtime.ParamLocationQuery, *params.PostId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBaseServicePostCreateRequest calls the generic BaseServicePostCreate builder with application/json body
func NewBaseServicePostCreateRequest(server string, body BaseServicePostCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBaseServicePostCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewBaseServicePostCreateRequestWithBody generates requests for BaseServicePostCreate with any type of body
func NewBaseServicePostCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBaseServicePostUpdateRequest calls the generic BaseServicePostUpdate builder with application/json body
func NewBaseServicePostUpdateRequest(server string, body BaseServicePostUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBaseServicePostUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewBaseServicePostUpdateRequestWithBody generates requests for BaseServicePostUpdate with any type of body
func NewBaseServicePostUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBaseServicePostLoadRequest generates requests for BaseServicePostLoad
func NewBaseServicePostLoadRequest(server string, params *BaseServicePostLoadParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post/load")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ChannelId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "channel_id", runtime.ParamLocationQuery, *params.ChannelId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastPostId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_post_id", runtime.ParamLocationQuery, *params.LastPostId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBaseServicePostQueryRequest generates requests for BaseServicePostQuery
func NewBaseServicePostQueryRequest(server string, params *BaseServicePostQueryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post/query")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ChannelId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "channel_id", runtime.ParamLocationQuery, *params.ChannelId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.MarkerId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "marker_id", runtime.ParamLocationQuery, *params.MarkerId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBaseServicePostQueryByUserRequest generates requests for BaseServicePostQueryByUser
func NewBaseServicePostQueryByUserRequest(server string, params *BaseServicePostQueryByUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post/query_by_user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_id", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IxnState != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ixn_state", runtime.ParamLocationQuery, *params.IxnState); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IxnEvent != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ixn_event", runtime.ParamLocationQuery, *params.IxnEvent); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ExtTypes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ext_types", runtime.ParamLocationQuery, *params.ExtTypes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBaseServicePostReactRequest calls the generic BaseServicePostReact builder with application/json body
func NewBaseServicePostReactRequest(server string, body BaseServicePostReactJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBaseServicePostReactRequestWithBody(server, "application/json", bodyReader)
}

// NewBaseServicePostReactRequestWithBody generates requests for BaseServicePostReact with any type of body
func NewBaseServicePostReactRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/post/react")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBaseServiceSystemNotifyGetRequest generates requests for BaseServiceSystemNotifyGet
func NewBaseServiceSystemNotifyGetRequest(server string, params *BaseServiceSystemNotifyGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/system/notify")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.LastNotifyId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "last_notify_id", runtime.ParamLocationQuery, *params.LastNotifyId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBaseServiceFastRegisterWeChatRequest calls the generic BaseServiceFastRegisterWeChat builder with application/json body
func NewBaseServiceFastRegisterWeChatRequest(server string, body BaseServiceFastRegisterWeChatJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBaseServiceFastRegisterWeChatRequestWithBody(server, "application/json", bodyReader)
}

// NewBaseServiceFastRegisterWeChatRequestWithBody generates requests for BaseServiceFastRegisterWeChat with any type of body
func NewBaseServiceFastRegisterWeChatRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/user/fast_reg/wx")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBaseServiceUserInxRequest calls the generic BaseServiceUserInx builder with application/json body
func NewBaseServiceUserInxRequest(server string, body BaseServiceUserInxJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBaseServiceUserInxRequestWithBody(server, "application/json", bodyReader)
}

// NewBaseServiceUserInxRequestWithBody generates requests for BaseServiceUserInx with any type of body
func NewBaseServiceUserInxRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/user/inx")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBaseServiceLoginWeChatRequest calls the generic BaseServiceLoginWeChat builder with application/json body
func NewBaseServiceLoginWeChatRequest(server string, body BaseServiceLoginWeChatJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBaseServiceLoginWeChatRequestWithBody(server, "application/json", bodyReader)
}

// NewBaseServiceLoginWeChatRequestWithBody generates requests for BaseServiceLoginWeChat with any type of body
func NewBaseServiceLoginWeChatRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/user/login/wx")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBaseServiceUserPeGetRequest generates requests for BaseServiceUserPeGet
func NewBaseServiceUserPeGetRequest(server string, params *BaseServiceUserPeGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/user/pet")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_id", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBaseServiceUserPetUpdateRequest calls the generic BaseServiceUserPetUpdate builder with application/json body
func NewBaseServiceUserPetUpdateRequest(server string, body BaseServiceUserPetUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBaseServiceUserPetUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewBaseServiceUserPetUpdateRequestWithBody generates requests for BaseServiceUserPetUpdate with any type of body
func NewBaseServiceUserPetUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/user/pet")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// BaseServiceChannelDeleteWithResponse request
	BaseServiceChannelDeleteWithResponse(ctx context.Context, params *BaseServiceChannelDeleteParams, reqEditors ...RequestEditorFn) (*BaseServiceChannelDeleteResponse, error)

	// BaseServiceChannelGetWithResponse request
	BaseServiceChannelGetWithResponse(ctx context.Context, params *BaseServiceChannelGetParams, reqEditors ...RequestEditorFn) (*BaseServiceChannelGetResponse, error)

	// BaseServiceChannelCreateWithBodyWithResponse request with any body
	BaseServiceChannelCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceChannelCreateResponse, error)

	BaseServiceChannelCreateWithResponse(ctx context.Context, body BaseServiceChannelCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceChannelCreateResponse, error)

	// BaseServiceChannelUpdateWithBodyWithResponse request with any body
	BaseServiceChannelUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceChannelUpdateResponse, error)

	BaseServiceChannelUpdateWithResponse(ctx context.Context, body BaseServiceChannelUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceChannelUpdateResponse, error)

	// BaseServiceChannelQueryByLocationBoundWithResponse request
	BaseServiceChannelQueryByLocationBoundWithResponse(ctx context.Context, params *BaseServiceChannelQueryByLocationBoundParams, reqEditors ...RequestEditorFn) (*BaseServiceChannelQueryByLocationBoundResponse, error)

	// BaseServiceChannelQueryByUserWithResponse request
	BaseServiceChannelQueryByUserWithResponse(ctx context.Context, params *BaseServiceChannelQueryByUserParams, reqEditors ...RequestEditorFn) (*BaseServiceChannelQueryByUserResponse, error)

	// BaseServiceLocationCommonSearchWithResponse request
	BaseServiceLocationCommonSearchWithResponse(ctx context.Context, params *BaseServiceLocationCommonSearchParams, reqEditors ...RequestEditorFn) (*BaseServiceLocationCommonSearchResponse, error)

	// BaseServiceMediaPutURLBatchGetWithResponse request
	BaseServiceMediaPutURLBatchGetWithResponse(ctx context.Context, params *BaseServiceMediaPutURLBatchGetParams, reqEditors ...RequestEditorFn) (*BaseServiceMediaPutURLBatchGetResponse, error)

	// BaseServicePetMarkerInfoListWithResponse request
	BaseServicePetMarkerInfoListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BaseServicePetMarkerInfoListResponse, error)

	// BaseServicePostDeleteWithResponse request
	BaseServicePostDeleteWithResponse(ctx context.Context, params *BaseServicePostDeleteParams, reqEditors ...RequestEditorFn) (*BaseServicePostDeleteResponse, error)

	// BaseServicePostCreateWithBodyWithResponse request with any body
	BaseServicePostCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServicePostCreateResponse, error)

	BaseServicePostCreateWithResponse(ctx context.Context, body BaseServicePostCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServicePostCreateResponse, error)

	// BaseServicePostUpdateWithBodyWithResponse request with any body
	BaseServicePostUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServicePostUpdateResponse, error)

	BaseServicePostUpdateWithResponse(ctx context.Context, body BaseServicePostUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServicePostUpdateResponse, error)

	// BaseServicePostLoadWithResponse request
	BaseServicePostLoadWithResponse(ctx context.Context, params *BaseServicePostLoadParams, reqEditors ...RequestEditorFn) (*BaseServicePostLoadResponse, error)

	// BaseServicePostQueryWithResponse request
	BaseServicePostQueryWithResponse(ctx context.Context, params *BaseServicePostQueryParams, reqEditors ...RequestEditorFn) (*BaseServicePostQueryResponse, error)

	// BaseServicePostQueryByUserWithResponse request
	BaseServicePostQueryByUserWithResponse(ctx context.Context, params *BaseServicePostQueryByUserParams, reqEditors ...RequestEditorFn) (*BaseServicePostQueryByUserResponse, error)

	// BaseServicePostReactWithBodyWithResponse request with any body
	BaseServicePostReactWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServicePostReactResponse, error)

	BaseServicePostReactWithResponse(ctx context.Context, body BaseServicePostReactJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServicePostReactResponse, error)

	// BaseServiceSystemNotifyGetWithResponse request
	BaseServiceSystemNotifyGetWithResponse(ctx context.Context, params *BaseServiceSystemNotifyGetParams, reqEditors ...RequestEditorFn) (*BaseServiceSystemNotifyGetResponse, error)

	// BaseServiceFastRegisterWeChatWithBodyWithResponse request with any body
	BaseServiceFastRegisterWeChatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceFastRegisterWeChatResponse, error)

	BaseServiceFastRegisterWeChatWithResponse(ctx context.Context, body BaseServiceFastRegisterWeChatJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceFastRegisterWeChatResponse, error)

	// BaseServiceUserInxWithBodyWithResponse request with any body
	BaseServiceUserInxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceUserInxResponse, error)

	BaseServiceUserInxWithResponse(ctx context.Context, body BaseServiceUserInxJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceUserInxResponse, error)

	// BaseServiceLoginWeChatWithBodyWithResponse request with any body
	BaseServiceLoginWeChatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceLoginWeChatResponse, error)

	BaseServiceLoginWeChatWithResponse(ctx context.Context, body BaseServiceLoginWeChatJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceLoginWeChatResponse, error)

	// BaseServiceUserPeGetWithResponse request
	BaseServiceUserPeGetWithResponse(ctx context.Context, params *BaseServiceUserPeGetParams, reqEditors ...RequestEditorFn) (*BaseServiceUserPeGetResponse, error)

	// BaseServiceUserPetUpdateWithBodyWithResponse request with any body
	BaseServiceUserPetUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceUserPetUpdateResponse, error)

	BaseServiceUserPetUpdateWithResponse(ctx context.Context, body BaseServiceUserPetUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceUserPetUpdateResponse, error)
}

type BaseServiceChannelDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelDeleteRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceChannelDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceChannelDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceChannelGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelGetRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceChannelGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceChannelGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceChannelCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelCreateRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceChannelCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceChannelCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceChannelUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelUpdateRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceChannelUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceChannelUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceChannelQueryByLocationBoundResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelQueryByLocationBoundRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceChannelQueryByLocationBoundResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceChannelQueryByLocationBoundResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceChannelQueryByUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelQueryByUserRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceChannelQueryByUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceChannelQueryByUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceLocationCommonSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LocationCommonSearchRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceLocationCommonSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceLocationCommonSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceMediaPutURLBatchGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MediaPutURLBatchGetRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceMediaPutURLBatchGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceMediaPutURLBatchGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServicePetMarkerInfoListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PetMarkerInfoRes
}

// Status returns HTTPResponse.Status
func (r BaseServicePetMarkerInfoListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServicePetMarkerInfoListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServicePostDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostDeleteRes
}

// Status returns HTTPResponse.Status
func (r BaseServicePostDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServicePostDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServicePostCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostCreateRes
}

// Status returns HTTPResponse.Status
func (r BaseServicePostCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServicePostCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServicePostUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostUpdateRes
}

// Status returns HTTPResponse.Status
func (r BaseServicePostUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServicePostUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServicePostLoadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostLoadRes
}

// Status returns HTTPResponse.Status
func (r BaseServicePostLoadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServicePostLoadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServicePostQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostQueryRes
}

// Status returns HTTPResponse.Status
func (r BaseServicePostQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServicePostQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServicePostQueryByUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostQueryByUserRes
}

// Status returns HTTPResponse.Status
func (r BaseServicePostQueryByUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServicePostQueryByUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServicePostReactResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostReactRes
}

// Status returns HTTPResponse.Status
func (r BaseServicePostReactResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServicePostReactResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceSystemNotifyGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SystemNotifyGetRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceSystemNotifyGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceSystemNotifyGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceFastRegisterWeChatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FastRegisterWeChatRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceFastRegisterWeChatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceFastRegisterWeChatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceUserInxResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserInxRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceUserInxResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceUserInxResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceLoginWeChatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LoginWeChatRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceLoginWeChatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceLoginWeChatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceUserPeGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserPeGetRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceUserPeGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceUserPeGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceUserPetUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserPetUpdateRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceUserPetUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceUserPetUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// BaseServiceChannelDeleteWithResponse request returning *BaseServiceChannelDeleteResponse
func (c *ClientWithResponses) BaseServiceChannelDeleteWithResponse(ctx context.Context, params *BaseServiceChannelDeleteParams, reqEditors ...RequestEditorFn) (*BaseServiceChannelDeleteResponse, error) {
	rsp, err := c.BaseServiceChannelDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelDeleteResponse(rsp)
}

// BaseServiceChannelGetWithResponse request returning *BaseServiceChannelGetResponse
func (c *ClientWithResponses) BaseServiceChannelGetWithResponse(ctx context.Context, params *BaseServiceChannelGetParams, reqEditors ...RequestEditorFn) (*BaseServiceChannelGetResponse, error) {
	rsp, err := c.BaseServiceChannelGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelGetResponse(rsp)
}

// BaseServiceChannelCreateWithBodyWithResponse request with arbitrary body returning *BaseServiceChannelCreateResponse
func (c *ClientWithResponses) BaseServiceChannelCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceChannelCreateResponse, error) {
	rsp, err := c.BaseServiceChannelCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelCreateResponse(rsp)
}

func (c *ClientWithResponses) BaseServiceChannelCreateWithResponse(ctx context.Context, body BaseServiceChannelCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceChannelCreateResponse, error) {
	rsp, err := c.BaseServiceChannelCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelCreateResponse(rsp)
}

// BaseServiceChannelUpdateWithBodyWithResponse request with arbitrary body returning *BaseServiceChannelUpdateResponse
func (c *ClientWithResponses) BaseServiceChannelUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceChannelUpdateResponse, error) {
	rsp, err := c.BaseServiceChannelUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelUpdateResponse(rsp)
}

func (c *ClientWithResponses) BaseServiceChannelUpdateWithResponse(ctx context.Context, body BaseServiceChannelUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceChannelUpdateResponse, error) {
	rsp, err := c.BaseServiceChannelUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelUpdateResponse(rsp)
}

// BaseServiceChannelQueryByLocationBoundWithResponse request returning *BaseServiceChannelQueryByLocationBoundResponse
func (c *ClientWithResponses) BaseServiceChannelQueryByLocationBoundWithResponse(ctx context.Context, params *BaseServiceChannelQueryByLocationBoundParams, reqEditors ...RequestEditorFn) (*BaseServiceChannelQueryByLocationBoundResponse, error) {
	rsp, err := c.BaseServiceChannelQueryByLocationBound(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelQueryByLocationBoundResponse(rsp)
}

// BaseServiceChannelQueryByUserWithResponse request returning *BaseServiceChannelQueryByUserResponse
func (c *ClientWithResponses) BaseServiceChannelQueryByUserWithResponse(ctx context.Context, params *BaseServiceChannelQueryByUserParams, reqEditors ...RequestEditorFn) (*BaseServiceChannelQueryByUserResponse, error) {
	rsp, err := c.BaseServiceChannelQueryByUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelQueryByUserResponse(rsp)
}

// BaseServiceLocationCommonSearchWithResponse request returning *BaseServiceLocationCommonSearchResponse
func (c *ClientWithResponses) BaseServiceLocationCommonSearchWithResponse(ctx context.Context, params *BaseServiceLocationCommonSearchParams, reqEditors ...RequestEditorFn) (*BaseServiceLocationCommonSearchResponse, error) {
	rsp, err := c.BaseServiceLocationCommonSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceLocationCommonSearchResponse(rsp)
}

// BaseServiceMediaPutURLBatchGetWithResponse request returning *BaseServiceMediaPutURLBatchGetResponse
func (c *ClientWithResponses) BaseServiceMediaPutURLBatchGetWithResponse(ctx context.Context, params *BaseServiceMediaPutURLBatchGetParams, reqEditors ...RequestEditorFn) (*BaseServiceMediaPutURLBatchGetResponse, error) {
	rsp, err := c.BaseServiceMediaPutURLBatchGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceMediaPutURLBatchGetResponse(rsp)
}

// BaseServicePetMarkerInfoListWithResponse request returning *BaseServicePetMarkerInfoListResponse
func (c *ClientWithResponses) BaseServicePetMarkerInfoListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BaseServicePetMarkerInfoListResponse, error) {
	rsp, err := c.BaseServicePetMarkerInfoList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServicePetMarkerInfoListResponse(rsp)
}

// BaseServicePostDeleteWithResponse request returning *BaseServicePostDeleteResponse
func (c *ClientWithResponses) BaseServicePostDeleteWithResponse(ctx context.Context, params *BaseServicePostDeleteParams, reqEditors ...RequestEditorFn) (*BaseServicePostDeleteResponse, error) {
	rsp, err := c.BaseServicePostDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServicePostDeleteResponse(rsp)
}

// BaseServicePostCreateWithBodyWithResponse request with arbitrary body returning *BaseServicePostCreateResponse
func (c *ClientWithResponses) BaseServicePostCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServicePostCreateResponse, error) {
	rsp, err := c.BaseServicePostCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServicePostCreateResponse(rsp)
}

func (c *ClientWithResponses) BaseServicePostCreateWithResponse(ctx context.Context, body BaseServicePostCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServicePostCreateResponse, error) {
	rsp, err := c.BaseServicePostCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServicePostCreateResponse(rsp)
}

// BaseServicePostUpdateWithBodyWithResponse request with arbitrary body returning *BaseServicePostUpdateResponse
func (c *ClientWithResponses) BaseServicePostUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServicePostUpdateResponse, error) {
	rsp, err := c.BaseServicePostUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServicePostUpdateResponse(rsp)
}

func (c *ClientWithResponses) BaseServicePostUpdateWithResponse(ctx context.Context, body BaseServicePostUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServicePostUpdateResponse, error) {
	rsp, err := c.BaseServicePostUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServicePostUpdateResponse(rsp)
}

// BaseServicePostLoadWithResponse request returning *BaseServicePostLoadResponse
func (c *ClientWithResponses) BaseServicePostLoadWithResponse(ctx context.Context, params *BaseServicePostLoadParams, reqEditors ...RequestEditorFn) (*BaseServicePostLoadResponse, error) {
	rsp, err := c.BaseServicePostLoad(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServicePostLoadResponse(rsp)
}

// BaseServicePostQueryWithResponse request returning *BaseServicePostQueryResponse
func (c *ClientWithResponses) BaseServicePostQueryWithResponse(ctx context.Context, params *BaseServicePostQueryParams, reqEditors ...RequestEditorFn) (*BaseServicePostQueryResponse, error) {
	rsp, err := c.BaseServicePostQuery(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServicePostQueryResponse(rsp)
}

// BaseServicePostQueryByUserWithResponse request returning *BaseServicePostQueryByUserResponse
func (c *ClientWithResponses) BaseServicePostQueryByUserWithResponse(ctx context.Context, params *BaseServicePostQueryByUserParams, reqEditors ...RequestEditorFn) (*BaseServicePostQueryByUserResponse, error) {
	rsp, err := c.BaseServicePostQueryByUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServicePostQueryByUserResponse(rsp)
}

// BaseServicePostReactWithBodyWithResponse request with arbitrary body returning *BaseServicePostReactResponse
func (c *ClientWithResponses) BaseServicePostReactWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServicePostReactResponse, error) {
	rsp, err := c.BaseServicePostReactWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServicePostReactResponse(rsp)
}

func (c *ClientWithResponses) BaseServicePostReactWithResponse(ctx context.Context, body BaseServicePostReactJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServicePostReactResponse, error) {
	rsp, err := c.BaseServicePostReact(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServicePostReactResponse(rsp)
}

// BaseServiceSystemNotifyGetWithResponse request returning *BaseServiceSystemNotifyGetResponse
func (c *ClientWithResponses) BaseServiceSystemNotifyGetWithResponse(ctx context.Context, params *BaseServiceSystemNotifyGetParams, reqEditors ...RequestEditorFn) (*BaseServiceSystemNotifyGetResponse, error) {
	rsp, err := c.BaseServiceSystemNotifyGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceSystemNotifyGetResponse(rsp)
}

// BaseServiceFastRegisterWeChatWithBodyWithResponse request with arbitrary body returning *BaseServiceFastRegisterWeChatResponse
func (c *ClientWithResponses) BaseServiceFastRegisterWeChatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceFastRegisterWeChatResponse, error) {
	rsp, err := c.BaseServiceFastRegisterWeChatWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceFastRegisterWeChatResponse(rsp)
}

func (c *ClientWithResponses) BaseServiceFastRegisterWeChatWithResponse(ctx context.Context, body BaseServiceFastRegisterWeChatJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceFastRegisterWeChatResponse, error) {
	rsp, err := c.BaseServiceFastRegisterWeChat(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceFastRegisterWeChatResponse(rsp)
}

// BaseServiceUserInxWithBodyWithResponse request with arbitrary body returning *BaseServiceUserInxResponse
func (c *ClientWithResponses) BaseServiceUserInxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceUserInxResponse, error) {
	rsp, err := c.BaseServiceUserInxWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceUserInxResponse(rsp)
}

func (c *ClientWithResponses) BaseServiceUserInxWithResponse(ctx context.Context, body BaseServiceUserInxJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceUserInxResponse, error) {
	rsp, err := c.BaseServiceUserInx(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceUserInxResponse(rsp)
}

// BaseServiceLoginWeChatWithBodyWithResponse request with arbitrary body returning *BaseServiceLoginWeChatResponse
func (c *ClientWithResponses) BaseServiceLoginWeChatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceLoginWeChatResponse, error) {
	rsp, err := c.BaseServiceLoginWeChatWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceLoginWeChatResponse(rsp)
}

func (c *ClientWithResponses) BaseServiceLoginWeChatWithResponse(ctx context.Context, body BaseServiceLoginWeChatJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceLoginWeChatResponse, error) {
	rsp, err := c.BaseServiceLoginWeChat(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceLoginWeChatResponse(rsp)
}

// BaseServiceUserPeGetWithResponse request returning *BaseServiceUserPeGetResponse
func (c *ClientWithResponses) BaseServiceUserPeGetWithResponse(ctx context.Context, params *BaseServiceUserPeGetParams, reqEditors ...RequestEditorFn) (*BaseServiceUserPeGetResponse, error) {
	rsp, err := c.BaseServiceUserPeGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceUserPeGetResponse(rsp)
}

// BaseServiceUserPetUpdateWithBodyWithResponse request with arbitrary body returning *BaseServiceUserPetUpdateResponse
func (c *ClientWithResponses) BaseServiceUserPetUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceUserPetUpdateResponse, error) {
	rsp, err := c.BaseServiceUserPetUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceUserPetUpdateResponse(rsp)
}

func (c *ClientWithResponses) BaseServiceUserPetUpdateWithResponse(ctx context.Context, body BaseServiceUserPetUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceUserPetUpdateResponse, error) {
	rsp, err := c.BaseServiceUserPetUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceUserPetUpdateResponse(rsp)
}

// ParseBaseServiceChannelDeleteResponse parses an HTTP response from a BaseServiceChannelDeleteWithResponse call
func ParseBaseServiceChannelDeleteResponse(rsp *http.Response) (*BaseServiceChannelDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceChannelDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelDeleteRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceChannelGetResponse parses an HTTP response from a BaseServiceChannelGetWithResponse call
func ParseBaseServiceChannelGetResponse(rsp *http.Response) (*BaseServiceChannelGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceChannelGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelGetRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceChannelCreateResponse parses an HTTP response from a BaseServiceChannelCreateWithResponse call
func ParseBaseServiceChannelCreateResponse(rsp *http.Response) (*BaseServiceChannelCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceChannelCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelCreateRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceChannelUpdateResponse parses an HTTP response from a BaseServiceChannelUpdateWithResponse call
func ParseBaseServiceChannelUpdateResponse(rsp *http.Response) (*BaseServiceChannelUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceChannelUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelUpdateRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceChannelQueryByLocationBoundResponse parses an HTTP response from a BaseServiceChannelQueryByLocationBoundWithResponse call
func ParseBaseServiceChannelQueryByLocationBoundResponse(rsp *http.Response) (*BaseServiceChannelQueryByLocationBoundResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceChannelQueryByLocationBoundResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelQueryByLocationBoundRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceChannelQueryByUserResponse parses an HTTP response from a BaseServiceChannelQueryByUserWithResponse call
func ParseBaseServiceChannelQueryByUserResponse(rsp *http.Response) (*BaseServiceChannelQueryByUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceChannelQueryByUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelQueryByUserRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceLocationCommonSearchResponse parses an HTTP response from a BaseServiceLocationCommonSearchWithResponse call
func ParseBaseServiceLocationCommonSearchResponse(rsp *http.Response) (*BaseServiceLocationCommonSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceLocationCommonSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LocationCommonSearchRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceMediaPutURLBatchGetResponse parses an HTTP response from a BaseServiceMediaPutURLBatchGetWithResponse call
func ParseBaseServiceMediaPutURLBatchGetResponse(rsp *http.Response) (*BaseServiceMediaPutURLBatchGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceMediaPutURLBatchGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MediaPutURLBatchGetRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServicePetMarkerInfoListResponse parses an HTTP response from a BaseServicePetMarkerInfoListWithResponse call
func ParseBaseServicePetMarkerInfoListResponse(rsp *http.Response) (*BaseServicePetMarkerInfoListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServicePetMarkerInfoListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PetMarkerInfoRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServicePostDeleteResponse parses an HTTP response from a BaseServicePostDeleteWithResponse call
func ParseBaseServicePostDeleteResponse(rsp *http.Response) (*BaseServicePostDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServicePostDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostDeleteRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServicePostCreateResponse parses an HTTP response from a BaseServicePostCreateWithResponse call
func ParseBaseServicePostCreateResponse(rsp *http.Response) (*BaseServicePostCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServicePostCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostCreateRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServicePostUpdateResponse parses an HTTP response from a BaseServicePostUpdateWithResponse call
func ParseBaseServicePostUpdateResponse(rsp *http.Response) (*BaseServicePostUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServicePostUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostUpdateRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServicePostLoadResponse parses an HTTP response from a BaseServicePostLoadWithResponse call
func ParseBaseServicePostLoadResponse(rsp *http.Response) (*BaseServicePostLoadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServicePostLoadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostLoadRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServicePostQueryResponse parses an HTTP response from a BaseServicePostQueryWithResponse call
func ParseBaseServicePostQueryResponse(rsp *http.Response) (*BaseServicePostQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServicePostQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostQueryRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServicePostQueryByUserResponse parses an HTTP response from a BaseServicePostQueryByUserWithResponse call
func ParseBaseServicePostQueryByUserResponse(rsp *http.Response) (*BaseServicePostQueryByUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServicePostQueryByUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostQueryByUserRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServicePostReactResponse parses an HTTP response from a BaseServicePostReactWithResponse call
func ParseBaseServicePostReactResponse(rsp *http.Response) (*BaseServicePostReactResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServicePostReactResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostReactRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceSystemNotifyGetResponse parses an HTTP response from a BaseServiceSystemNotifyGetWithResponse call
func ParseBaseServiceSystemNotifyGetResponse(rsp *http.Response) (*BaseServiceSystemNotifyGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceSystemNotifyGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SystemNotifyGetRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceFastRegisterWeChatResponse parses an HTTP response from a BaseServiceFastRegisterWeChatWithResponse call
func ParseBaseServiceFastRegisterWeChatResponse(rsp *http.Response) (*BaseServiceFastRegisterWeChatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceFastRegisterWeChatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FastRegisterWeChatRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceUserInxResponse parses an HTTP response from a BaseServiceUserInxWithResponse call
func ParseBaseServiceUserInxResponse(rsp *http.Response) (*BaseServiceUserInxResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceUserInxResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserInxRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceLoginWeChatResponse parses an HTTP response from a BaseServiceLoginWeChatWithResponse call
func ParseBaseServiceLoginWeChatResponse(rsp *http.Response) (*BaseServiceLoginWeChatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceLoginWeChatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LoginWeChatRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceUserPeGetResponse parses an HTTP response from a BaseServiceUserPeGetWithResponse call
func ParseBaseServiceUserPeGetResponse(rsp *http.Response) (*BaseServiceUserPeGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceUserPeGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserPeGetRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceUserPetUpdateResponse parses an HTTP response from a BaseServiceUserPetUpdateWithResponse call
func ParseBaseServiceUserPetUpdateResponse(rsp *http.Response) (*BaseServiceUserPetUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceUserPetUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserPetUpdateRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (DELETE /v1/channel)
	BaseServiceChannelDelete(c *gin.Context, params BaseServiceChannelDeleteParams)

	// (GET /v1/channel)
	BaseServiceChannelGet(c *gin.Context, params BaseServiceChannelGetParams)

	// (POST /v1/channel)
	BaseServiceChannelCreate(c *gin.Context)

	// (PUT /v1/channel)
	BaseServiceChannelUpdate(c *gin.Context)

	// (GET /v1/channel/query_by_location_bound)
	BaseServiceChannelQueryByLocationBound(c *gin.Context, params BaseServiceChannelQueryByLocationBoundParams)

	// (GET /v1/channel/query_by_user)
	BaseServiceChannelQueryByUser(c *gin.Context, params BaseServiceChannelQueryByUserParams)

	// (GET /v1/location/search)
	BaseServiceLocationCommonSearch(c *gin.Context, params BaseServiceLocationCommonSearchParams)

	// (GET /v1/media/put_url/batch)
	BaseServiceMediaPutURLBatchGet(c *gin.Context, params BaseServiceMediaPutURLBatchGetParams)

	// (GET /v1/pet/marker)
	BaseServicePetMarkerInfoList(c *gin.Context)

	// (DELETE /v1/post)
	BaseServicePostDelete(c *gin.Context, params BaseServicePostDeleteParams)

	// (POST /v1/post)
	BaseServicePostCreate(c *gin.Context)

	// (PUT /v1/post)
	BaseServicePostUpdate(c *gin.Context)

	// (GET /v1/post/load)
	BaseServicePostLoad(c *gin.Context, params BaseServicePostLoadParams)

	// (GET /v1/post/query)
	BaseServicePostQuery(c *gin.Context, params BaseServicePostQueryParams)

	// (GET /v1/post/query_by_user)
	BaseServicePostQueryByUser(c *gin.Context, params BaseServicePostQueryByUserParams)

	// (POST /v1/post/react)
	BaseServicePostReact(c *gin.Context)

	// (GET /v1/system/notify)
	BaseServiceSystemNotifyGet(c *gin.Context, params BaseServiceSystemNotifyGetParams)

	// (POST /v1/user/fast_reg/wx)
	BaseServiceFastRegisterWeChat(c *gin.Context)

	// (POST /v1/user/inx)
	BaseServiceUserInx(c *gin.Context)

	// (POST /v1/user/login/wx)
	BaseServiceLoginWeChat(c *gin.Context)

	// (GET /v1/user/pet)
	BaseServiceUserPeGet(c *gin.Context, params BaseServiceUserPeGetParams)

	// (PUT /v1/user/pet)
	BaseServiceUserPetUpdate(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// BaseServiceChannelDelete operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceChannelDelete(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params BaseServiceChannelDeleteParams

	// ------------- Optional query parameter "channel_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "channel_id", c.Request.URL.Query(), &params.ChannelId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter channel_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceChannelDelete(c, params)
}

// BaseServiceChannelGet operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceChannelGet(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params BaseServiceChannelGetParams

	// ------------- Optional query parameter "channel_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "channel_id", c.Request.URL.Query(), &params.ChannelId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter channel_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceChannelGet(c, params)
}

// BaseServiceChannelCreate operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceChannelCreate(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceChannelCreate(c)
}

// BaseServiceChannelUpdate operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceChannelUpdate(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceChannelUpdate(c)
}

// BaseServiceChannelQueryByLocationBound operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceChannelQueryByLocationBound(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params BaseServiceChannelQueryByLocationBoundParams

	// ------------- Optional query parameter "bound.sw.lat" -------------

	err = runtime.BindQueryParameter("form", true, false, "bound.sw.lat", c.Request.URL.Query(), &params.BoundSwLat)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bound.sw.lat: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "bound.sw.lng" -------------

	err = runtime.BindQueryParameter("form", true, false, "bound.sw.lng", c.Request.URL.Query(), &params.BoundSwLng)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bound.sw.lng: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "bound.ne.lat" -------------

	err = runtime.BindQueryParameter("form", true, false, "bound.ne.lat", c.Request.URL.Query(), &params.BoundNeLat)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bound.ne.lat: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "bound.ne.lng" -------------

	err = runtime.BindQueryParameter("form", true, false, "bound.ne.lng", c.Request.URL.Query(), &params.BoundNeLng)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bound.ne.lng: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "marker_ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "marker_ids", c.Request.URL.Query(), &params.MarkerIds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter marker_ids: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceChannelQueryByLocationBound(c, params)
}

// BaseServiceChannelQueryByUser operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceChannelQueryByUser(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params BaseServiceChannelQueryByUserParams

	// ------------- Optional query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "user_id", c.Request.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "ixn_state" -------------

	err = runtime.BindQueryParameter("form", true, false, "ixn_state", c.Request.URL.Query(), &params.IxnState)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ixn_state: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "ixn_event" -------------

	err = runtime.BindQueryParameter("form", true, false, "ixn_event", c.Request.URL.Query(), &params.IxnEvent)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ixn_event: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "ext_types" -------------

	err = runtime.BindQueryParameter("form", true, false, "ext_types", c.Request.URL.Query(), &params.ExtTypes)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ext_types: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceChannelQueryByUser(c, params)
}

// BaseServiceLocationCommonSearch operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceLocationCommonSearch(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params BaseServiceLocationCommonSearchParams

	// ------------- Optional query parameter "input" -------------

	err = runtime.BindQueryParameter("form", true, false, "input", c.Request.URL.Query(), &params.Input)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter input: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceLocationCommonSearch(c, params)
}

// BaseServiceMediaPutURLBatchGet operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceMediaPutURLBatchGet(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params BaseServiceMediaPutURLBatchGetParams

	// ------------- Optional query parameter "bucket" -------------

	err = runtime.BindQueryParameter("form", true, false, "bucket", c.Request.URL.Query(), &params.Bucket)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter bucket: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", c.Request.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter count: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceMediaPutURLBatchGet(c, params)
}

// BaseServicePetMarkerInfoList operation middleware
func (siw *ServerInterfaceWrapper) BaseServicePetMarkerInfoList(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServicePetMarkerInfoList(c)
}

// BaseServicePostDelete operation middleware
func (siw *ServerInterfaceWrapper) BaseServicePostDelete(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params BaseServicePostDeleteParams

	// ------------- Optional query parameter "channel_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "channel_id", c.Request.URL.Query(), &params.ChannelId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter channel_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "post_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "post_id", c.Request.URL.Query(), &params.PostId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter post_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServicePostDelete(c, params)
}

// BaseServicePostCreate operation middleware
func (siw *ServerInterfaceWrapper) BaseServicePostCreate(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServicePostCreate(c)
}

// BaseServicePostUpdate operation middleware
func (siw *ServerInterfaceWrapper) BaseServicePostUpdate(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServicePostUpdate(c)
}

// BaseServicePostLoad operation middleware
func (siw *ServerInterfaceWrapper) BaseServicePostLoad(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params BaseServicePostLoadParams

	// ------------- Optional query parameter "channel_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "channel_id", c.Request.URL.Query(), &params.ChannelId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter channel_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "last_post_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "last_post_id", c.Request.URL.Query(), &params.LastPostId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter last_post_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServicePostLoad(c, params)
}

// BaseServicePostQuery operation middleware
func (siw *ServerInterfaceWrapper) BaseServicePostQuery(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params BaseServicePostQueryParams

	// ------------- Optional query parameter "channel_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "channel_id", c.Request.URL.Query(), &params.ChannelId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter channel_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "marker_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "marker_id", c.Request.URL.Query(), &params.MarkerId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter marker_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServicePostQuery(c, params)
}

// BaseServicePostQueryByUser operation middleware
func (siw *ServerInterfaceWrapper) BaseServicePostQueryByUser(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params BaseServicePostQueryByUserParams

	// ------------- Optional query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "user_id", c.Request.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "ixn_state" -------------

	err = runtime.BindQueryParameter("form", true, false, "ixn_state", c.Request.URL.Query(), &params.IxnState)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ixn_state: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "ixn_event" -------------

	err = runtime.BindQueryParameter("form", true, false, "ixn_event", c.Request.URL.Query(), &params.IxnEvent)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ixn_event: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "ext_types" -------------

	err = runtime.BindQueryParameter("form", true, false, "ext_types", c.Request.URL.Query(), &params.ExtTypes)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ext_types: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServicePostQueryByUser(c, params)
}

// BaseServicePostReact operation middleware
func (siw *ServerInterfaceWrapper) BaseServicePostReact(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServicePostReact(c)
}

// BaseServiceSystemNotifyGet operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceSystemNotifyGet(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params BaseServiceSystemNotifyGetParams

	// ------------- Optional query parameter "last_notify_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "last_notify_id", c.Request.URL.Query(), &params.LastNotifyId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter last_notify_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceSystemNotifyGet(c, params)
}

// BaseServiceFastRegisterWeChat operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceFastRegisterWeChat(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceFastRegisterWeChat(c)
}

// BaseServiceUserInx operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceUserInx(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceUserInx(c)
}

// BaseServiceLoginWeChat operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceLoginWeChat(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceLoginWeChat(c)
}

// BaseServiceUserPeGet operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceUserPeGet(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params BaseServiceUserPeGetParams

	// ------------- Optional query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "user_id", c.Request.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceUserPeGet(c, params)
}

// BaseServiceUserPetUpdate operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceUserPetUpdate(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceUserPetUpdate(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.DELETE(options.BaseURL+"/v1/channel", wrapper.BaseServiceChannelDelete)
	router.GET(options.BaseURL+"/v1/channel", wrapper.BaseServiceChannelGet)
	router.POST(options.BaseURL+"/v1/channel", wrapper.BaseServiceChannelCreate)
	router.PUT(options.BaseURL+"/v1/channel", wrapper.BaseServiceChannelUpdate)
	router.GET(options.BaseURL+"/v1/channel/query_by_location_bound", wrapper.BaseServiceChannelQueryByLocationBound)
	router.GET(options.BaseURL+"/v1/channel/query_by_user", wrapper.BaseServiceChannelQueryByUser)
	router.GET(options.BaseURL+"/v1/location/search", wrapper.BaseServiceLocationCommonSearch)
	router.GET(options.BaseURL+"/v1/media/put_url/batch", wrapper.BaseServiceMediaPutURLBatchGet)
	router.GET(options.BaseURL+"/v1/pet/marker", wrapper.BaseServicePetMarkerInfoList)
	router.DELETE(options.BaseURL+"/v1/post", wrapper.BaseServicePostDelete)
	router.POST(options.BaseURL+"/v1/post", wrapper.BaseServicePostCreate)
	router.PUT(options.BaseURL+"/v1/post", wrapper.BaseServicePostUpdate)
	router.GET(options.BaseURL+"/v1/post/load", wrapper.BaseServicePostLoad)
	router.GET(options.BaseURL+"/v1/post/query", wrapper.BaseServicePostQuery)
	router.GET(options.BaseURL+"/v1/post/query_by_user", wrapper.BaseServicePostQueryByUser)
	router.POST(options.BaseURL+"/v1/post/react", wrapper.BaseServicePostReact)
	router.GET(options.BaseURL+"/v1/system/notify", wrapper.BaseServiceSystemNotifyGet)
	router.POST(options.BaseURL+"/v1/user/fast_reg/wx", wrapper.BaseServiceFastRegisterWeChat)
	router.POST(options.BaseURL+"/v1/user/inx", wrapper.BaseServiceUserInx)
	router.POST(options.BaseURL+"/v1/user/login/wx", wrapper.BaseServiceLoginWeChat)
	router.GET(options.BaseURL+"/v1/user/pet", wrapper.BaseServiceUserPeGet)
	router.PUT(options.BaseURL+"/v1/user/pet", wrapper.BaseServiceUserPetUpdate)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xbX1Pbxhb/Kh7d++jBtL1zH3hqk7Qd7qW3abiZPrSMR1iLrWJLrrQmdjPMOC2EhD8x",
	"N+VPQ2gCFG5p7wScCU3BDsmXsST7qV/hzu5KsmTvSut/0M70zSDtnrO/c/bsOb89ui0k1ExWVYACdWHk",
	"tqAnUiAj4p9XU6KigPRVDYgQ3ABfov9JQE9ochbKqiKMCMa9x0a10tj7T+POt0JUyGpqFmhQBnh4ggxH",
	"P/+qgSlhRPhLrCkrZguK2VJGlSlVmJ2NCrCQBcKIoE5+ARJQmI22qoHnHqikayANXEmsl97Pww81NZdt",
	"B4XAYb3et6pz5tK3xvP1NmjEGRGKGv6VTn88JYx8Fqz5R0CSRaL3RJQqztg/Mb4pIf1kBWpqu1bWUbFW",
	"XYpGjNKx+fjE3CgLLgA61GQlicZCGaYBa0XG6or1Y9ncWWjsfdc+OADP9/NwTE2IZDLG3Ntl6+szFlqS",
	"pAFdbx97/ePRiLFdNr4vRiO105XApSVUVZP4Eb+uygq8ise0Q15/+aL+5qx2vmKdH7VIno0KipihYEhW",
	"aKyuGM82afrpUCQbkMODPYCO42Gc6I87Mvz4pkUdxjOiNh0XYbvi5nbR3CiTJZubLxubJzT10XCgxWWJ",
	"YiZjoWI9KNffLFhbc+bOQv2oLEtCVJAhyOC3p1QtgyQj133n7ebssgJBEmhCc3GipokFR5weTygUfW1N",
	"18uNhZIQ5Zk8CyBjLvP7A6K2tbRpLW3yTxpgjw8BvIgghl9g7Lbam13zznF7wMYRVrK9oM3EIA/j5J/0",
	"WcnutZ5XjSdLXoyAkstQcU+i+BkHeci/LVuDb/ve9MVdFA4llr6R0Ws0T07bm6VbxdxQ166bL8p593xH",
	"Muwt377yxZdm8Q6x7W+vlo3Sz/XjKhKTY2NADvB6cZ6GRC4rsf0hwPU+yQGtcKXgAHFFzSlSkMvj3240",
	"4Hb+1qgQrtFNHWiXq4gbgakpAzYgOqKx5aK0MJ2WpwFrg+IXsqoOA1/QoagxX5CnASMUWl+f1X95Yq6X",
	"oxHys1b9ob57WD/aN0rHnHFW1VmB1jjdMJ6tdhK00TJYUXvtZX2zhFUlPx1V9xrfzfPNHuj6UWFGBrdY",
	"wp8eWNtL5nq5x2PiJtaAmnXb4dZJdQZ6jDhqDPDA+kDU4Q2QlHUItE/B1ZQI6bXGm/81ik/NF4fG3eX6",
	"8a/m86/b1q6BZFwSoRimEooDXqnX0JjZqHArH0+oEuCMdjS9KTBBdRooVC/K6UDjUZUNnRNir6qZjKqM",
	"A1FLpFh1y5ialJUAfK1HVeN8nYFsZ8j4RF0wJM1SqU3sZC4xDShbliTyfCkLgPGclqZkncdVo7Rx88YY",
	"7SDN5hijjLuPjPkDxqgc9dwevYZrODKSrwzDkFzPwZs3xq6IMJFiZaAZ9B73EeipSXkOwH+pUJ4q0LNS",
	"60XVqj5tFLespwftAU1VIKBG2mc/mBsLxt154+iMWvEFp7PUpAirgKuT3rOh6wDS/bBZ/XPjOylrMIVi",
	"G6CuZVIDQKI+CQEhCRSJ7DjX93PsU1Gmy3AZh7YnTincXu3KXzEeZEFCZjyCIszxFow5hq4hB/stICdT",
	"kEsGw+Qf4UKY4ee4irTZA0YNps4ATUyCuCZKMvdquVydYx6mvWAKZEA8oaZVrXNYQ5GiRqMsIKQEf1Lu",
	"R58rKnloHgot4neEqbQqwiZsSi4zSVBLK0meF+nydejjV1swUHUYumpVh+zj0CtAH5SAYMIUvfF+HrrW",
	"YVI2dPbPzyz1QhplW+dod3MOh9EhfXOTEoaVj8fZNTj9uBnUsQfyMO5sLR7L+yw3CBaIBkz9eK5+VKED",
	"g7MUBtH488Pa+bd+cjHExlEhK2pAgVT71E4XrcqPxLB0ZTpkcBCgLPrGWDw0i3c6I3EcInq7XwwOUnBM",
	"FSVmsOggGrthg3dfhbE0FyL/UiTfAGICMk+AOCOX0dAo+sMQQexAjV+wL2paM5MclbkprRiVtU6YG5oj",
	"k1ncqNEfRx6Xk8ofcT2kDNaZs64dmvd+JSHCuLdZ3z0c8gY8vtKZ1zN7Jiw1kE0XuiYksYt3tvNci1Ni",
	"PVJGZjGcxuMnxv5KRxyknFTiXajoc0yKmjzcZh94TJbNfdTjIPLFAFKxdwHjBR2CDKEbWEyHgp7av7ms",
	"5mEvuLYOlWFs97ijHev+T15ik1EVooSNsAYuv0mdCTcBRCZFHfz9bxH8Jo2NAjDOuKNm3k6jMYzmAFv0",
	"w+VapWJtzRnzL6wXVT5iyg1HARRJd7QOPxPBEYlRvszvKmhRDvXD7SujSp6634Kqh1rlobF4aG3Nuf03",
	"FGYmHwcz1DKCjK5VlmrVl3x5upJHoRoCpib4NOhsrnjzdG6Jc98dG6v/NR/uN9aKHUzsSZcYYJFs/rdX",
	"y7XTivVTxbj3qHZaIU9ZOAYajZ5KESdghZ/eWW6vk9GYEw6qxHFQtLU7otZ8sYATqusg6FRxNllHW4tD",
	"lD4wUeiQBomcJsPCOBphXzAAUQPaezmYav71gQPoPz79txAl7XVoJvK0CXAKwqwwO4s3B41eeNeRdw1M",
	"yYqM/qsPiVl5GhQiV1y5nyuRd2UlkgKiBDT0B4p7EfRE1eSvSF+C2+YlXBF1MA60GTkBIu9dHxWiwgzQ",
	"dCJveGh46C2EqZoFipiVhRHhnaHhoXfQ2STCFF5vbOatmOcWUMI0EK1LcKfxaN/dXcgcWJNRya+Dr/0O",
	"y9HEDIA4Ff7stiCjub5ENZrgxHNvfLSxFWleOYFSPz2rKjox1NvDwy1XC2I2m5bJZVrsC51EpOZ8HPeb",
	"TQ4MG9GPwMf/JE4kJtFSvGsWJsitEiUCLt+35n+UJfPpQf14z27XOFo210/cJCEMyQ8B/KPBaIfMzjF0",
	"EsfABtUwwAhTKqBlfpkDOryiSoV+r7BJ9+JFIkmyBiRhBGo5MDt4hJtscBcg52iOihsRuDEmwXmwGDfP",
	"msvBuHkAdYrxbNQbVWN4n8YnC3G3K21SzSk4vwkIGsZ22Vq9W1/+xnh84g0fHNah9W7xxRCs2JB+ayiN",
	"Lz+aeIXfi4RNqCT7OKEC+qwhmrALDWlMLiGMZInQOkKUKtVzIeKV2f3NyEXEdVZPYL/2h5NSB+wKmzfD",
	"qX79qGycr/uOVgdyzh2CEkS+jYFTzpCTNRpUUhGviEZqleVG8X7ttMhwDDmv2BUa1RcZRRNLNun17kQ2",
	"qTR7k+1SpjQhzt1TmOMzy8NL83vnTqNLd3eif0zHLV5MR28Ut6y1Q7vNeHXbOtkLcmha9xifS8sKygQu",
	"K1Vkdb11CS6+UIzZPVqxSREGAGzeP2sslOoPfjVKG8bxWf35bu10sfZqp7E3Zz17bayukF4uJuSUVizO",
	"05X0rnW6uajJPr74oM7E7HUZpDkZ7WldWjMLYCzj9hnQjYjDvv1JB/4exY06TMP5ekvGZB0KA0SkrTmm",
	"WyzcmohRmGMujJTngYt3ezz6Wk4y/NPh8C4rvPg7WvpWidpYo3o0DOuBlqH+lqMLro/87Uh9KkDtjwec",
	"fvhAaAdaffovzy4B2p7rTuS7sbQqsitMO1sm3ry4Uz8/D4N8DE13AXEjLWfkTs+19ty3+qD2asf6qULW",
	"Rj5+fGt42Px+l5GUNr+6ueSY5fTt9GJ6sjYu2++vGKv3yFEa5gGf2Ij9Xl0gsMr+HWVKvialns3cY9ns",
	"HGhhZXNLZ9efNfOfNXOof/dcMGMvx5053qaSgGj2+IlRWQtzY9yzM8DcwW0DvITUwe0M7BJxHbfdxHBn",
	"TSGs9PJ872M+ODBKPwQh39LQwxdA8KlMlLnMc5nSjNQlvigixqZIR10ydivP9mvj9VHtza5RLlmHS0al",
	"RNqLyNd9pMmIQG4cbdXO7gcB3/6B44B8n/4F6AVvAvrnnL1YS1YCrOQ9VoOMYDeaDAh5T+/RBcPtaaDp",
	"BeO0mpSVTraDvRHwFvhcibhtFZ4mimDO1P20dUAmaflO94LN0vLpbi+msbtsqOcAaRqs/zJnbjwKryHc",
	"bqr+JY8TA3Ztt/mrXxyHF7BQpsPXBzXA0OFr67qEAOLr9erYVz1NXNiXvO1bn00gF7EH3nY8yzvB7MTs",
	"/wMAAP//dCdMnDxNAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
