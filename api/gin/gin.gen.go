// Package apigin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package apigin

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// PetInfo defines model for PetInfo.
type PetInfo struct {
	Avatar    *string    `json:"avatar,omitempty"`
	BirthDate *string    `json:"birthDate,omitempty"`
	Breed     *string    `json:"breed,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Gender    *uint32    `json:"gender,omitempty"`
	Id        *uint32    `json:"id,omitempty"`
	Name      *string    `json:"name,omitempty"`
	Specie    *string    `json:"specie,omitempty"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
	Weight    *int32     `json:"weight,omitempty"`
}

// PetInfoReg 宠物注册信息
type PetInfoReg struct {
	// AvatarData base64 data
	AvatarData *string `json:"avatarData,omitempty"`

	// Name 名字
	Name *string `json:"name,omitempty"`
}

// UserInfo defines model for UserInfo.
type UserInfo struct {
	Id   *uint32    `json:"id,omitempty"`
	Pets *[]PetInfo `json:"pets,omitempty"`
}

// WeChatFastRegisterReq defines model for WeChatFastRegisterReq.
type WeChatFastRegisterReq struct {
	// Pet 宠物注册信息
	Pet    *PetInfoReg `json:"pet,omitempty"`
	WxCode *string     `json:"wxCode,omitempty"`
}

// WeChatFastRegisterResp defines model for WeChatFastRegisterResp.
type WeChatFastRegisterResp struct {
	Data *WeChatLoginRespData `json:"data,omitempty"`
}

// WeChatLoginReq 登录请求
type WeChatLoginReq struct {
	WxCode *string `json:"wxCode,omitempty"`
}

// WeChatLoginResp defines model for WeChatLoginResp.
type WeChatLoginResp struct {
	Data *WeChatLoginRespData `json:"data,omitempty"`
}

// WeChatLoginRespData defines model for WeChatLoginRespData.
type WeChatLoginRespData struct {
	Token    *string   `json:"token,omitempty"`
	UserInfo *UserInfo `json:"userInfo,omitempty"`
}

// BaseServiceWeChatLoginJSONRequestBody defines body for BaseServiceWeChatLogin for application/json ContentType.
type BaseServiceWeChatLoginJSONRequestBody = WeChatLoginReq

// BaseServiceWeChatFastRegisterJSONRequestBody defines body for BaseServiceWeChatFastRegister for application/json ContentType.
type BaseServiceWeChatFastRegisterJSONRequestBody = WeChatFastRegisterReq

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// BaseServiceWeChatLoginWithBody request with any body
	BaseServiceWeChatLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BaseServiceWeChatLogin(ctx context.Context, body BaseServiceWeChatLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceWeChatFastRegisterWithBody request with any body
	BaseServiceWeChatFastRegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BaseServiceWeChatFastRegister(ctx context.Context, body BaseServiceWeChatFastRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) BaseServiceWeChatLoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceWeChatLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceWeChatLogin(ctx context.Context, body BaseServiceWeChatLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceWeChatLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceWeChatFastRegisterWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceWeChatFastRegisterRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceWeChatFastRegister(ctx context.Context, body BaseServiceWeChatFastRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceWeChatFastRegisterRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewBaseServiceWeChatLoginRequest calls the generic BaseServiceWeChatLogin builder with application/json body
func NewBaseServiceWeChatLoginRequest(server string, body BaseServiceWeChatLoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBaseServiceWeChatLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewBaseServiceWeChatLoginRequestWithBody generates requests for BaseServiceWeChatLogin with any type of body
func NewBaseServiceWeChatLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/wxlogin")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBaseServiceWeChatFastRegisterRequest calls the generic BaseServiceWeChatFastRegister builder with application/json body
func NewBaseServiceWeChatFastRegisterRequest(server string, body BaseServiceWeChatFastRegisterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBaseServiceWeChatFastRegisterRequestWithBody(server, "application/json", bodyReader)
}

// NewBaseServiceWeChatFastRegisterRequestWithBody generates requests for BaseServiceWeChatFastRegister with any type of body
func NewBaseServiceWeChatFastRegisterRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/auth/wxlogin_with_register")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// BaseServiceWeChatLoginWithBodyWithResponse request with any body
	BaseServiceWeChatLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceWeChatLoginResponse, error)

	BaseServiceWeChatLoginWithResponse(ctx context.Context, body BaseServiceWeChatLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceWeChatLoginResponse, error)

	// BaseServiceWeChatFastRegisterWithBodyWithResponse request with any body
	BaseServiceWeChatFastRegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceWeChatFastRegisterResponse, error)

	BaseServiceWeChatFastRegisterWithResponse(ctx context.Context, body BaseServiceWeChatFastRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceWeChatFastRegisterResponse, error)
}

type BaseServiceWeChatLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WeChatLoginResp
}

// Status returns HTTPResponse.Status
func (r BaseServiceWeChatLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceWeChatLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceWeChatFastRegisterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WeChatFastRegisterResp
}

// Status returns HTTPResponse.Status
func (r BaseServiceWeChatFastRegisterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceWeChatFastRegisterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// BaseServiceWeChatLoginWithBodyWithResponse request with arbitrary body returning *BaseServiceWeChatLoginResponse
func (c *ClientWithResponses) BaseServiceWeChatLoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceWeChatLoginResponse, error) {
	rsp, err := c.BaseServiceWeChatLoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceWeChatLoginResponse(rsp)
}

func (c *ClientWithResponses) BaseServiceWeChatLoginWithResponse(ctx context.Context, body BaseServiceWeChatLoginJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceWeChatLoginResponse, error) {
	rsp, err := c.BaseServiceWeChatLogin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceWeChatLoginResponse(rsp)
}

// BaseServiceWeChatFastRegisterWithBodyWithResponse request with arbitrary body returning *BaseServiceWeChatFastRegisterResponse
func (c *ClientWithResponses) BaseServiceWeChatFastRegisterWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceWeChatFastRegisterResponse, error) {
	rsp, err := c.BaseServiceWeChatFastRegisterWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceWeChatFastRegisterResponse(rsp)
}

func (c *ClientWithResponses) BaseServiceWeChatFastRegisterWithResponse(ctx context.Context, body BaseServiceWeChatFastRegisterJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceWeChatFastRegisterResponse, error) {
	rsp, err := c.BaseServiceWeChatFastRegister(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceWeChatFastRegisterResponse(rsp)
}

// ParseBaseServiceWeChatLoginResponse parses an HTTP response from a BaseServiceWeChatLoginWithResponse call
func ParseBaseServiceWeChatLoginResponse(rsp *http.Response) (*BaseServiceWeChatLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceWeChatLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WeChatLoginResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceWeChatFastRegisterResponse parses an HTTP response from a BaseServiceWeChatFastRegisterWithResponse call
func ParseBaseServiceWeChatFastRegisterResponse(rsp *http.Response) (*BaseServiceWeChatFastRegisterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceWeChatFastRegisterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WeChatFastRegisterResp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /v1/auth/wxlogin)
	BaseServiceWeChatLogin(c *gin.Context)

	// (POST /v1/auth/wxlogin_with_register)
	BaseServiceWeChatFastRegister(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// BaseServiceWeChatLogin operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceWeChatLogin(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceWeChatLogin(c)
}

// BaseServiceWeChatFastRegister operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceWeChatFastRegister(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceWeChatFastRegister(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.POST(options.BaseURL+"/v1/auth/wxlogin", wrapper.BaseServiceWeChatLogin)
	router.POST(options.BaseURL+"/v1/auth/wxlogin_with_register", wrapper.BaseServiceWeChatFastRegister)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RVX2sTTxT9KmF+v8eYTVvxYd/6R6EoWiriQy1lunuzO7WZmczcpC0lUH0Qqtb6oIhF",
	"0CJCRWwVH/yH9stkE/stZHa3TbY71kSovizD3LNzztxzZmaVeKIqBQeOmrirRHshVGk8nAKc5BVhhlIJ",
	"CQoZxAXaoEiVGeGKBOISjYrxgDSLZJ4pDCcogr2qAHxrxVNAEfxRNNWKUFWKxCU+RTiDrAqkmP8lAO6D",
	"yuDrjOPIcBfMOEIAyqCZ3y+S06pdvZbgMXupLv1B5S8BC8Is/leamkdTYn4BPDS/p+ZMQ2CW8EF7iklk",
	"ghOXRLsvOuuv2x92ojv3W/vb7Vt7pGi1cIIizf8+TzWcO1vwTdEi/LA/xzgfbkRvn+TxNu3XNCh7svp3",
	"SUKSV4ZQjQf/K6gQl/zndPPspGF2DpPcFUOVoit2dddhPKR4gWqchoBpBDUNtbxUCdgnrfHIGL48Lnxb",
	"fPoVoWVehZ86eJKMZK1LImDcLBKbfgJpCqzlPe48/Rp9e/xj72P7/e1cov5ge0eS/ua+UmCOEcVN4PbD",
	"3RPXk/QcxdoiwkyxdI1sUw/WtjqPdlqftqK72+1nG+b74FW0+TLa3Wp9Xi/d4IWZ85dnC6NTkwVRKVwF",
	"1WAelMyZYLhoKMaohnTaoEiRNEDpZPFyqVwaMnsQEjiVjLhkpFQujRj3KIbxxp3GkEPrGDpLy4umRXFr",
	"hEbLGf++29rfjt5tdnbuRV82kzgkaklMoahBTvpZVT3tJ0WioFYHjWPCXzEMnuAIPCajUi4yL17CWdCC",
	"d5+jgZJQS7pteJgyzw2qOsQTWgquE7eHy+XTYdcyoc927srFJBQ00MSd6W0OmTWF4x7MLTEM51R69Pt2",
	"JNp/c7D2PPUlvv57s/R7j3rvm1O16vjt+k8cy92uAxvXraymz2IG0Zxt/gwAAP//qVVSxF8JAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
