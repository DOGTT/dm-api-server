// Package apigin provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package apigin

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// BoundCoord defines model for BoundCoord.
type BoundCoord struct {
	Ne *PointCoord `json:"ne,omitempty"`
	Sw *PointCoord `json:"sw,omitempty"`
}

// ChannelBaseQueryByBoundReq defines model for ChannelBaseQueryByBoundReq.
type ChannelBaseQueryByBoundReq struct {
	// Bound 坐标范围
	Bound *BoundCoord `json:"bound,omitempty"`

	// TypeIds 足迹类型id列表
	TypeIds *[]int32 `json:"type_ids,omitempty"`
}

// ChannelBaseQueryByBoundRes defines model for ChannelBaseQueryByBoundRes.
type ChannelBaseQueryByBoundRes struct {
	Channels *[]ChannelInfo `json:"channels,omitempty"`
}

// ChannelBaseQueryByUserReq defines model for ChannelBaseQueryByUserReq.
type ChannelBaseQueryByUserReq struct {
	// IxnEvent 互动时间类型, 二选一
	IxnEvent *int `json:"ixn_event,omitempty"`

	// IxnState 互动状态类型, 二选一
	IxnState *int    `json:"ixn_state,omitempty"`
	UserId   *string `json:"user_id,omitempty"`
}

// ChannelBaseQueryByUserRes defines model for ChannelBaseQueryByUserRes.
type ChannelBaseQueryByUserRes struct {
	Channels *[]ChannelInfo `json:"channels,omitempty"`
}

// ChannelCreateReq 足迹创建
type ChannelCreateReq struct {
	// Channel 频道信息
	Channel *ChannelInfo `json:"channel,omitempty"`

	// PostInit 创建时候可以携带第一条帖子
	PostInit *PostInfo `json:"post_init,omitempty"`
}

// ChannelCreateRes defines model for ChannelCreateRes.
type ChannelCreateRes struct {
	// Channel 频道信息
	Channel *ChannelInfo `json:"channel,omitempty"`
}

// ChannelDeleteRes defines model for ChannelDeleteRes.
type ChannelDeleteRes = map[string]interface{}

// ChannelFullQueryByIdRes defines model for ChannelFullQueryByIdRes.
type ChannelFullQueryByIdRes struct {
	// Channel 频道信息
	Channel *ChannelInfo `json:"channel,omitempty"`
}

// ChannelInfo 频道信息
type ChannelInfo struct {
	// Avatar 头像
	Avatar    *MediaInfo `json:"avatar,omitempty"`
	CreatedAt *string    `json:"created_at,omitempty"`

	// Id 足迹频道 ID
	Id *string `json:"id,omitempty"`

	// Intro 简介, 可更新
	Intro    *string       `json:"intro,omitempty"`
	Location *LocationInfo `json:"location,omitempty"`

	// Stats 动态状态信息，只读
	Stats *ChannelStats `json:"stats,omitempty"`

	// Title 足迹名称, 可更新
	Title *string `json:"title,omitempty"`

	// TypeId 足迹频道类型, 不可更新
	TypeId *uint32 `json:"type_id,omitempty"`

	// Uid 足迹作者, 不可更新
	Uid       *string `json:"uid,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// ChannelInxReq defines model for ChannelInxReq.
type ChannelInxReq struct {
	ChanId *string `json:"chan_id,omitempty"`

	// InxEvent 互动事件
	InxEvent *int `json:"inx_event,omitempty"`

	// InxState 互动状态
	InxState *int `json:"inx_state,omitempty"`

	// InxStateUndo 是否撤销状态
	InxStateUndo *int `json:"inx_state_undo,omitempty"`

	// PetInxEvent 宠物互动事件
	PetInxEvent *int `json:"pet_inx_event,omitempty"`
}

// ChannelInxRes defines model for ChannelInxRes.
type ChannelInxRes = map[string]interface{}

// ChannelPostCreateReq defines model for ChannelPostCreateReq.
type ChannelPostCreateReq struct {
	// Post 频道帖子或者评论
	Post *PostInfo `json:"post,omitempty"`
}

// ChannelPostCreateRes defines model for ChannelPostCreateRes.
type ChannelPostCreateRes struct {
	// Post 频道帖子或者评论
	Post *PostInfo `json:"post,omitempty"`
}

// ChannelPostDeleteRes defines model for ChannelPostDeleteRes.
type ChannelPostDeleteRes = map[string]interface{}

// ChannelPostInxReq defines model for ChannelPostInxReq.
type ChannelPostInxReq struct {
	// InxState 互动状态
	InxState *int `json:"inx_state,omitempty"`

	// InxStateUndo 是否撤销状态
	InxStateUndo *int `json:"inx_state_undo,omitempty"`

	// IxnEvent 互动事件
	IxnEvent *int    `json:"ixn_event,omitempty"`
	PostId   *string `json:"post_id,omitempty"`
}

// ChannelPostInxRes defines model for ChannelPostInxRes.
type ChannelPostInxRes = map[string]interface{}

// ChannelPostLoadReq defines model for ChannelPostLoadReq.
type ChannelPostLoadReq struct {
	ChanId *string `json:"chan_id,omitempty"`

	// LastPostId 从传空加载最新100条
	LastPostId *string `json:"last_post_id,omitempty"`
}

// ChannelPostLoadRes defines model for ChannelPostLoadRes.
type ChannelPostLoadRes struct {
	Posts *[]PostInfo `json:"posts,omitempty"`
}

// ChannelPostUpdateReq defines model for ChannelPostUpdateReq.
type ChannelPostUpdateReq struct {
	// Post 频道帖子或者评论
	Post *PostInfo `json:"post,omitempty"`
}

// ChannelPostUpdateRes defines model for ChannelPostUpdateRes.
type ChannelPostUpdateRes struct {
	// Post 频道帖子或者评论
	Post *PostInfo `json:"post,omitempty"`
}

// ChannelStats 频道状态, 只读
type ChannelStats struct {
	LastPeeAt  *string `json:"last_pee_at,omitempty"`
	LastPostAt *string `json:"last_post_at,omitempty"`
	LastStarAt *string `json:"last_star_at,omitempty"`

	// PeeCnt 宠物到访次数
	PeeCnt *int32 `json:"pee_cnt,omitempty"`

	// PostsCnt 帖子数量
	PostsCnt *int32 `json:"posts_cnt,omitempty"`

	// StarsCnt 收藏数
	StarsCnt  *int32  `json:"stars_cnt,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`

	// ViewsCnt 查看数
	ViewsCnt *int32 `json:"views_cnt,omitempty"`
}

// ChannelTypeInfo 足迹频道类型
type ChannelTypeInfo struct {
	CoverageRadius *int32  `json:"coverage_radius,omitempty"`
	CreatedAt      *string `json:"created_at,omitempty"`
	Id             *string `json:"id,omitempty"`
	Name           *string `json:"name,omitempty"`
	ThemeColor     *string `json:"theme_color,omitempty"`
	UpdatedAt      *string `json:"updated_at,omitempty"`
}

// ChannelTypeListRes defines model for ChannelTypeListRes.
type ChannelTypeListRes struct {
	ChannelTypes *[]ChannelTypeInfo `json:"channel_types,omitempty"`
}

// ChannelUpdateReq 足迹更新
type ChannelUpdateReq struct {
	// Channel 频道信息
	Channel *ChannelInfo `json:"channel,omitempty"`
}

// ChannelUpdateRes defines model for ChannelUpdateRes.
type ChannelUpdateRes struct {
	// Channel 频道信息
	Channel *ChannelInfo `json:"channel,omitempty"`
}

// FastRegisterWeChatReq 快速注册请求
type FastRegisterWeChatReq struct {
	// RegData 宠物快速注册信息
	RegData *UserFastRegisterData `json:"reg_data,omitempty"`
	WxCode  *string               `json:"wx_code,omitempty"`
}

// FastRegisterWeChatRes defines model for FastRegisterWeChatRes.
type FastRegisterWeChatRes struct {
	Token *string   `json:"token,omitempty"`
	User  *UserInfo `json:"user,omitempty"`
}

// LocationCommonSearchRes defines model for LocationCommonSearchRes.
type LocationCommonSearchRes = map[string]interface{}

// LocationInfo defines model for LocationInfo.
type LocationInfo struct {
	// Address POI 地址, 不可更新
	Address *string `json:"address,omitempty"`

	// LngLat 足迹位置, 不可更新
	LngLat *PointCoord `json:"lng_lat,omitempty"`
}

// LoginWeChatReq 登录请求
type LoginWeChatReq struct {
	WxCode *string `json:"wx_code,omitempty"`
}

// LoginWeChatRes defines model for LoginWeChatRes.
type LoginWeChatRes struct {
	Token *string   `json:"token,omitempty"`
	User  *UserInfo `json:"user,omitempty"`
}

// MediaInfo defines model for MediaInfo.
type MediaInfo struct {
	// GetUrl 读取URL
	GetUrl *string `json:"get_url,omitempty"`

	// PutUrl 写入URL
	PutUrl *string `json:"put_url,omitempty"`

	// Type 类型
	Type *int `json:"type,omitempty"`

	// Uuid ID, 可写入
	Uuid *string `json:"uuid,omitempty"`
}

// MediaPutURLBatchGetRes defines model for MediaPutURLBatchGetRes.
type MediaPutURLBatchGetRes struct {
	Media *[]MediaInfo `json:"media,omitempty"`
}

// NotifyInfo 系统通知
type NotifyInfo struct {
	// Content 正文内容
	Content   *string `json:"content,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`

	// Id 通知id
	Id        *string `json:"id,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// PetInfo defines model for PetInfo.
type PetInfo struct {
	Avatar    *MediaInfo `json:"avatar,omitempty"`
	BirthDate *string    `json:"birth_date,omitempty"`
	Breed     *string    `json:"breed,omitempty"`
	CreatedAt *string    `json:"created_at,omitempty"`
	Gender    *uint32    `json:"gender,omitempty"`
	Id        *string    `json:"id,omitempty"`
	Intro     *string    `json:"intro,omitempty"`
	Name      *string    `json:"name,omitempty"`
	Size      *string    `json:"size,omitempty"`
	Specie    *string    `json:"specie,omitempty"`
	Status    *int32     `json:"status,omitempty"`
	Uid       *string    `json:"uid,omitempty"`
	UpdatedAt *string    `json:"updated_at,omitempty"`
	Weight    *int32     `json:"weight,omitempty"`
}

// PointCoord defines model for PointCoord.
type PointCoord struct {
	Lat *float32 `json:"lat,omitempty"`
	Lng *float32 `json:"lng,omitempty"`
}

// PostInfo 频道帖子或者评论
type PostInfo struct {
	// Content 正文内容
	Content   *string `json:"content,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`

	// Id 评论id
	Id *string `json:"id,omitempty"`

	// MediaIds 媒体id
	MediaIds *[]string `json:"media_ids,omitempty"`

	// ParentId 上级帖子id
	ParentId *string `json:"parent_id,omitempty"`

	// RootId 根id, 频道id
	RootId *string `json:"root_id,omitempty"`

	// Stats 动态状态信息，只读
	Stats *PostStats `json:"stats,omitempty"`

	// Uid 足迹作者, 不可更新
	Uid       *string `json:"uid,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// PostReactionInfo defines model for PostReactionInfo.
type PostReactionInfo struct {
	// Count 反应数量
	Count *int32 `json:"count,omitempty"`

	// Id 反应类型
	Id *string `json:"id,omitempty"`

	// Signs 反应用户信息列表.
	Signs *[]PostReactionSignInfo `json:"signs,omitempty"`

	// Type 反应类型
	Type      *int    `json:"type,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// PostReactionSignInfo defines model for PostReactionSignInfo.
type PostReactionSignInfo struct {
	UserId   *string `json:"user_id,omitempty"`
	UserName *string `json:"user_name,omitempty"`
}

// PostStats 频道状态, 只读
type PostStats struct {
	LastReplyAt *string             `json:"last_reply_at,omitempty"`
	LastStarAt  *string             `json:"last_star_at,omitempty"`
	Reactions   *[]PostReactionInfo `json:"reactions,omitempty"`

	// RepliesCnt 回复数量
	RepliesCnt *int32 `json:"replies_cnt,omitempty"`

	// StarsCnt 收藏数
	StarsCnt  *int32  `json:"stars_cnt,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// SystemNotifyQueryReq defines model for SystemNotifyQueryReq.
type SystemNotifyQueryReq struct {
	LastNotifyId *string `json:"last_notify_id,omitempty"`
}

// SystemNotifyQueryRes defines model for SystemNotifyQueryRes.
type SystemNotifyQueryRes struct {
	Notifies *[]NotifyInfo `json:"notifies,omitempty"`
}

// UserFastRegisterData 宠物快速注册信息
type UserFastRegisterData struct {
	// PetAvatarData 宠物头像 base64 data
	PetAvatarData *string `json:"pet_avatar_data,omitempty"`

	// PetName 名字
	PetName *string `json:"pet_name,omitempty"`

	// PetTitle 宠物和人的关系
	PetTitle *string `json:"pet_title,omitempty"`
}

// UserInfo defines model for UserInfo.
type UserInfo struct {
	Id       *string        `json:"id,omitempty"`
	Name     *string        `json:"name,omitempty"`
	UserPets *[]UserPetInfo `json:"user_pets,omitempty"`
}

// UserPeGetRes defines model for UserPeGetRes.
type UserPeGetRes struct {
	User *UserInfo `json:"user,omitempty"`
}

// UserPetInfo defines model for UserPetInfo.
type UserPetInfo struct {
	Pet       *PetInfo `json:"pet,omitempty"`
	PetStatus *int32   `json:"pet_status,omitempty"`
	PetTitle  *string  `json:"pet_title,omitempty"`
}

// UserPetUpdateReq defines model for UserPetUpdateReq.
type UserPetUpdateReq struct {
	UserPet *UserPetInfo `json:"user_pet,omitempty"`
}

// UserPetUpdateRes defines model for UserPetUpdateRes.
type UserPetUpdateRes struct {
	UserPet *UserPetInfo `json:"user_pet,omitempty"`
}

// BaseServiceChannelDeleteParams defines parameters for BaseServiceChannelDelete.
type BaseServiceChannelDeleteParams struct {
	ChanId *string `form:"chan_id,omitempty" json:"chan_id,omitempty"`
}

// BaseServiceChannelFullQueryByIdParams defines parameters for BaseServiceChannelFullQueryById.
type BaseServiceChannelFullQueryByIdParams struct {
	ChanId *string `form:"chan_id,omitempty" json:"chan_id,omitempty"`
}

// BaseServiceChannelPostDeleteParams defines parameters for BaseServiceChannelPostDelete.
type BaseServiceChannelPostDeleteParams struct {
	ChanId *string `form:"chan_id,omitempty" json:"chan_id,omitempty"`
	PostId *string `form:"post_id,omitempty" json:"post_id,omitempty"`
}

// BaseServiceLocationCommonSearchParams defines parameters for BaseServiceLocationCommonSearch.
type BaseServiceLocationCommonSearchParams struct {
	Input *string `form:"input,omitempty" json:"input,omitempty"`
}

// BaseServiceMediaPutURLBatchGetParams defines parameters for BaseServiceMediaPutURLBatchGet.
type BaseServiceMediaPutURLBatchGetParams struct {
	MediaType *int   `form:"media_type,omitempty" json:"media_type,omitempty"`
	Count     *int32 `form:"count,omitempty" json:"count,omitempty"`
}

// BaseServiceUserPeGetParams defines parameters for BaseServiceUserPeGet.
type BaseServiceUserPeGetParams struct {
	UserId *string `form:"user_id,omitempty" json:"user_id,omitempty"`
}

// BaseServiceChannelCreateJSONRequestBody defines body for BaseServiceChannelCreate for application/json ContentType.
type BaseServiceChannelCreateJSONRequestBody = ChannelCreateReq

// BaseServiceChannelUpdateJSONRequestBody defines body for BaseServiceChannelUpdate for application/json ContentType.
type BaseServiceChannelUpdateJSONRequestBody = ChannelUpdateReq

// BaseServiceChannelBaseQueryByBoundJSONRequestBody defines body for BaseServiceChannelBaseQueryByBound for application/json ContentType.
type BaseServiceChannelBaseQueryByBoundJSONRequestBody = ChannelBaseQueryByBoundReq

// BaseServiceChannelBaseQueryByUserJSONRequestBody defines body for BaseServiceChannelBaseQueryByUser for application/json ContentType.
type BaseServiceChannelBaseQueryByUserJSONRequestBody = ChannelBaseQueryByUserReq

// BaseServiceChannelInxJSONRequestBody defines body for BaseServiceChannelInx for application/json ContentType.
type BaseServiceChannelInxJSONRequestBody = ChannelInxReq

// BaseServiceChannelPostCreateJSONRequestBody defines body for BaseServiceChannelPostCreate for application/json ContentType.
type BaseServiceChannelPostCreateJSONRequestBody = ChannelPostCreateReq

// BaseServiceChannelPostUpdateJSONRequestBody defines body for BaseServiceChannelPostUpdate for application/json ContentType.
type BaseServiceChannelPostUpdateJSONRequestBody = ChannelPostUpdateReq

// BaseServiceChannelPostInxJSONRequestBody defines body for BaseServiceChannelPostInx for application/json ContentType.
type BaseServiceChannelPostInxJSONRequestBody = ChannelPostInxReq

// BaseServiceChannelPostLoadJSONRequestBody defines body for BaseServiceChannelPostLoad for application/json ContentType.
type BaseServiceChannelPostLoadJSONRequestBody = ChannelPostLoadReq

// BaseServiceSystemNotifyQueryJSONRequestBody defines body for BaseServiceSystemNotifyQuery for application/json ContentType.
type BaseServiceSystemNotifyQueryJSONRequestBody = SystemNotifyQueryReq

// BaseServiceFastRegisterWeChatJSONRequestBody defines body for BaseServiceFastRegisterWeChat for application/json ContentType.
type BaseServiceFastRegisterWeChatJSONRequestBody = FastRegisterWeChatReq

// BaseServiceLoginWeChatJSONRequestBody defines body for BaseServiceLoginWeChat for application/json ContentType.
type BaseServiceLoginWeChatJSONRequestBody = LoginWeChatReq

// BaseServiceUserPetUpdateJSONRequestBody defines body for BaseServiceUserPetUpdate for application/json ContentType.
type BaseServiceUserPetUpdateJSONRequestBody = UserPetUpdateReq

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// BaseServiceChannelDelete request
	BaseServiceChannelDelete(ctx context.Context, params *BaseServiceChannelDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceChannelCreateWithBody request with any body
	BaseServiceChannelCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BaseServiceChannelCreate(ctx context.Context, body BaseServiceChannelCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceChannelUpdateWithBody request with any body
	BaseServiceChannelUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BaseServiceChannelUpdate(ctx context.Context, body BaseServiceChannelUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceChannelBaseQueryByBoundWithBody request with any body
	BaseServiceChannelBaseQueryByBoundWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BaseServiceChannelBaseQueryByBound(ctx context.Context, body BaseServiceChannelBaseQueryByBoundJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceChannelBaseQueryByUserWithBody request with any body
	BaseServiceChannelBaseQueryByUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BaseServiceChannelBaseQueryByUser(ctx context.Context, body BaseServiceChannelBaseQueryByUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceChannelFullQueryById request
	BaseServiceChannelFullQueryById(ctx context.Context, params *BaseServiceChannelFullQueryByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceChannelInxWithBody request with any body
	BaseServiceChannelInxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BaseServiceChannelInx(ctx context.Context, body BaseServiceChannelInxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceChannelPostDelete request
	BaseServiceChannelPostDelete(ctx context.Context, params *BaseServiceChannelPostDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceChannelPostCreateWithBody request with any body
	BaseServiceChannelPostCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BaseServiceChannelPostCreate(ctx context.Context, body BaseServiceChannelPostCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceChannelPostUpdateWithBody request with any body
	BaseServiceChannelPostUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BaseServiceChannelPostUpdate(ctx context.Context, body BaseServiceChannelPostUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceChannelPostInxWithBody request with any body
	BaseServiceChannelPostInxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BaseServiceChannelPostInx(ctx context.Context, body BaseServiceChannelPostInxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceChannelPostLoadWithBody request with any body
	BaseServiceChannelPostLoadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BaseServiceChannelPostLoad(ctx context.Context, body BaseServiceChannelPostLoadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceChannelTypeList request
	BaseServiceChannelTypeList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceLocationCommonSearch request
	BaseServiceLocationCommonSearch(ctx context.Context, params *BaseServiceLocationCommonSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceMediaPutURLBatchGet request
	BaseServiceMediaPutURLBatchGet(ctx context.Context, params *BaseServiceMediaPutURLBatchGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceSystemNotifyQueryWithBody request with any body
	BaseServiceSystemNotifyQueryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BaseServiceSystemNotifyQuery(ctx context.Context, body BaseServiceSystemNotifyQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceFastRegisterWeChatWithBody request with any body
	BaseServiceFastRegisterWeChatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BaseServiceFastRegisterWeChat(ctx context.Context, body BaseServiceFastRegisterWeChatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceLoginWeChatWithBody request with any body
	BaseServiceLoginWeChatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BaseServiceLoginWeChat(ctx context.Context, body BaseServiceLoginWeChatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceUserPeGet request
	BaseServiceUserPeGet(ctx context.Context, params *BaseServiceUserPeGetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// BaseServiceUserPetUpdateWithBody request with any body
	BaseServiceUserPetUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BaseServiceUserPetUpdate(ctx context.Context, body BaseServiceUserPetUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) BaseServiceChannelDelete(ctx context.Context, params *BaseServiceChannelDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelCreate(ctx context.Context, body BaseServiceChannelCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelUpdate(ctx context.Context, body BaseServiceChannelUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelBaseQueryByBoundWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelBaseQueryByBoundRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelBaseQueryByBound(ctx context.Context, body BaseServiceChannelBaseQueryByBoundJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelBaseQueryByBoundRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelBaseQueryByUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelBaseQueryByUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelBaseQueryByUser(ctx context.Context, body BaseServiceChannelBaseQueryByUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelBaseQueryByUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelFullQueryById(ctx context.Context, params *BaseServiceChannelFullQueryByIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelFullQueryByIdRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelInxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelInxRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelInx(ctx context.Context, body BaseServiceChannelInxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelInxRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelPostDelete(ctx context.Context, params *BaseServiceChannelPostDeleteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelPostDeleteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelPostCreateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelPostCreateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelPostCreate(ctx context.Context, body BaseServiceChannelPostCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelPostCreateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelPostUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelPostUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelPostUpdate(ctx context.Context, body BaseServiceChannelPostUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelPostUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelPostInxWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelPostInxRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelPostInx(ctx context.Context, body BaseServiceChannelPostInxJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelPostInxRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelPostLoadWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelPostLoadRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelPostLoad(ctx context.Context, body BaseServiceChannelPostLoadJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelPostLoadRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceChannelTypeList(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceChannelTypeListRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceLocationCommonSearch(ctx context.Context, params *BaseServiceLocationCommonSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceLocationCommonSearchRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceMediaPutURLBatchGet(ctx context.Context, params *BaseServiceMediaPutURLBatchGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceMediaPutURLBatchGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceSystemNotifyQueryWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceSystemNotifyQueryRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceSystemNotifyQuery(ctx context.Context, body BaseServiceSystemNotifyQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceSystemNotifyQueryRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceFastRegisterWeChatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceFastRegisterWeChatRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceFastRegisterWeChat(ctx context.Context, body BaseServiceFastRegisterWeChatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceFastRegisterWeChatRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceLoginWeChatWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceLoginWeChatRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceLoginWeChat(ctx context.Context, body BaseServiceLoginWeChatJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceLoginWeChatRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceUserPeGet(ctx context.Context, params *BaseServiceUserPeGetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceUserPeGetRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceUserPetUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceUserPetUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BaseServiceUserPetUpdate(ctx context.Context, body BaseServiceUserPetUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBaseServiceUserPetUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewBaseServiceChannelDeleteRequest generates requests for BaseServiceChannelDelete
func NewBaseServiceChannelDeleteRequest(server string, params *BaseServiceChannelDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ChanId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "chan_id", runtime.ParamLocationQuery, *params.ChanId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBaseServiceChannelCreateRequest calls the generic BaseServiceChannelCreate builder with application/json body
func NewBaseServiceChannelCreateRequest(server string, body BaseServiceChannelCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBaseServiceChannelCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewBaseServiceChannelCreateRequestWithBody generates requests for BaseServiceChannelCreate with any type of body
func NewBaseServiceChannelCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBaseServiceChannelUpdateRequest calls the generic BaseServiceChannelUpdate builder with application/json body
func NewBaseServiceChannelUpdateRequest(server string, body BaseServiceChannelUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBaseServiceChannelUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewBaseServiceChannelUpdateRequestWithBody generates requests for BaseServiceChannelUpdate with any type of body
func NewBaseServiceChannelUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBaseServiceChannelBaseQueryByBoundRequest calls the generic BaseServiceChannelBaseQueryByBound builder with application/json body
func NewBaseServiceChannelBaseQueryByBoundRequest(server string, body BaseServiceChannelBaseQueryByBoundJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBaseServiceChannelBaseQueryByBoundRequestWithBody(server, "application/json", bodyReader)
}

// NewBaseServiceChannelBaseQueryByBoundRequestWithBody generates requests for BaseServiceChannelBaseQueryByBound with any type of body
func NewBaseServiceChannelBaseQueryByBoundRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channel/base_query_by_bound")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBaseServiceChannelBaseQueryByUserRequest calls the generic BaseServiceChannelBaseQueryByUser builder with application/json body
func NewBaseServiceChannelBaseQueryByUserRequest(server string, body BaseServiceChannelBaseQueryByUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBaseServiceChannelBaseQueryByUserRequestWithBody(server, "application/json", bodyReader)
}

// NewBaseServiceChannelBaseQueryByUserRequestWithBody generates requests for BaseServiceChannelBaseQueryByUser with any type of body
func NewBaseServiceChannelBaseQueryByUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channel/base_query_by_user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBaseServiceChannelFullQueryByIdRequest generates requests for BaseServiceChannelFullQueryById
func NewBaseServiceChannelFullQueryByIdRequest(server string, params *BaseServiceChannelFullQueryByIdParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channel/full_query_by_id")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ChanId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "chan_id", runtime.ParamLocationQuery, *params.ChanId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBaseServiceChannelInxRequest calls the generic BaseServiceChannelInx builder with application/json body
func NewBaseServiceChannelInxRequest(server string, body BaseServiceChannelInxJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBaseServiceChannelInxRequestWithBody(server, "application/json", bodyReader)
}

// NewBaseServiceChannelInxRequestWithBody generates requests for BaseServiceChannelInx with any type of body
func NewBaseServiceChannelInxRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channel/inx")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBaseServiceChannelPostDeleteRequest generates requests for BaseServiceChannelPostDelete
func NewBaseServiceChannelPostDeleteRequest(server string, params *BaseServiceChannelPostDeleteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channel/post")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ChanId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "chan_id", runtime.ParamLocationQuery, *params.ChanId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PostId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "post_id", runtime.ParamLocationQuery, *params.PostId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBaseServiceChannelPostCreateRequest calls the generic BaseServiceChannelPostCreate builder with application/json body
func NewBaseServiceChannelPostCreateRequest(server string, body BaseServiceChannelPostCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBaseServiceChannelPostCreateRequestWithBody(server, "application/json", bodyReader)
}

// NewBaseServiceChannelPostCreateRequestWithBody generates requests for BaseServiceChannelPostCreate with any type of body
func NewBaseServiceChannelPostCreateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channel/post")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBaseServiceChannelPostUpdateRequest calls the generic BaseServiceChannelPostUpdate builder with application/json body
func NewBaseServiceChannelPostUpdateRequest(server string, body BaseServiceChannelPostUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBaseServiceChannelPostUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewBaseServiceChannelPostUpdateRequestWithBody generates requests for BaseServiceChannelPostUpdate with any type of body
func NewBaseServiceChannelPostUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channel/post")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBaseServiceChannelPostInxRequest calls the generic BaseServiceChannelPostInx builder with application/json body
func NewBaseServiceChannelPostInxRequest(server string, body BaseServiceChannelPostInxJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBaseServiceChannelPostInxRequestWithBody(server, "application/json", bodyReader)
}

// NewBaseServiceChannelPostInxRequestWithBody generates requests for BaseServiceChannelPostInx with any type of body
func NewBaseServiceChannelPostInxRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channel/post/inx")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBaseServiceChannelPostLoadRequest calls the generic BaseServiceChannelPostLoad builder with application/json body
func NewBaseServiceChannelPostLoadRequest(server string, body BaseServiceChannelPostLoadJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBaseServiceChannelPostLoadRequestWithBody(server, "application/json", bodyReader)
}

// NewBaseServiceChannelPostLoadRequestWithBody generates requests for BaseServiceChannelPostLoad with any type of body
func NewBaseServiceChannelPostLoadRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channel/post/load")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBaseServiceChannelTypeListRequest generates requests for BaseServiceChannelTypeList
func NewBaseServiceChannelTypeListRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/channel/type")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBaseServiceLocationCommonSearchRequest generates requests for BaseServiceLocationCommonSearch
func NewBaseServiceLocationCommonSearchRequest(server string, params *BaseServiceLocationCommonSearchParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/location/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Input != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "input", runtime.ParamLocationQuery, *params.Input); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBaseServiceMediaPutURLBatchGetRequest generates requests for BaseServiceMediaPutURLBatchGet
func NewBaseServiceMediaPutURLBatchGetRequest(server string, params *BaseServiceMediaPutURLBatchGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/media/put_url/batch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MediaType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "media_type", runtime.ParamLocationQuery, *params.MediaType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBaseServiceSystemNotifyQueryRequest calls the generic BaseServiceSystemNotifyQuery builder with application/json body
func NewBaseServiceSystemNotifyQueryRequest(server string, body BaseServiceSystemNotifyQueryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBaseServiceSystemNotifyQueryRequestWithBody(server, "application/json", bodyReader)
}

// NewBaseServiceSystemNotifyQueryRequestWithBody generates requests for BaseServiceSystemNotifyQuery with any type of body
func NewBaseServiceSystemNotifyQueryRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notify/query")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBaseServiceFastRegisterWeChatRequest calls the generic BaseServiceFastRegisterWeChat builder with application/json body
func NewBaseServiceFastRegisterWeChatRequest(server string, body BaseServiceFastRegisterWeChatJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBaseServiceFastRegisterWeChatRequestWithBody(server, "application/json", bodyReader)
}

// NewBaseServiceFastRegisterWeChatRequestWithBody generates requests for BaseServiceFastRegisterWeChat with any type of body
func NewBaseServiceFastRegisterWeChatRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/user/fast_reg/wx")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBaseServiceLoginWeChatRequest calls the generic BaseServiceLoginWeChat builder with application/json body
func NewBaseServiceLoginWeChatRequest(server string, body BaseServiceLoginWeChatJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBaseServiceLoginWeChatRequestWithBody(server, "application/json", bodyReader)
}

// NewBaseServiceLoginWeChatRequestWithBody generates requests for BaseServiceLoginWeChat with any type of body
func NewBaseServiceLoginWeChatRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/user/login/wx")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewBaseServiceUserPeGetRequest generates requests for BaseServiceUserPeGet
func NewBaseServiceUserPeGetRequest(server string, params *BaseServiceUserPeGetParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/user/pet")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_id", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewBaseServiceUserPetUpdateRequest calls the generic BaseServiceUserPetUpdate builder with application/json body
func NewBaseServiceUserPetUpdateRequest(server string, body BaseServiceUserPetUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBaseServiceUserPetUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewBaseServiceUserPetUpdateRequestWithBody generates requests for BaseServiceUserPetUpdate with any type of body
func NewBaseServiceUserPetUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/user/pet")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// BaseServiceChannelDeleteWithResponse request
	BaseServiceChannelDeleteWithResponse(ctx context.Context, params *BaseServiceChannelDeleteParams, reqEditors ...RequestEditorFn) (*BaseServiceChannelDeleteResponse, error)

	// BaseServiceChannelCreateWithBodyWithResponse request with any body
	BaseServiceChannelCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceChannelCreateResponse, error)

	BaseServiceChannelCreateWithResponse(ctx context.Context, body BaseServiceChannelCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceChannelCreateResponse, error)

	// BaseServiceChannelUpdateWithBodyWithResponse request with any body
	BaseServiceChannelUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceChannelUpdateResponse, error)

	BaseServiceChannelUpdateWithResponse(ctx context.Context, body BaseServiceChannelUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceChannelUpdateResponse, error)

	// BaseServiceChannelBaseQueryByBoundWithBodyWithResponse request with any body
	BaseServiceChannelBaseQueryByBoundWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceChannelBaseQueryByBoundResponse, error)

	BaseServiceChannelBaseQueryByBoundWithResponse(ctx context.Context, body BaseServiceChannelBaseQueryByBoundJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceChannelBaseQueryByBoundResponse, error)

	// BaseServiceChannelBaseQueryByUserWithBodyWithResponse request with any body
	BaseServiceChannelBaseQueryByUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceChannelBaseQueryByUserResponse, error)

	BaseServiceChannelBaseQueryByUserWithResponse(ctx context.Context, body BaseServiceChannelBaseQueryByUserJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceChannelBaseQueryByUserResponse, error)

	// BaseServiceChannelFullQueryByIdWithResponse request
	BaseServiceChannelFullQueryByIdWithResponse(ctx context.Context, params *BaseServiceChannelFullQueryByIdParams, reqEditors ...RequestEditorFn) (*BaseServiceChannelFullQueryByIdResponse, error)

	// BaseServiceChannelInxWithBodyWithResponse request with any body
	BaseServiceChannelInxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceChannelInxResponse, error)

	BaseServiceChannelInxWithResponse(ctx context.Context, body BaseServiceChannelInxJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceChannelInxResponse, error)

	// BaseServiceChannelPostDeleteWithResponse request
	BaseServiceChannelPostDeleteWithResponse(ctx context.Context, params *BaseServiceChannelPostDeleteParams, reqEditors ...RequestEditorFn) (*BaseServiceChannelPostDeleteResponse, error)

	// BaseServiceChannelPostCreateWithBodyWithResponse request with any body
	BaseServiceChannelPostCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceChannelPostCreateResponse, error)

	BaseServiceChannelPostCreateWithResponse(ctx context.Context, body BaseServiceChannelPostCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceChannelPostCreateResponse, error)

	// BaseServiceChannelPostUpdateWithBodyWithResponse request with any body
	BaseServiceChannelPostUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceChannelPostUpdateResponse, error)

	BaseServiceChannelPostUpdateWithResponse(ctx context.Context, body BaseServiceChannelPostUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceChannelPostUpdateResponse, error)

	// BaseServiceChannelPostInxWithBodyWithResponse request with any body
	BaseServiceChannelPostInxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceChannelPostInxResponse, error)

	BaseServiceChannelPostInxWithResponse(ctx context.Context, body BaseServiceChannelPostInxJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceChannelPostInxResponse, error)

	// BaseServiceChannelPostLoadWithBodyWithResponse request with any body
	BaseServiceChannelPostLoadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceChannelPostLoadResponse, error)

	BaseServiceChannelPostLoadWithResponse(ctx context.Context, body BaseServiceChannelPostLoadJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceChannelPostLoadResponse, error)

	// BaseServiceChannelTypeListWithResponse request
	BaseServiceChannelTypeListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BaseServiceChannelTypeListResponse, error)

	// BaseServiceLocationCommonSearchWithResponse request
	BaseServiceLocationCommonSearchWithResponse(ctx context.Context, params *BaseServiceLocationCommonSearchParams, reqEditors ...RequestEditorFn) (*BaseServiceLocationCommonSearchResponse, error)

	// BaseServiceMediaPutURLBatchGetWithResponse request
	BaseServiceMediaPutURLBatchGetWithResponse(ctx context.Context, params *BaseServiceMediaPutURLBatchGetParams, reqEditors ...RequestEditorFn) (*BaseServiceMediaPutURLBatchGetResponse, error)

	// BaseServiceSystemNotifyQueryWithBodyWithResponse request with any body
	BaseServiceSystemNotifyQueryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceSystemNotifyQueryResponse, error)

	BaseServiceSystemNotifyQueryWithResponse(ctx context.Context, body BaseServiceSystemNotifyQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceSystemNotifyQueryResponse, error)

	// BaseServiceFastRegisterWeChatWithBodyWithResponse request with any body
	BaseServiceFastRegisterWeChatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceFastRegisterWeChatResponse, error)

	BaseServiceFastRegisterWeChatWithResponse(ctx context.Context, body BaseServiceFastRegisterWeChatJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceFastRegisterWeChatResponse, error)

	// BaseServiceLoginWeChatWithBodyWithResponse request with any body
	BaseServiceLoginWeChatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceLoginWeChatResponse, error)

	BaseServiceLoginWeChatWithResponse(ctx context.Context, body BaseServiceLoginWeChatJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceLoginWeChatResponse, error)

	// BaseServiceUserPeGetWithResponse request
	BaseServiceUserPeGetWithResponse(ctx context.Context, params *BaseServiceUserPeGetParams, reqEditors ...RequestEditorFn) (*BaseServiceUserPeGetResponse, error)

	// BaseServiceUserPetUpdateWithBodyWithResponse request with any body
	BaseServiceUserPetUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceUserPetUpdateResponse, error)

	BaseServiceUserPetUpdateWithResponse(ctx context.Context, body BaseServiceUserPetUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceUserPetUpdateResponse, error)
}

type BaseServiceChannelDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelDeleteRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceChannelDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceChannelDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceChannelCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelCreateRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceChannelCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceChannelCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceChannelUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelUpdateRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceChannelUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceChannelUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceChannelBaseQueryByBoundResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelBaseQueryByBoundRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceChannelBaseQueryByBoundResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceChannelBaseQueryByBoundResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceChannelBaseQueryByUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelBaseQueryByUserRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceChannelBaseQueryByUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceChannelBaseQueryByUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceChannelFullQueryByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelFullQueryByIdRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceChannelFullQueryByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceChannelFullQueryByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceChannelInxResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelInxRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceChannelInxResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceChannelInxResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceChannelPostDeleteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelPostDeleteRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceChannelPostDeleteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceChannelPostDeleteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceChannelPostCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelPostCreateRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceChannelPostCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceChannelPostCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceChannelPostUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelPostUpdateRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceChannelPostUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceChannelPostUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceChannelPostInxResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelPostInxRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceChannelPostInxResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceChannelPostInxResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceChannelPostLoadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelPostLoadRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceChannelPostLoadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceChannelPostLoadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceChannelTypeListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChannelTypeListRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceChannelTypeListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceChannelTypeListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceLocationCommonSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LocationCommonSearchRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceLocationCommonSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceLocationCommonSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceMediaPutURLBatchGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MediaPutURLBatchGetRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceMediaPutURLBatchGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceMediaPutURLBatchGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceSystemNotifyQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SystemNotifyQueryRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceSystemNotifyQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceSystemNotifyQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceFastRegisterWeChatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FastRegisterWeChatRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceFastRegisterWeChatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceFastRegisterWeChatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceLoginWeChatResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LoginWeChatRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceLoginWeChatResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceLoginWeChatResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceUserPeGetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserPeGetRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceUserPeGetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceUserPeGetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type BaseServiceUserPetUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserPetUpdateRes
}

// Status returns HTTPResponse.Status
func (r BaseServiceUserPetUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BaseServiceUserPetUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// BaseServiceChannelDeleteWithResponse request returning *BaseServiceChannelDeleteResponse
func (c *ClientWithResponses) BaseServiceChannelDeleteWithResponse(ctx context.Context, params *BaseServiceChannelDeleteParams, reqEditors ...RequestEditorFn) (*BaseServiceChannelDeleteResponse, error) {
	rsp, err := c.BaseServiceChannelDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelDeleteResponse(rsp)
}

// BaseServiceChannelCreateWithBodyWithResponse request with arbitrary body returning *BaseServiceChannelCreateResponse
func (c *ClientWithResponses) BaseServiceChannelCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceChannelCreateResponse, error) {
	rsp, err := c.BaseServiceChannelCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelCreateResponse(rsp)
}

func (c *ClientWithResponses) BaseServiceChannelCreateWithResponse(ctx context.Context, body BaseServiceChannelCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceChannelCreateResponse, error) {
	rsp, err := c.BaseServiceChannelCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelCreateResponse(rsp)
}

// BaseServiceChannelUpdateWithBodyWithResponse request with arbitrary body returning *BaseServiceChannelUpdateResponse
func (c *ClientWithResponses) BaseServiceChannelUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceChannelUpdateResponse, error) {
	rsp, err := c.BaseServiceChannelUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelUpdateResponse(rsp)
}

func (c *ClientWithResponses) BaseServiceChannelUpdateWithResponse(ctx context.Context, body BaseServiceChannelUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceChannelUpdateResponse, error) {
	rsp, err := c.BaseServiceChannelUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelUpdateResponse(rsp)
}

// BaseServiceChannelBaseQueryByBoundWithBodyWithResponse request with arbitrary body returning *BaseServiceChannelBaseQueryByBoundResponse
func (c *ClientWithResponses) BaseServiceChannelBaseQueryByBoundWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceChannelBaseQueryByBoundResponse, error) {
	rsp, err := c.BaseServiceChannelBaseQueryByBoundWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelBaseQueryByBoundResponse(rsp)
}

func (c *ClientWithResponses) BaseServiceChannelBaseQueryByBoundWithResponse(ctx context.Context, body BaseServiceChannelBaseQueryByBoundJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceChannelBaseQueryByBoundResponse, error) {
	rsp, err := c.BaseServiceChannelBaseQueryByBound(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelBaseQueryByBoundResponse(rsp)
}

// BaseServiceChannelBaseQueryByUserWithBodyWithResponse request with arbitrary body returning *BaseServiceChannelBaseQueryByUserResponse
func (c *ClientWithResponses) BaseServiceChannelBaseQueryByUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceChannelBaseQueryByUserResponse, error) {
	rsp, err := c.BaseServiceChannelBaseQueryByUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelBaseQueryByUserResponse(rsp)
}

func (c *ClientWithResponses) BaseServiceChannelBaseQueryByUserWithResponse(ctx context.Context, body BaseServiceChannelBaseQueryByUserJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceChannelBaseQueryByUserResponse, error) {
	rsp, err := c.BaseServiceChannelBaseQueryByUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelBaseQueryByUserResponse(rsp)
}

// BaseServiceChannelFullQueryByIdWithResponse request returning *BaseServiceChannelFullQueryByIdResponse
func (c *ClientWithResponses) BaseServiceChannelFullQueryByIdWithResponse(ctx context.Context, params *BaseServiceChannelFullQueryByIdParams, reqEditors ...RequestEditorFn) (*BaseServiceChannelFullQueryByIdResponse, error) {
	rsp, err := c.BaseServiceChannelFullQueryById(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelFullQueryByIdResponse(rsp)
}

// BaseServiceChannelInxWithBodyWithResponse request with arbitrary body returning *BaseServiceChannelInxResponse
func (c *ClientWithResponses) BaseServiceChannelInxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceChannelInxResponse, error) {
	rsp, err := c.BaseServiceChannelInxWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelInxResponse(rsp)
}

func (c *ClientWithResponses) BaseServiceChannelInxWithResponse(ctx context.Context, body BaseServiceChannelInxJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceChannelInxResponse, error) {
	rsp, err := c.BaseServiceChannelInx(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelInxResponse(rsp)
}

// BaseServiceChannelPostDeleteWithResponse request returning *BaseServiceChannelPostDeleteResponse
func (c *ClientWithResponses) BaseServiceChannelPostDeleteWithResponse(ctx context.Context, params *BaseServiceChannelPostDeleteParams, reqEditors ...RequestEditorFn) (*BaseServiceChannelPostDeleteResponse, error) {
	rsp, err := c.BaseServiceChannelPostDelete(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelPostDeleteResponse(rsp)
}

// BaseServiceChannelPostCreateWithBodyWithResponse request with arbitrary body returning *BaseServiceChannelPostCreateResponse
func (c *ClientWithResponses) BaseServiceChannelPostCreateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceChannelPostCreateResponse, error) {
	rsp, err := c.BaseServiceChannelPostCreateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelPostCreateResponse(rsp)
}

func (c *ClientWithResponses) BaseServiceChannelPostCreateWithResponse(ctx context.Context, body BaseServiceChannelPostCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceChannelPostCreateResponse, error) {
	rsp, err := c.BaseServiceChannelPostCreate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelPostCreateResponse(rsp)
}

// BaseServiceChannelPostUpdateWithBodyWithResponse request with arbitrary body returning *BaseServiceChannelPostUpdateResponse
func (c *ClientWithResponses) BaseServiceChannelPostUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceChannelPostUpdateResponse, error) {
	rsp, err := c.BaseServiceChannelPostUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelPostUpdateResponse(rsp)
}

func (c *ClientWithResponses) BaseServiceChannelPostUpdateWithResponse(ctx context.Context, body BaseServiceChannelPostUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceChannelPostUpdateResponse, error) {
	rsp, err := c.BaseServiceChannelPostUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelPostUpdateResponse(rsp)
}

// BaseServiceChannelPostInxWithBodyWithResponse request with arbitrary body returning *BaseServiceChannelPostInxResponse
func (c *ClientWithResponses) BaseServiceChannelPostInxWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceChannelPostInxResponse, error) {
	rsp, err := c.BaseServiceChannelPostInxWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelPostInxResponse(rsp)
}

func (c *ClientWithResponses) BaseServiceChannelPostInxWithResponse(ctx context.Context, body BaseServiceChannelPostInxJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceChannelPostInxResponse, error) {
	rsp, err := c.BaseServiceChannelPostInx(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelPostInxResponse(rsp)
}

// BaseServiceChannelPostLoadWithBodyWithResponse request with arbitrary body returning *BaseServiceChannelPostLoadResponse
func (c *ClientWithResponses) BaseServiceChannelPostLoadWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceChannelPostLoadResponse, error) {
	rsp, err := c.BaseServiceChannelPostLoadWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelPostLoadResponse(rsp)
}

func (c *ClientWithResponses) BaseServiceChannelPostLoadWithResponse(ctx context.Context, body BaseServiceChannelPostLoadJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceChannelPostLoadResponse, error) {
	rsp, err := c.BaseServiceChannelPostLoad(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelPostLoadResponse(rsp)
}

// BaseServiceChannelTypeListWithResponse request returning *BaseServiceChannelTypeListResponse
func (c *ClientWithResponses) BaseServiceChannelTypeListWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*BaseServiceChannelTypeListResponse, error) {
	rsp, err := c.BaseServiceChannelTypeList(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceChannelTypeListResponse(rsp)
}

// BaseServiceLocationCommonSearchWithResponse request returning *BaseServiceLocationCommonSearchResponse
func (c *ClientWithResponses) BaseServiceLocationCommonSearchWithResponse(ctx context.Context, params *BaseServiceLocationCommonSearchParams, reqEditors ...RequestEditorFn) (*BaseServiceLocationCommonSearchResponse, error) {
	rsp, err := c.BaseServiceLocationCommonSearch(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceLocationCommonSearchResponse(rsp)
}

// BaseServiceMediaPutURLBatchGetWithResponse request returning *BaseServiceMediaPutURLBatchGetResponse
func (c *ClientWithResponses) BaseServiceMediaPutURLBatchGetWithResponse(ctx context.Context, params *BaseServiceMediaPutURLBatchGetParams, reqEditors ...RequestEditorFn) (*BaseServiceMediaPutURLBatchGetResponse, error) {
	rsp, err := c.BaseServiceMediaPutURLBatchGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceMediaPutURLBatchGetResponse(rsp)
}

// BaseServiceSystemNotifyQueryWithBodyWithResponse request with arbitrary body returning *BaseServiceSystemNotifyQueryResponse
func (c *ClientWithResponses) BaseServiceSystemNotifyQueryWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceSystemNotifyQueryResponse, error) {
	rsp, err := c.BaseServiceSystemNotifyQueryWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceSystemNotifyQueryResponse(rsp)
}

func (c *ClientWithResponses) BaseServiceSystemNotifyQueryWithResponse(ctx context.Context, body BaseServiceSystemNotifyQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceSystemNotifyQueryResponse, error) {
	rsp, err := c.BaseServiceSystemNotifyQuery(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceSystemNotifyQueryResponse(rsp)
}

// BaseServiceFastRegisterWeChatWithBodyWithResponse request with arbitrary body returning *BaseServiceFastRegisterWeChatResponse
func (c *ClientWithResponses) BaseServiceFastRegisterWeChatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceFastRegisterWeChatResponse, error) {
	rsp, err := c.BaseServiceFastRegisterWeChatWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceFastRegisterWeChatResponse(rsp)
}

func (c *ClientWithResponses) BaseServiceFastRegisterWeChatWithResponse(ctx context.Context, body BaseServiceFastRegisterWeChatJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceFastRegisterWeChatResponse, error) {
	rsp, err := c.BaseServiceFastRegisterWeChat(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceFastRegisterWeChatResponse(rsp)
}

// BaseServiceLoginWeChatWithBodyWithResponse request with arbitrary body returning *BaseServiceLoginWeChatResponse
func (c *ClientWithResponses) BaseServiceLoginWeChatWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceLoginWeChatResponse, error) {
	rsp, err := c.BaseServiceLoginWeChatWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceLoginWeChatResponse(rsp)
}

func (c *ClientWithResponses) BaseServiceLoginWeChatWithResponse(ctx context.Context, body BaseServiceLoginWeChatJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceLoginWeChatResponse, error) {
	rsp, err := c.BaseServiceLoginWeChat(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceLoginWeChatResponse(rsp)
}

// BaseServiceUserPeGetWithResponse request returning *BaseServiceUserPeGetResponse
func (c *ClientWithResponses) BaseServiceUserPeGetWithResponse(ctx context.Context, params *BaseServiceUserPeGetParams, reqEditors ...RequestEditorFn) (*BaseServiceUserPeGetResponse, error) {
	rsp, err := c.BaseServiceUserPeGet(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceUserPeGetResponse(rsp)
}

// BaseServiceUserPetUpdateWithBodyWithResponse request with arbitrary body returning *BaseServiceUserPetUpdateResponse
func (c *ClientWithResponses) BaseServiceUserPetUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BaseServiceUserPetUpdateResponse, error) {
	rsp, err := c.BaseServiceUserPetUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceUserPetUpdateResponse(rsp)
}

func (c *ClientWithResponses) BaseServiceUserPetUpdateWithResponse(ctx context.Context, body BaseServiceUserPetUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*BaseServiceUserPetUpdateResponse, error) {
	rsp, err := c.BaseServiceUserPetUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBaseServiceUserPetUpdateResponse(rsp)
}

// ParseBaseServiceChannelDeleteResponse parses an HTTP response from a BaseServiceChannelDeleteWithResponse call
func ParseBaseServiceChannelDeleteResponse(rsp *http.Response) (*BaseServiceChannelDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceChannelDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelDeleteRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceChannelCreateResponse parses an HTTP response from a BaseServiceChannelCreateWithResponse call
func ParseBaseServiceChannelCreateResponse(rsp *http.Response) (*BaseServiceChannelCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceChannelCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelCreateRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceChannelUpdateResponse parses an HTTP response from a BaseServiceChannelUpdateWithResponse call
func ParseBaseServiceChannelUpdateResponse(rsp *http.Response) (*BaseServiceChannelUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceChannelUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelUpdateRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceChannelBaseQueryByBoundResponse parses an HTTP response from a BaseServiceChannelBaseQueryByBoundWithResponse call
func ParseBaseServiceChannelBaseQueryByBoundResponse(rsp *http.Response) (*BaseServiceChannelBaseQueryByBoundResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceChannelBaseQueryByBoundResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelBaseQueryByBoundRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceChannelBaseQueryByUserResponse parses an HTTP response from a BaseServiceChannelBaseQueryByUserWithResponse call
func ParseBaseServiceChannelBaseQueryByUserResponse(rsp *http.Response) (*BaseServiceChannelBaseQueryByUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceChannelBaseQueryByUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelBaseQueryByUserRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceChannelFullQueryByIdResponse parses an HTTP response from a BaseServiceChannelFullQueryByIdWithResponse call
func ParseBaseServiceChannelFullQueryByIdResponse(rsp *http.Response) (*BaseServiceChannelFullQueryByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceChannelFullQueryByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelFullQueryByIdRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceChannelInxResponse parses an HTTP response from a BaseServiceChannelInxWithResponse call
func ParseBaseServiceChannelInxResponse(rsp *http.Response) (*BaseServiceChannelInxResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceChannelInxResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelInxRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceChannelPostDeleteResponse parses an HTTP response from a BaseServiceChannelPostDeleteWithResponse call
func ParseBaseServiceChannelPostDeleteResponse(rsp *http.Response) (*BaseServiceChannelPostDeleteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceChannelPostDeleteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelPostDeleteRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceChannelPostCreateResponse parses an HTTP response from a BaseServiceChannelPostCreateWithResponse call
func ParseBaseServiceChannelPostCreateResponse(rsp *http.Response) (*BaseServiceChannelPostCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceChannelPostCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelPostCreateRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceChannelPostUpdateResponse parses an HTTP response from a BaseServiceChannelPostUpdateWithResponse call
func ParseBaseServiceChannelPostUpdateResponse(rsp *http.Response) (*BaseServiceChannelPostUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceChannelPostUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelPostUpdateRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceChannelPostInxResponse parses an HTTP response from a BaseServiceChannelPostInxWithResponse call
func ParseBaseServiceChannelPostInxResponse(rsp *http.Response) (*BaseServiceChannelPostInxResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceChannelPostInxResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelPostInxRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceChannelPostLoadResponse parses an HTTP response from a BaseServiceChannelPostLoadWithResponse call
func ParseBaseServiceChannelPostLoadResponse(rsp *http.Response) (*BaseServiceChannelPostLoadResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceChannelPostLoadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelPostLoadRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceChannelTypeListResponse parses an HTTP response from a BaseServiceChannelTypeListWithResponse call
func ParseBaseServiceChannelTypeListResponse(rsp *http.Response) (*BaseServiceChannelTypeListResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceChannelTypeListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChannelTypeListRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceLocationCommonSearchResponse parses an HTTP response from a BaseServiceLocationCommonSearchWithResponse call
func ParseBaseServiceLocationCommonSearchResponse(rsp *http.Response) (*BaseServiceLocationCommonSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceLocationCommonSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LocationCommonSearchRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceMediaPutURLBatchGetResponse parses an HTTP response from a BaseServiceMediaPutURLBatchGetWithResponse call
func ParseBaseServiceMediaPutURLBatchGetResponse(rsp *http.Response) (*BaseServiceMediaPutURLBatchGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceMediaPutURLBatchGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MediaPutURLBatchGetRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceSystemNotifyQueryResponse parses an HTTP response from a BaseServiceSystemNotifyQueryWithResponse call
func ParseBaseServiceSystemNotifyQueryResponse(rsp *http.Response) (*BaseServiceSystemNotifyQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceSystemNotifyQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SystemNotifyQueryRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceFastRegisterWeChatResponse parses an HTTP response from a BaseServiceFastRegisterWeChatWithResponse call
func ParseBaseServiceFastRegisterWeChatResponse(rsp *http.Response) (*BaseServiceFastRegisterWeChatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceFastRegisterWeChatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FastRegisterWeChatRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceLoginWeChatResponse parses an HTTP response from a BaseServiceLoginWeChatWithResponse call
func ParseBaseServiceLoginWeChatResponse(rsp *http.Response) (*BaseServiceLoginWeChatResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceLoginWeChatResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LoginWeChatRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceUserPeGetResponse parses an HTTP response from a BaseServiceUserPeGetWithResponse call
func ParseBaseServiceUserPeGetResponse(rsp *http.Response) (*BaseServiceUserPeGetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceUserPeGetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserPeGetRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseBaseServiceUserPetUpdateResponse parses an HTTP response from a BaseServiceUserPetUpdateWithResponse call
func ParseBaseServiceUserPetUpdateResponse(rsp *http.Response) (*BaseServiceUserPetUpdateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BaseServiceUserPetUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserPetUpdateRes
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (DELETE /v1/channel)
	BaseServiceChannelDelete(c *gin.Context, params BaseServiceChannelDeleteParams)

	// (POST /v1/channel)
	BaseServiceChannelCreate(c *gin.Context)

	// (PUT /v1/channel)
	BaseServiceChannelUpdate(c *gin.Context)

	// (POST /v1/channel/base_query_by_bound)
	BaseServiceChannelBaseQueryByBound(c *gin.Context)

	// (POST /v1/channel/base_query_by_user)
	BaseServiceChannelBaseQueryByUser(c *gin.Context)

	// (GET /v1/channel/full_query_by_id)
	BaseServiceChannelFullQueryById(c *gin.Context, params BaseServiceChannelFullQueryByIdParams)

	// (POST /v1/channel/inx)
	BaseServiceChannelInx(c *gin.Context)

	// (DELETE /v1/channel/post)
	BaseServiceChannelPostDelete(c *gin.Context, params BaseServiceChannelPostDeleteParams)

	// (POST /v1/channel/post)
	BaseServiceChannelPostCreate(c *gin.Context)

	// (PUT /v1/channel/post)
	BaseServiceChannelPostUpdate(c *gin.Context)

	// (POST /v1/channel/post/inx)
	BaseServiceChannelPostInx(c *gin.Context)

	// (POST /v1/channel/post/load)
	BaseServiceChannelPostLoad(c *gin.Context)

	// (GET /v1/channel/type)
	BaseServiceChannelTypeList(c *gin.Context)

	// (GET /v1/location/search)
	BaseServiceLocationCommonSearch(c *gin.Context, params BaseServiceLocationCommonSearchParams)

	// (GET /v1/media/put_url/batch)
	BaseServiceMediaPutURLBatchGet(c *gin.Context, params BaseServiceMediaPutURLBatchGetParams)

	// (POST /v1/notify/query)
	BaseServiceSystemNotifyQuery(c *gin.Context)

	// (POST /v1/user/fast_reg/wx)
	BaseServiceFastRegisterWeChat(c *gin.Context)

	// (POST /v1/user/login/wx)
	BaseServiceLoginWeChat(c *gin.Context)

	// (GET /v1/user/pet)
	BaseServiceUserPeGet(c *gin.Context, params BaseServiceUserPeGetParams)

	// (PUT /v1/user/pet)
	BaseServiceUserPetUpdate(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// BaseServiceChannelDelete operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceChannelDelete(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params BaseServiceChannelDeleteParams

	// ------------- Optional query parameter "chan_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "chan_id", c.Request.URL.Query(), &params.ChanId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter chan_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceChannelDelete(c, params)
}

// BaseServiceChannelCreate operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceChannelCreate(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceChannelCreate(c)
}

// BaseServiceChannelUpdate operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceChannelUpdate(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceChannelUpdate(c)
}

// BaseServiceChannelBaseQueryByBound operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceChannelBaseQueryByBound(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceChannelBaseQueryByBound(c)
}

// BaseServiceChannelBaseQueryByUser operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceChannelBaseQueryByUser(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceChannelBaseQueryByUser(c)
}

// BaseServiceChannelFullQueryById operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceChannelFullQueryById(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params BaseServiceChannelFullQueryByIdParams

	// ------------- Optional query parameter "chan_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "chan_id", c.Request.URL.Query(), &params.ChanId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter chan_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceChannelFullQueryById(c, params)
}

// BaseServiceChannelInx operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceChannelInx(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceChannelInx(c)
}

// BaseServiceChannelPostDelete operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceChannelPostDelete(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params BaseServiceChannelPostDeleteParams

	// ------------- Optional query parameter "chan_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "chan_id", c.Request.URL.Query(), &params.ChanId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter chan_id: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "post_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "post_id", c.Request.URL.Query(), &params.PostId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter post_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceChannelPostDelete(c, params)
}

// BaseServiceChannelPostCreate operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceChannelPostCreate(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceChannelPostCreate(c)
}

// BaseServiceChannelPostUpdate operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceChannelPostUpdate(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceChannelPostUpdate(c)
}

// BaseServiceChannelPostInx operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceChannelPostInx(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceChannelPostInx(c)
}

// BaseServiceChannelPostLoad operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceChannelPostLoad(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceChannelPostLoad(c)
}

// BaseServiceChannelTypeList operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceChannelTypeList(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceChannelTypeList(c)
}

// BaseServiceLocationCommonSearch operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceLocationCommonSearch(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params BaseServiceLocationCommonSearchParams

	// ------------- Optional query parameter "input" -------------

	err = runtime.BindQueryParameter("form", true, false, "input", c.Request.URL.Query(), &params.Input)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter input: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceLocationCommonSearch(c, params)
}

// BaseServiceMediaPutURLBatchGet operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceMediaPutURLBatchGet(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params BaseServiceMediaPutURLBatchGetParams

	// ------------- Optional query parameter "media_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "media_type", c.Request.URL.Query(), &params.MediaType)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter media_type: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "count" -------------

	err = runtime.BindQueryParameter("form", true, false, "count", c.Request.URL.Query(), &params.Count)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter count: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceMediaPutURLBatchGet(c, params)
}

// BaseServiceSystemNotifyQuery operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceSystemNotifyQuery(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceSystemNotifyQuery(c)
}

// BaseServiceFastRegisterWeChat operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceFastRegisterWeChat(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceFastRegisterWeChat(c)
}

// BaseServiceLoginWeChat operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceLoginWeChat(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceLoginWeChat(c)
}

// BaseServiceUserPeGet operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceUserPeGet(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params BaseServiceUserPeGetParams

	// ------------- Optional query parameter "user_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "user_id", c.Request.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter user_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceUserPeGet(c, params)
}

// BaseServiceUserPetUpdate operation middleware
func (siw *ServerInterfaceWrapper) BaseServiceUserPetUpdate(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.BaseServiceUserPetUpdate(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.DELETE(options.BaseURL+"/v1/channel", wrapper.BaseServiceChannelDelete)
	router.POST(options.BaseURL+"/v1/channel", wrapper.BaseServiceChannelCreate)
	router.PUT(options.BaseURL+"/v1/channel", wrapper.BaseServiceChannelUpdate)
	router.POST(options.BaseURL+"/v1/channel/base_query_by_bound", wrapper.BaseServiceChannelBaseQueryByBound)
	router.POST(options.BaseURL+"/v1/channel/base_query_by_user", wrapper.BaseServiceChannelBaseQueryByUser)
	router.GET(options.BaseURL+"/v1/channel/full_query_by_id", wrapper.BaseServiceChannelFullQueryById)
	router.POST(options.BaseURL+"/v1/channel/inx", wrapper.BaseServiceChannelInx)
	router.DELETE(options.BaseURL+"/v1/channel/post", wrapper.BaseServiceChannelPostDelete)
	router.POST(options.BaseURL+"/v1/channel/post", wrapper.BaseServiceChannelPostCreate)
	router.PUT(options.BaseURL+"/v1/channel/post", wrapper.BaseServiceChannelPostUpdate)
	router.POST(options.BaseURL+"/v1/channel/post/inx", wrapper.BaseServiceChannelPostInx)
	router.POST(options.BaseURL+"/v1/channel/post/load", wrapper.BaseServiceChannelPostLoad)
	router.GET(options.BaseURL+"/v1/channel/type", wrapper.BaseServiceChannelTypeList)
	router.GET(options.BaseURL+"/v1/location/search", wrapper.BaseServiceLocationCommonSearch)
	router.GET(options.BaseURL+"/v1/media/put_url/batch", wrapper.BaseServiceMediaPutURLBatchGet)
	router.POST(options.BaseURL+"/v1/notify/query", wrapper.BaseServiceSystemNotifyQuery)
	router.POST(options.BaseURL+"/v1/user/fast_reg/wx", wrapper.BaseServiceFastRegisterWeChat)
	router.POST(options.BaseURL+"/v1/user/login/wx", wrapper.BaseServiceLoginWeChat)
	router.GET(options.BaseURL+"/v1/user/pet", wrapper.BaseServiceUserPeGet)
	router.PUT(options.BaseURL+"/v1/user/pet", wrapper.BaseServiceUserPetUpdate)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9Rb71MTSfr/V1Lz/b5MEVyv7gWvdtHyijvu5GStfbFrpZpMk/RuMhN7epCsRVXcFUUE",
	"w7kKp+IKrqzsngKWHkIi6z+TmSSv7l+46u6ZyYTpnswAIbdvLHC6n376+Tz9/Oa6ktELRV2DGjGUoeuK",
	"kcnBAmA/Duumpp7TdazS34pYL0JMEGTfNEj//X8MJ5Uh5f9SbRoph0BqTEca4btnkopxLc76maRCSkWo",
	"DCn6xNcwQyiFczmgaTA/DAz4dxPi0nCJ8XcJXg1yN0G/0B9APn9xUhn6Mvxo30VnriQVFRoZjIoE6Zoy",
	"pFhPl+y1282F760n7xSHsTRS2TmdK5u7b5sf9xtvataPd5Fqza001zeVpIIILLDVkzouAKIMKUgjZz9R",
	"vDsijcAsxEr71gBjUIopBiMohgxfy372uAgThEN8RJvUj8rNZQNiISZoWkvDKaiRoODq1fvW/Ka9stta",
	"ecfFl0zUqwut8p36XllJtgUHNbMglBslbhBAoIx4Y37XLt84GnHTgDiNmD45Hw2CkZaNJ5J+4nMOQ0Cg",
	"A4tIaa25J1atqiTFDMZkq6gbJI00RKK/wDHdIHx78P0x1uyVXav8yKps12sb9lLV2vu58epVfa9sP123",
	"9pat10uR7i/HINYVQ046D/PQO0m26IKZzzu6MaKeBldsQQD61vN/tG78UP+4bt/YDkAPpgABODqCf4Uq",
	"AjIIX7yzvq9QfjIMCDUNiOA1JRX+yEQKynlNjJxvv1DfNo1gwf0aW+V67W4yYVW27Sfv7OUd0d68ngF8",
	"ffj9Rp11rpJTa2NEF48DxDjbJZDQ/CY1T8xIcUD+82HBqvza3K6xh45IHkrf7tJi4+VOl2s6XitcvJ55",
	"3Fv0E/MspCl3XKacdv1gtVmeDVANsGgWVbluhCr3tNDh0DckNttUY6bDnVG9erde243me7TpKL4nHq20",
	"qakClbb/uW0t/Wzff9F6UI5BtgipQZZe2dpaa9z5JebFuyESagGpve9wSp3QUQ/SPV50XUYIJ/5zjB6f",
	"E8n0c2pihf0dKFLXIC7Gu+FhQsywypNfVymP6kCNbRfywCBpH2OHrli7V/+w1vilas2vNQ8O7NWyvbxz",
	"ZnDQfroeNGhdLsHZk+hk9IiwrZ0xwkG66TKztr1/fe45vXx9464vFsU3XLupe2Te9HCcwxGHUBaStDUi",
	"bIFBAJYtoMQzcrNrze00tz7ar9bthx3OVu5rmYZISLJY2H6407pdiUaMci4hZj/Yba5UIrMV6r+TyhSC",
	"12QHPdtorN6NeFCIHnxeKkJxqBuMcoK5jj4FMcjCNAYqMqMm7JEC2sB/a6AAhR9IDhZgOqPndSz8ftQY",
	"iUpmFBkkLNlI082xc1FP5nEMUIfxESHlRYk9TYtCbNNJnXQBUKFnkUEg/gKeywEivLX18V+t8jP77aZ1",
	"a6G5/d5+813g7hhm0yogoBtLlw2I/aeep3tmksq16XRGV2FEvRHxLRAT0b+BmlhTDYijsCoXnZtxndML",
	"BV0bhwBncjK/35GdBbgEqoqhIfAQYxdHEtbqjvW03D09yWvZdB7Eqmm0C5qBhM9NjRYbB1uHzpYII4u0",
	"EAVqPKpZBw8lqhMP+o6jThnzdhUhcGwWkrSJ8wKLsV2zKsuXL42KUCuakl3WrUfW7IZkF/+PgIxdxxGh",
	"ZCjMh0fOsyydHx0tYmQCGTPJ5Uujw4Bkcn+CYlAKdF1k2+0r1kSx2n/TCZosiT1r422tUXvWKj9uPNsQ",
	"+FSNCJMF+/VP9vJt69astbUvAuAIdSLOAlJPpLQwBonElHhlscjynUCY5KjpFrv8CQyhOEroIoQs1FT+",
	"3qIUaKSFEKd0Fj1GMdC3kg9FmEGSTwSQyDGVKeG1S4B5DaJsjkQ6Qwh521wHUHfsvkd3Mq8D0qarmYUJ",
	"znpey0ZZKD7fIGF1Wie0n1tulmeb2zebW9W+PjfOgvi5MWMk7pFZv96vH/zAtnmWSmJ+XYuUVIoAQ02S",
	"ku/NN6ovuWzEzGBdF2+11/aRmkxw6Yr3xizyUgiPWOHtR/2UsnsJgow8cMropjDLrCxa1QdxskzR7TgV",
	"z6kK7ExWM6TbHmzac++5IHmndcCvUt1Qcq89jrKa2A/KgoBDXEcIBY4Di8dfABp5U9JpWErst+zEY9dQ",
	"MCzmS0cukmDnwvEqXx3aK4CQ8oSgrFby5EfrxeL/YK1EBNF4ySCwwAMx1joUVu6YmDW2KHplVUBaEGAy",
	"qihGfcAXNEYKMoV5q6xm5kuXJf3LIiRpHqx5WbOQEmtNJiaAAf/4hwRbKcoiIPHe0yEqS4vW6xXZHknf",
	"zjn6/kK9Wm08vmnNvm28rUXLB7z0Kdg9iFlqYkaiCGPUmunZbmAcGdIxKEtZjp8t+hkKVpdh9+Jy+zIU",
	"rVhBage8EYEbg2FldxeQWDBEOMro2VHUJMKMiREpjdMdzvAVBBjiz0ySa/92wRXon7/4XEnyITNKiX9t",
	"CzhHSFGZmWGJiSgU/tQ97zycRBpiHmMAFNE3sJQY9s79Skt8irREDgIVYvoLfQQJ+kXH6Fve7vea6sow",
	"MOA4xFMoAxOfjY0oSWUKYoOfNzgwOHCGylQvQg0UkTKknB0YHDhLzQ0gOXbf1NSZlK9cqLI2oODRz621",
	"Hr3wF6IVRhbzwpXayUnHOAk7DYMCJBAbLApFlOJVaqwV94l7fS1HvECkmFeoTzSKumZwrD4ZHDyUOIBi",
	"MY94MS31tcHnItr0ItRC221QhmOnEC7+hesRyNJ7+C+sXHE6GyLJPbFq1ZiS411fhd73qgkNMqyrpZO+",
	"aruDza5KT0KYJvMEm3Cm96Jud7aPIGpTFMWw5CKmpLmd6a2k22azP5Ju29K4kp5J+g1EigYaafZw0xOl",
	"tDenKlZ8e+FOY/YlHz3lPztpD2u1N7d2rIOHEQA6PCvaW6hEA7r9AU00I3ui8LkRTBh6QcTsZxvN7edO",
	"UccdEo6BIXXKpwahO87bdwTdIdpjAjhp5vNtAHnMnIVS9JDK0fKbRF7J8dKObsh1DHv+rjx5YEz1mLJH",
	"2rT8tfglzF9LBNmOaNO9fQnOqFZ/tN+Zczqm1NviFsel/uoyj1EjCL4973ZyGp0Ub3Wnsfr8GDon/E4q",
	"tO0UvjODH0X4pxHedg5p9ucNdA5wnlCY29FQcevpUaR+GqFu53Be/6R+YiEv1fxw2+/HI7LtdyZBew9G",
	"X32Ab971JGDI60CNhgMfcY2Iwygl23Mg3Ine/iHhDu0eEwq3syQMPHlKEAw7vZZTN0DcWT+l9zLxjxUe",
	"USbu39+kDDbgJRVLq/y48WDTWt1pfLdvL6023j0PE4VodixapII06jL6FWzIZt6OKFzWiE85M1CpCUBC",
	"BGzf2W/drjTvvbcqy9b2fvPNen1vvv5hrfX8ZuP1b9bSIp+VkopcMKkUTeJ8WoBJ2S/27n9/Igk1Wc9a",
	"SEk6DtJLSCUTXEdElDf3UvzO8tIDsx7+0Sz73oZV+SkMv0AbsEcGXdjJPGWTLmx5HhER04A4Nck74NnU",
	"tZAwx/ptq/5x3dqpNDbvWtUKb2LywU3eyuQgWVuP6/t3wqAKDuf2CCvx9PIpgyUeRT4OWnk9i7Q4UDkg",
	"MXi+0hJeF8rXcwr3Rt5EbY+AOjQefMoIHZoYPg40TlNSHBmxtnnz3zft5UfcwoUJ3Ws+R/NC7jxNvzx/",
	"R6/8hPLcDoF1zXM72sY90tNAF/yUNTXQGo+tq76eN9Mlf7f7yytURZyN113N8hOYuTLz3wAAAP//V2q6",
	"2HFFAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
