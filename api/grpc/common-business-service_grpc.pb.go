// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.14.0
// source: common-business-service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CommonBusinessService_WeChatLogin_FullMethodName                = "/common_business_service.CommonBusinessService/WeChatLogin"
	CommonBusinessService_WeChatRegisterWithLogin_FullMethodName    = "/common_business_service.CommonBusinessService/WeChatRegisterWithLogin"
	CommonBusinessService_QueryFootprintByCoordinate_FullMethodName = "/common_business_service.CommonBusinessService/QueryFootprintByCoordinate"
	CommonBusinessService_QueryFootprintByTime_FullMethodName       = "/common_business_service.CommonBusinessService/QueryFootprintByTime"
	CommonBusinessService_CreateFootprint_FullMethodName            = "/common_business_service.CommonBusinessService/CreateFootprint"
	CommonBusinessService_DeleteFootprint_FullMethodName            = "/common_business_service.CommonBusinessService/DeleteFootprint"
	CommonBusinessService_UpdateFootprint_FullMethodName            = "/common_business_service.CommonBusinessService/UpdateFootprint"
)

// CommonBusinessServiceClient is the client API for CommonBusinessService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 通用业务服务接口定义.
// [EN] API of Service.
type CommonBusinessServiceClient interface {
	// 微信小程序登录接口
	WeChatLogin(ctx context.Context, in *WeChatLoginReq, opts ...grpc.CallOption) (*WeChatLoginResp, error)
	// 微信小程序登录注册接口定义
	WeChatRegisterWithLogin(ctx context.Context, in *RegisterWithLoginReq, opts ...grpc.CallOption) (*RegisterWithLoginResp, error)
	// 坐标查询足迹点
	QueryFootprintByCoordinate(ctx context.Context, in *QueryFootprintByCoordinateReq, opts ...grpc.CallOption) (*QueryFootprintByCoordinateResp, error)
	// 查询足迹点
	QueryFootprintByTime(ctx context.Context, in *QueryFootprintByTimeReq, opts ...grpc.CallOption) (*QueryFootprintByTimeResp, error)
	// 创建足迹点
	CreateFootprint(ctx context.Context, in *CreateFootprintReq, opts ...grpc.CallOption) (*CreateFootprintResp, error)
	// 删除足迹点
	DeleteFootprint(ctx context.Context, in *DeleteFootprintReq, opts ...grpc.CallOption) (*DeleteFootprintResp, error)
	// 更新足迹点
	UpdateFootprint(ctx context.Context, in *UpdateFootprintReq, opts ...grpc.CallOption) (*UpdateFootprintResp, error)
}

type commonBusinessServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCommonBusinessServiceClient(cc grpc.ClientConnInterface) CommonBusinessServiceClient {
	return &commonBusinessServiceClient{cc}
}

func (c *commonBusinessServiceClient) WeChatLogin(ctx context.Context, in *WeChatLoginReq, opts ...grpc.CallOption) (*WeChatLoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WeChatLoginResp)
	err := c.cc.Invoke(ctx, CommonBusinessService_WeChatLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonBusinessServiceClient) WeChatRegisterWithLogin(ctx context.Context, in *RegisterWithLoginReq, opts ...grpc.CallOption) (*RegisterWithLoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterWithLoginResp)
	err := c.cc.Invoke(ctx, CommonBusinessService_WeChatRegisterWithLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonBusinessServiceClient) QueryFootprintByCoordinate(ctx context.Context, in *QueryFootprintByCoordinateReq, opts ...grpc.CallOption) (*QueryFootprintByCoordinateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryFootprintByCoordinateResp)
	err := c.cc.Invoke(ctx, CommonBusinessService_QueryFootprintByCoordinate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonBusinessServiceClient) QueryFootprintByTime(ctx context.Context, in *QueryFootprintByTimeReq, opts ...grpc.CallOption) (*QueryFootprintByTimeResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryFootprintByTimeResp)
	err := c.cc.Invoke(ctx, CommonBusinessService_QueryFootprintByTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonBusinessServiceClient) CreateFootprint(ctx context.Context, in *CreateFootprintReq, opts ...grpc.CallOption) (*CreateFootprintResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFootprintResp)
	err := c.cc.Invoke(ctx, CommonBusinessService_CreateFootprint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonBusinessServiceClient) DeleteFootprint(ctx context.Context, in *DeleteFootprintReq, opts ...grpc.CallOption) (*DeleteFootprintResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFootprintResp)
	err := c.cc.Invoke(ctx, CommonBusinessService_DeleteFootprint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonBusinessServiceClient) UpdateFootprint(ctx context.Context, in *UpdateFootprintReq, opts ...grpc.CallOption) (*UpdateFootprintResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateFootprintResp)
	err := c.cc.Invoke(ctx, CommonBusinessService_UpdateFootprint_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommonBusinessServiceServer is the server API for CommonBusinessService service.
// All implementations must embed UnimplementedCommonBusinessServiceServer
// for forward compatibility.
//
// 通用业务服务接口定义.
// [EN] API of Service.
type CommonBusinessServiceServer interface {
	// 微信小程序登录接口
	WeChatLogin(context.Context, *WeChatLoginReq) (*WeChatLoginResp, error)
	// 微信小程序登录注册接口定义
	WeChatRegisterWithLogin(context.Context, *RegisterWithLoginReq) (*RegisterWithLoginResp, error)
	// 坐标查询足迹点
	QueryFootprintByCoordinate(context.Context, *QueryFootprintByCoordinateReq) (*QueryFootprintByCoordinateResp, error)
	// 查询足迹点
	QueryFootprintByTime(context.Context, *QueryFootprintByTimeReq) (*QueryFootprintByTimeResp, error)
	// 创建足迹点
	CreateFootprint(context.Context, *CreateFootprintReq) (*CreateFootprintResp, error)
	// 删除足迹点
	DeleteFootprint(context.Context, *DeleteFootprintReq) (*DeleteFootprintResp, error)
	// 更新足迹点
	UpdateFootprint(context.Context, *UpdateFootprintReq) (*UpdateFootprintResp, error)
	mustEmbedUnimplementedCommonBusinessServiceServer()
}

// UnimplementedCommonBusinessServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommonBusinessServiceServer struct{}

func (UnimplementedCommonBusinessServiceServer) WeChatLogin(context.Context, *WeChatLoginReq) (*WeChatLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WeChatLogin not implemented")
}
func (UnimplementedCommonBusinessServiceServer) WeChatRegisterWithLogin(context.Context, *RegisterWithLoginReq) (*RegisterWithLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WeChatRegisterWithLogin not implemented")
}
func (UnimplementedCommonBusinessServiceServer) QueryFootprintByCoordinate(context.Context, *QueryFootprintByCoordinateReq) (*QueryFootprintByCoordinateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFootprintByCoordinate not implemented")
}
func (UnimplementedCommonBusinessServiceServer) QueryFootprintByTime(context.Context, *QueryFootprintByTimeReq) (*QueryFootprintByTimeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFootprintByTime not implemented")
}
func (UnimplementedCommonBusinessServiceServer) CreateFootprint(context.Context, *CreateFootprintReq) (*CreateFootprintResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFootprint not implemented")
}
func (UnimplementedCommonBusinessServiceServer) DeleteFootprint(context.Context, *DeleteFootprintReq) (*DeleteFootprintResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFootprint not implemented")
}
func (UnimplementedCommonBusinessServiceServer) UpdateFootprint(context.Context, *UpdateFootprintReq) (*UpdateFootprintResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFootprint not implemented")
}
func (UnimplementedCommonBusinessServiceServer) mustEmbedUnimplementedCommonBusinessServiceServer() {}
func (UnimplementedCommonBusinessServiceServer) testEmbeddedByValue()                               {}

// UnsafeCommonBusinessServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommonBusinessServiceServer will
// result in compilation errors.
type UnsafeCommonBusinessServiceServer interface {
	mustEmbedUnimplementedCommonBusinessServiceServer()
}

func RegisterCommonBusinessServiceServer(s grpc.ServiceRegistrar, srv CommonBusinessServiceServer) {
	// If the following call pancis, it indicates UnimplementedCommonBusinessServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CommonBusinessService_ServiceDesc, srv)
}

func _CommonBusinessService_WeChatLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WeChatLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonBusinessServiceServer).WeChatLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonBusinessService_WeChatLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonBusinessServiceServer).WeChatLogin(ctx, req.(*WeChatLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonBusinessService_WeChatRegisterWithLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterWithLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonBusinessServiceServer).WeChatRegisterWithLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonBusinessService_WeChatRegisterWithLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonBusinessServiceServer).WeChatRegisterWithLogin(ctx, req.(*RegisterWithLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonBusinessService_QueryFootprintByCoordinate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFootprintByCoordinateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonBusinessServiceServer).QueryFootprintByCoordinate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonBusinessService_QueryFootprintByCoordinate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonBusinessServiceServer).QueryFootprintByCoordinate(ctx, req.(*QueryFootprintByCoordinateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonBusinessService_QueryFootprintByTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFootprintByTimeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonBusinessServiceServer).QueryFootprintByTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonBusinessService_QueryFootprintByTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonBusinessServiceServer).QueryFootprintByTime(ctx, req.(*QueryFootprintByTimeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonBusinessService_CreateFootprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFootprintReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonBusinessServiceServer).CreateFootprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonBusinessService_CreateFootprint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonBusinessServiceServer).CreateFootprint(ctx, req.(*CreateFootprintReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonBusinessService_DeleteFootprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFootprintReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonBusinessServiceServer).DeleteFootprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonBusinessService_DeleteFootprint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonBusinessServiceServer).DeleteFootprint(ctx, req.(*DeleteFootprintReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommonBusinessService_UpdateFootprint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFootprintReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommonBusinessServiceServer).UpdateFootprint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommonBusinessService_UpdateFootprint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommonBusinessServiceServer).UpdateFootprint(ctx, req.(*UpdateFootprintReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CommonBusinessService_ServiceDesc is the grpc.ServiceDesc for CommonBusinessService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommonBusinessService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "common_business_service.CommonBusinessService",
	HandlerType: (*CommonBusinessServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WeChatLogin",
			Handler:    _CommonBusinessService_WeChatLogin_Handler,
		},
		{
			MethodName: "WeChatRegisterWithLogin",
			Handler:    _CommonBusinessService_WeChatRegisterWithLogin_Handler,
		},
		{
			MethodName: "QueryFootprintByCoordinate",
			Handler:    _CommonBusinessService_QueryFootprintByCoordinate_Handler,
		},
		{
			MethodName: "QueryFootprintByTime",
			Handler:    _CommonBusinessService_QueryFootprintByTime_Handler,
		},
		{
			MethodName: "CreateFootprint",
			Handler:    _CommonBusinessService_CreateFootprint_Handler,
		},
		{
			MethodName: "DeleteFootprint",
			Handler:    _CommonBusinessService_DeleteFootprint_Handler,
		},
		{
			MethodName: "UpdateFootprint",
			Handler:    _CommonBusinessService_UpdateFootprint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common-business-service.proto",
}
