// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.14.0
// source: base-service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BaseService_WeChatLogin_FullMethodName        = "/base_service.BaseService/WeChatLogin"
	BaseService_WeChatFastRegister_FullMethodName = "/base_service.BaseService/WeChatFastRegister"
)

// BaseServiceClient is the client API for BaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 通用业务服务接口定义.
// [EN] API of Service.
type BaseServiceClient interface {
	// 微信小程序登录接口
	WeChatLogin(ctx context.Context, in *WeChatLoginReq, opts ...grpc.CallOption) (*WeChatLoginResp, error)
	// 微信小程序快速登录注册接口定义
	WeChatFastRegister(ctx context.Context, in *WeChatFastRegisterReq, opts ...grpc.CallOption) (*WeChatFastRegisterResp, error)
}

type baseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBaseServiceClient(cc grpc.ClientConnInterface) BaseServiceClient {
	return &baseServiceClient{cc}
}

func (c *baseServiceClient) WeChatLogin(ctx context.Context, in *WeChatLoginReq, opts ...grpc.CallOption) (*WeChatLoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WeChatLoginResp)
	err := c.cc.Invoke(ctx, BaseService_WeChatLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseServiceClient) WeChatFastRegister(ctx context.Context, in *WeChatFastRegisterReq, opts ...grpc.CallOption) (*WeChatFastRegisterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WeChatFastRegisterResp)
	err := c.cc.Invoke(ctx, BaseService_WeChatFastRegister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BaseServiceServer is the server API for BaseService service.
// All implementations must embed UnimplementedBaseServiceServer
// for forward compatibility.
//
// 通用业务服务接口定义.
// [EN] API of Service.
type BaseServiceServer interface {
	// 微信小程序登录接口
	WeChatLogin(context.Context, *WeChatLoginReq) (*WeChatLoginResp, error)
	// 微信小程序快速登录注册接口定义
	WeChatFastRegister(context.Context, *WeChatFastRegisterReq) (*WeChatFastRegisterResp, error)
	mustEmbedUnimplementedBaseServiceServer()
}

// UnimplementedBaseServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBaseServiceServer struct{}

func (UnimplementedBaseServiceServer) WeChatLogin(context.Context, *WeChatLoginReq) (*WeChatLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WeChatLogin not implemented")
}
func (UnimplementedBaseServiceServer) WeChatFastRegister(context.Context, *WeChatFastRegisterReq) (*WeChatFastRegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WeChatFastRegister not implemented")
}
func (UnimplementedBaseServiceServer) mustEmbedUnimplementedBaseServiceServer() {}
func (UnimplementedBaseServiceServer) testEmbeddedByValue()                     {}

// UnsafeBaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BaseServiceServer will
// result in compilation errors.
type UnsafeBaseServiceServer interface {
	mustEmbedUnimplementedBaseServiceServer()
}

func RegisterBaseServiceServer(s grpc.ServiceRegistrar, srv BaseServiceServer) {
	// If the following call pancis, it indicates UnimplementedBaseServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BaseService_ServiceDesc, srv)
}

func _BaseService_WeChatLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WeChatLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).WeChatLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseService_WeChatLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).WeChatLogin(ctx, req.(*WeChatLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BaseService_WeChatFastRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WeChatFastRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BaseServiceServer).WeChatFastRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BaseService_WeChatFastRegister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BaseServiceServer).WeChatFastRegister(ctx, req.(*WeChatFastRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

// BaseService_ServiceDesc is the grpc.ServiceDesc for BaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "base_service.BaseService",
	HandlerType: (*BaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WeChatLogin",
			Handler:    _BaseService_WeChatLogin_Handler,
		},
		{
			MethodName: "WeChatFastRegister",
			Handler:    _BaseService_WeChatFastRegister_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "base-service.proto",
}
