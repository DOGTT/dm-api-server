// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.14.0
// source: demo-runner-service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DemoRunnerService_TextCompletions_FullMethodName = "/dog_g.demo_runner_service.DemoRunnerService/TextCompletions"
)

// DemoRunnerServiceClient is the client API for DemoRunnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 服务接口定义.
// [EN] API of Service.
type DemoRunnerServiceClient interface {
	// 给出提示后，模型将返回一个或多个预测完成，并且还可以返回每个位置的替代令牌的概率.
	// [EN] Given a prompt, the model will return one or more predicted completions, and can also return the probabilities of alternative tokens at each position.
	TextCompletions(ctx context.Context, in *TextCompletionsReq, opts ...grpc.CallOption) (*TextCompletionsResp, error)
}

type demoRunnerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDemoRunnerServiceClient(cc grpc.ClientConnInterface) DemoRunnerServiceClient {
	return &demoRunnerServiceClient{cc}
}

func (c *demoRunnerServiceClient) TextCompletions(ctx context.Context, in *TextCompletionsReq, opts ...grpc.CallOption) (*TextCompletionsResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TextCompletionsResp)
	err := c.cc.Invoke(ctx, DemoRunnerService_TextCompletions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DemoRunnerServiceServer is the server API for DemoRunnerService service.
// All implementations must embed UnimplementedDemoRunnerServiceServer
// for forward compatibility.
//
// 服务接口定义.
// [EN] API of Service.
type DemoRunnerServiceServer interface {
	// 给出提示后，模型将返回一个或多个预测完成，并且还可以返回每个位置的替代令牌的概率.
	// [EN] Given a prompt, the model will return one or more predicted completions, and can also return the probabilities of alternative tokens at each position.
	TextCompletions(context.Context, *TextCompletionsReq) (*TextCompletionsResp, error)
	mustEmbedUnimplementedDemoRunnerServiceServer()
}

// UnimplementedDemoRunnerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDemoRunnerServiceServer struct{}

func (UnimplementedDemoRunnerServiceServer) TextCompletions(context.Context, *TextCompletionsReq) (*TextCompletionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TextCompletions not implemented")
}
func (UnimplementedDemoRunnerServiceServer) mustEmbedUnimplementedDemoRunnerServiceServer() {}
func (UnimplementedDemoRunnerServiceServer) testEmbeddedByValue()                           {}

// UnsafeDemoRunnerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DemoRunnerServiceServer will
// result in compilation errors.
type UnsafeDemoRunnerServiceServer interface {
	mustEmbedUnimplementedDemoRunnerServiceServer()
}

func RegisterDemoRunnerServiceServer(s grpc.ServiceRegistrar, srv DemoRunnerServiceServer) {
	// If the following call pancis, it indicates UnimplementedDemoRunnerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DemoRunnerService_ServiceDesc, srv)
}

func _DemoRunnerService_TextCompletions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TextCompletionsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoRunnerServiceServer).TextCompletions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DemoRunnerService_TextCompletions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoRunnerServiceServer).TextCompletions(ctx, req.(*TextCompletionsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// DemoRunnerService_ServiceDesc is the grpc.ServiceDesc for DemoRunnerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DemoRunnerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dog_g.demo_runner_service.DemoRunnerService",
	HandlerType: (*DemoRunnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TextCompletions",
			Handler:    _DemoRunnerService_TextCompletions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "demo-runner-service.proto",
}
